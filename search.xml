<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/03/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>JS数据类型（基本数据类型+引用类型）</title>
    <url>/2022/03/27/article-title/</url>
    <content><![CDATA[<p>#JS数据类型（基本数据类型+引用类型）<br>JavaScript 是一种动态类型的语言，在定义变量时不需要提前指定变量的类型，变量的类型是在程序运行过程中由 JavaScript 引擎动态决定的，另外，您可以使用同一个变量来存储不同类型的数据</p>
<pre><code>var a;  // 此时 a 为 Undefined
a = &quot;http://c.biancheng.net/&quot;; // 此时 a 为 String 类型
a = 123;  // 此时 a 为 Number 类型
</code></pre>
<p>##JavaScript 中的数据类型可以分为两种类型<br>###基本数据类型（值类型）</p>
<hr>
<p>字符串（String）、数字（Number）、布尔（Boolean）、空（Null）、未定义（Undefined）、Symbol</p>
<p>######1) String 类型<br>字符串（String）类型是一段以单引号’’或双引号””包裹起来的文本，例如 ‘123’、”abc”。需要注意的是，单引号和双引号是定义字符串的不同方式，并不是字符串的一部分</p>
<pre><code>var str = &quot;Let&#39;s have a cup of coffee.&quot;;  // 双引号中包含单引号
var str = &#39;He said &quot;Hello&quot; and left.&#39;;    // 单引号中包含双引号
var str = &#39;We\&#39;ll never give up.&#39;;        // 使用反斜杠转义字符串中的单引号 
</code></pre>
<p>######Number 类型<br>数值（Number）类型用来定义数值，JavaScript 中不区分整数和小数（浮点数），统一使用 Number 类型表示</p>
<pre><code>var num1 = 123;     // 整数
var num2 = 3.14;    // 浮点数
</code></pre>
<p>注意：Number 类型所能定义的数值并不是无限的<br>对于一些极大或者极小的数，也可以通过科学（指数）计数法来表示</p>
<pre><code>var y=123e5;      // 123 乘以 10 的 5 次方，即 12300000
var z=123e-5;     // 123 乘以 10 的 -5 次方，即 0.00123
</code></pre>
<p>另外，Number 类型中还有一些比较特殊的值，分别为 Infinity、-Infinity 和 NaN，其中<br>Infinity：用来表示正无穷大的数值，一般指大于 1.7976931348623157e+308 的数；<br>-Infinity：用来表示负无穷大的数值，一般指小于 5e-324 的数；<br>NaN：即非数值（Not a Number 的缩写），用来表示无效或未定义的数学运算结构，例如 0 除以 0。<br>提示：如果某次计算的结果超出了 JavaScript 中 Number 类型的取值范围，那么这个数就会自动转化为无穷大，正数为 Infinity，负数为 -Infinity。<br> ######Boolean 类型<br>布尔（Boolean）类型只有两个值，true（真）或者 false（假），在做条件判断时使用的比较多，您除了可以直接使用 true 或 false 来定义布尔类型的变量外，还可以通过一些表达式来得到布尔类型的值</p>
<pre><code>var a = true;   // 定义一个布尔值 true
var b = false;  // 定义一个布尔值 false
var c = 2 &gt; 1;  // 表达式 2 &gt; 1 成立，其结果为“真（true）”，所以 c 的值为布尔类型的 true
var d = 2 &lt; 1;  // 表达式 2 &lt; 1 不成立，其结果为“假（false）”，所以 c 的值为布尔类型的 false
</code></pre>
<h6 id="Undefined-类型"><a href="#Undefined-类型" class="headerlink" title="Undefined 类型"></a>Undefined 类型</h6><p>Undefined 也是一个只有一个值的特殊数据类型，表示未定义。当我们声明一个变量但未给变量赋值时，这个变量的默认值就是 Undefined</p>
<pre><code>  var num;
  console.log(num);  // 输出 undefined
</code></pre>
<p>在使用 typeof 操作符查看未赋值的变量类型时，会发现它们的类型也是 undefined。对于未声明的变量，使用 typeof 操作符查看其类型会发现，未声明的变量也是 undefined</p>
<pre><code>var message;
console.log(typeof message);  // 输出 undefined
console.log(typeof name);     // 输出 undefined
</code></pre>
<p>######Symbol 类型<br>Symbol 是 ECMAScript6 中引入的一种新的数据类型，表示独一无二的值，Symbol 类型的值需要使用 Symbol() 函数来生成</p>
<pre><code>var str = &quot;123&quot;;
var sym1 = Symbol(str);
var sym2 = Symbol(str);
console.log(sym1);          // 输出 Symbol(123)
console.log(sym2);          // 输出 Symbol(123)
console.log(sym1 == sym2);  // 输出 false ：虽然 sym1 与 sym2 看起来是相同的，但实际上它们并    不一样，根据 Symbol 类型的特点，sym1 和 sym2 都是独一无二的
</code></pre>
<h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="###引用数据类型"></a>###引用数据类型</h2><p>对象（Object）、数组（Array）、函数（Function）</p>
<p>######Object 类型<br>JavaScript 中的对象（Object）类型是一组由键、值组成的无序集合，定义对象类型需要使用花括号{ }，格式如下：</p>
<pre><code>&#123;name1: value1, name2: value2, name3: value3, ..., nameN: valueN&#125;
</code></pre>
<p>其中 name1、name2、name3、…、nameN 为对象中的键，value1、value2、value3、…、valueN 为对应的值。</p>
<p>在 JavaScript 中，对象类型的键都是字符串类型的，值则可以是任意数据类型。要获取对象中的某个值，可以使用对象名.键的形式</p>
<pre><code>var person = &#123;
name: &#39;Bob&#39;,
age: 20,
tags: [&#39;js&#39;, &#39;web&#39;, &#39;mobile&#39;],
city: &#39;Beijing&#39;,
hasCar: true,
zipcode: null
&#125;;
console.log(person.name);       // 输出 Bob
console.log(person.age);        // 输出 20
</code></pre>
<p> ######Array 类型<br>数组（Array）是一组按顺序排列的数据的集合，数组中的每个值都称为元素，而且数组中可以包含任意类型的数据。在 JavaScript 中定义数组需要使用方括号[ ]，数组中的每个元素使用逗号进行分隔</p>
<pre><code>[1, 2, 3, &#39;hello&#39;, true, null]
</code></pre>
<p>也可以使用 Array() 函数来创建数组</p>
<pre><code>var arr = new Array(1, 2, 3, 4);
console.log(arr);       // 输出 [1, 2, 3, 4]
</code></pre>
<p>数组中的元素可以通过索引来访问。数组中的索引从 0 开始，并依次递增，也就是说数组第一个元素的索引为 0，第二个元素的索引为 1，第三个元素的索引为 2，以此类推</p>
<pre><code>var arr = [1, 2, 3.14, &#39;Hello&#39;, null, true];
console.log(arr[0]);  // 输出索引为 0 的元素，即 1
console.log(arr[5]);  // 输出索引为 5 的元素，即 true
console.log(arr[6]);  // 索引超出了范围，返回 undefined
</code></pre>
<h6 id="Function-类型"><a href="#Function-类型" class="headerlink" title="Function 类型"></a>Function 类型</h6><p>函数（Function）是一段具有特定功能的代码块，函数并不会自动运行，需要通过函数名调用才能运行</p>
<pre><code>function sayHello(name)&#123;
return &quot;Hello, &quot; + name;
&#125;
var res = sayHello(&quot;Jinghai&quot;);
console.log(res);  // 输出 Hello, Jinghai
</code></pre>
<p>函数还可以存储在变量、对象、数组中，而且函数可以作为参数传递给其它函数，或则从其它函数返回</p>
<pre><code>var fun = function()&#123;
console.log(&quot;https://www.jianshu.com/u/32841c0369fb&quot;);
&#125;

function createGreeting(name)&#123;
    return &quot;Hello, &quot; + name;
&#125;
function displayGreeting(greetingFunction, userName)&#123;
    return greetingFunction(userName);
&#125;
var result = displayGreeting(createGreeting, &quot;Jinghai&quot;);
console.log(result);  // 输出 Hello, Jinghai
</code></pre>
<p>#读后有收获可以请作者喝咖啡</p>
]]></content>
      <tags>
        <tag>String Number Boolean Null Undefined Symbol Object Array Function</tag>
      </tags>
  </entry>
</search>
