<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown使用详解</title>
    <url>/archives/f2108d0a.html</url>
    <content><![CDATA[<h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><p>在站点文件夹中打开 git bash，输入如下命令创建文章，其中 title 为文章的标题</p>
<blockquote>
<p>$ hexo new “title”</p>
</blockquote>
<p>当输入命令后，就会在 source/_post 文件夹下创建一个文件，命名为：title.md</p>
<p>这个文件就是将要发布到网站上的原始文件，用于记录文章内容</p>
<h2 id="编写文章（基于-Markdown）"><a href="#编写文章（基于-Markdown）" class="headerlink" title="编写文章（基于 Markdown）"></a>编写文章（基于 Markdown）</h2><h3 id="Markdown-简介"><a href="#Markdown-简介" class="headerlink" title="Markdown 简介"></a>Markdown 简介</h3><blockquote>
<p>Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式</p>
</blockquote>
<blockquote>
<p>在编写 Markdown 时，博主强烈的推荐给大家一款简洁易用的 Markdown 编辑器 —— <strong>Typora</strong></p>
</blockquote>
<h3 id="Typora使用说明"><a href="#Typora使用说明" class="headerlink" title="Typora使用说明"></a>Typora使用说明</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><h5 id="Typora-快捷键"><a href="#Typora-快捷键" class="headerlink" title="Typora 快捷键"></a>Typora 快捷键</h5><blockquote>
<p>Ctrl+1：一级标题</p>
<p>Ctrl+2：二级标题</p>
<p>Ctrl+3：三级标题</p>
<p>Ctrl+4：四级标题</p>
<p>Ctrl+5：五级标题</p>
<p>Ctrl+6 ：六级标题</p>
<p>Ctrl+0：段落</p>
</blockquote>
<h4 id="粗体、斜体、删除线和下划线"><a href="#粗体、斜体、删除线和下划线" class="headerlink" title="粗体、斜体、删除线和下划线"></a>粗体、斜体、删除线和下划线</h4><h5 id="Typora-快捷键-1"><a href="#Typora-快捷键-1" class="headerlink" title="Typora 快捷键"></a>Typora 快捷键</h5><blockquote>
<p>Ctrl+I：斜体</p>
<p>Ctrl+B：粗体</p>
<p>Ctrl+U：下划线</p>
<p>Alt+Shift+5：删除线</p>
</blockquote>
<h4 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h4><p><strong>Typora 快捷键：</strong> Ctrl+Shift+Q</p>
<h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p><strong>Typora 快捷键：</strong></p>
<blockquote>
<p>行内代码：Ctrl+Shift+`</p>
<p>多行代码：Ctrl+Shift+K</p>
</blockquote>
<h4 id="公式块"><a href="#公式块" class="headerlink" title="公式块"></a>公式块</h4><p><strong>Typora 快捷键：</strong> Ctrl+Shift+M</p>
<h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><blockquote>
<p>方法一：—</p>
<p>方法二：+++</p>
<p>方法三：***</p>
</blockquote>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p><strong>Typora 快捷键：</strong></p>
<blockquote>
<p>有序列表项：Ctrl+Shift+[</p>
<p>无序列表项：Ctrl+Shift+]</p>
</blockquote>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p><strong>Typora 快捷键：</strong> Ctrl+T</p>
<h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h4><p><strong>Typora快捷键：</strong> Ctrl+K</p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><ol>
<li> <strong>Typora快捷键：</strong> Ctrl+Shift+I</li>
</ol>
<blockquote>
<p>说明：在 Hexo中 插入图片时，请按照以下的步骤进行设置</p>
<ol>
<li>将站点配置文件 中的 post_asset_folder 选项的值设置为 true</li>
</ol>
<ol start="2">
<li><p> 在站点文件夹中打开 git bash，输入命令 npm install hexo-asset-image –save 安装插件</p>
</li>
<li><p> 这样，当使用 hexo new title 创建文章时，将同时在 source/_post 文件夹中生成一个与 title 同名的文件夹，我们只需将图片放进此文件夹中，然后在文章中通过 Markdown 语法进行引用即可</p>
</li>
</ol>
<blockquote>
<p>例如，在资源文件夹（就是那个与 title 同名的文件夹）中添加图片 example.PNG，则可以在对应的文章中使用语句![示例图片](title/example.PNG “示例图片”) 添加图片</p>
</blockquote>
</blockquote>
<hr>
<ol start="2">
<li>   <strong>base64编码</strong></li>
</ol>
<blockquote>
<p>再图片中引用![示例图片][good]</p>
<p>文档最后添加/[good]:data::image/png;base64,iVB—-</p>
</blockquote>
<h3 id="高级设置"><a href="#高级设置" class="headerlink" title="高级设置"></a>高级设置</h3><h4 id="模板设置"><a href="#模板设置" class="headerlink" title="模板设置"></a>模板设置</h4><p>当我们使用命令 <code>hexo new "title"</code> 创建文章时，Hexo 会根据 <code>/scaffolds/post.md</code> 对新文章进行初始化</p>
<p>换言之，<code>/scaffolds/post.md</code> 就是新文章的 <strong>模板</strong>，所以我们可以修改它来适应自己的写作习惯</p>
<p>示例如下</p>
<blockquote>
<pre class="line-numbers language-hexo" data-language="hexo"><code class="language-hexo">title: {{ title }}
date: {{ date }}
tags: 
categories: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


</blockquote>
<h4 id="头部设置"><a href="#头部设置" class="headerlink" title="头部设置"></a>头部设置</h4><p>在每篇利用 Hexo 创建的文章的开头，都会有对文章进行说明的文字，叫做 <strong>文章头部</strong></p>
<p>文章的头部除了可以设置文章标题、发布日期等基础信息外，还可以为文章添加标签、分类等</p>
<p>一个简单的示例如下</p>
<blockquote>
<pre class="line-numbers language-hexo" data-language="hexo"><code class="language-hexo"> title: Title
date: YYYY-MM-DD HH:MM:SS
tags: [tag1, tag2, ...]
categories: category<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意</strong>：属性和属性值之间必须有一个空格，否则会解析错误</p>
</blockquote>
<h4 id="首页显示"><a href="#首页显示" class="headerlink" title="首页显示"></a>首页显示</h4><p>在利用 Hexo 框架搭建的博客网站中，首页会显示文章的内容，且默认显示文章的全部内容</p>
<p>如果当文章太长的时候就会显得十分冗余，所以我们有必要对其进行精简</p>
<p>这时，我们只需在文章中使用 <code>&lt;!--more--&gt;</code> 标志即可，表示只会显示标志前面的内容</p>
<hr>
<h2 id="部署发布"><a href="#部署发布" class="headerlink" title="部署发布"></a>部署发布</h2><p>在站点文件夹中打开 git bash，输入如下命令部署和发布文章</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>建议：在使用 <code>hexo g</code> 部署之后，可以先使用 <code>hexo s</code> 运行本地站点，然后在浏览器输入地址 <a href="http://lacolhost:4000/">http://lacolhost:4000/</a> 查看运行结果，检查无误后再使用 <code>hexo d</code> 发布</p>
</blockquote>
<h1 id="读后有收获可以请作者喝咖啡"><a href="#读后有收获可以请作者喝咖啡" class="headerlink" title="读后有收获可以请作者喝咖啡"></a>读后有收获可以请作者喝咖啡</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JS数据类型（基本数据类型+引用类型）</title>
    <url>/archives/18789.html</url>
    <content><![CDATA[<h1 id="JS数据类型（基本数据类型-引用类型）"><a href="#JS数据类型（基本数据类型-引用类型）" class="headerlink" title="JS数据类型（基本数据类型+引用类型）"></a>JS数据类型（基本数据类型+引用类型）</h1><p>JavaScript 是一种动态类型的语言，在定义变量时不需要提前指定变量的类型，变量的类型是在程序运行过程中由 JavaScript 引擎动态决定的，另外，您可以使用同一个变量来存储不同类型的数据</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a<span class="token punctuation">;</span>  <span class="token comment">// 此时 a 为 Undefined</span>
a <span class="token operator">=</span> <span class="token string">"https://www.jianshu.com/u/32841c0369fb"</span><span class="token punctuation">;</span> <span class="token comment">// 此时 a 为 String 类型</span>
a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment">// 此时 a 为 Number 类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<h3 id="基本数据类型（值类型）"><a href="#基本数据类型（值类型）" class="headerlink" title="基本数据类型（值类型）"></a>基本数据类型（值类型）</h3><hr>
<p><em><strong>字符串（String）、数字（Number）、布尔（Boolean）、空（Null）、未定义（Undefined）、Symbol</strong></em></p>
<h4 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h4><p>字符串（String）类型是一段以单引号’’或双引号””包裹起来的文本，例如 ‘123’、”abc”。需要注意的是，单引号和双引号是定义字符串的不同方式，并不是字符串的一部分</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"Let's have a cup of coffee."</span><span class="token punctuation">;</span>  <span class="token comment">// 双引号中包含单引号</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'He said "Hello" and left.'</span><span class="token punctuation">;</span>    <span class="token comment">// 单引号中包含双引号</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'We\'ll never give up.'</span><span class="token punctuation">;</span>        <span class="token comment">// 使用反斜杠转义字符串中的单引号 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h4><p>数值（Number）类型用来定义数值，JavaScript 中不区分整数和小数（浮点数），统一使用 Number 类型表示</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment">// 整数</span>
<span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>    <span class="token comment">// 浮点数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>注意：Number 类型所能定义的数值并不是无限的</p>
</blockquote>
<p>对于一些极大或者极小的数，也可以通过科学（指数）计数法来表示</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> y<span class="token operator">=</span><span class="token number">123e5</span><span class="token punctuation">;</span>      <span class="token comment">// 123 乘以 10 的 5 次方，即 12300000</span>
<span class="token keyword">var</span> z<span class="token operator">=</span><span class="token number">123e-5</span><span class="token punctuation">;</span>     <span class="token comment">// 123 乘以 10 的 -5 次方，即 0.00123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>Number 类型中还有一些比较特殊的值，分别为 Infinity、-Infinity 和 NaN，其中<br>Infinity：用来表示正无穷大的数值，一般指大于 1.7976931348623157e+308 的数；<br>-Infinity：用来表示负无穷大的数值，一般指小于 5e-324 的数；<br>NaN：即非数值（Not a Number 的缩写），用来表示无效或未定义的数学运算结构，例如 0 除以 0。<br>提示：如果某次计算的结果超出了 JavaScript 中 Number 类型的取值范围，那么这个数就会自动转化为无穷大，正数为 Infinity，负数为 -Infinity。</p>
</blockquote>
<h4 id="Boolean-类型"><a href="#Boolean-类型" class="headerlink" title="Boolean 类型"></a>Boolean 类型</h4><p>布尔（Boolean）类型只有两个值，true（真）或者 false（假），在做条件判断时使用的比较多，您除了可以直接使用 true 或 false 来定义布尔类型的变量外，还可以通过一些表达式来得到布尔类型的值</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">// 定义一个布尔值 true</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 定义一个布尔值 false</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 表达式 2 &gt; 1 成立，其结果为“真（true）”，所以 c 的值为布尔类型的 true</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 表达式 2 &lt; 1 不成立，其结果为“假（false）”，所以 c 的值为布尔类型的 false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Undefined-类型"><a href="#Undefined-类型" class="headerlink" title="Undefined 类型"></a>Undefined 类型</h4><p>Undefined 也是一个只有一个值的特殊数据类型，表示未定义。当我们声明一个变量但未给变量赋值时，这个变量的默认值就是 Undefined</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> num<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在使用 typeof 操作符查看未赋值的变量类型时，会发现它们的类型也是 undefined。对于未声明的变量，使用 typeof 操作符查看其类型会发现，未声明的变量也是 undefined</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> message<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 输出 undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="Symbol-类型"><a href="#Symbol-类型" class="headerlink" title="Symbol 类型"></a>Symbol 类型</h4><p>Symbol 是 ECMAScript6 中引入的一种新的数据类型，表示独一无二的值，Symbol 类型的值需要使用 Symbol() 函数来生成</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sym1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sym2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sym1<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 输出 Symbol(123)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sym2<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 输出 Symbol(123)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sym1 <span class="token operator">==</span> sym2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 false ：虽然 sym1 与 sym2 看起来是相同的，但实际上它们并    不一样，根据 Symbol 类型的特点，sym1 和 sym2 都是独一无二的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><hr>
<p><em><strong>对象（Object）、数组（Array）、函数（Function）</strong></em></p>
<h4 id="Object-类型"><a href="#Object-类型" class="headerlink" title="Object 类型"></a>Object 类型</h4><p>JavaScript 中的对象（Object）类型是一组由键、值组成的无序集合，定义对象类型需要使用花括号{ }，格式如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span><span class="token literal-property property">name1</span><span class="token operator">:</span> value1<span class="token punctuation">,</span> <span class="token literal-property property">name2</span><span class="token operator">:</span> value2<span class="token punctuation">,</span> <span class="token literal-property property">name3</span><span class="token operator">:</span> value3<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> <span class="token literal-property property">nameN</span><span class="token operator">:</span> valueN<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>其中 name1、name2、name3、…、nameN 为对象中的键，value1、value2、value3、…、valueN 为对应的值。</p>
</blockquote>
<p>在 JavaScript 中，对象类型的键都是字符串类型的，值则可以是任意数据类型。要获取对象中的某个值，可以使用对象名.键的形式</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span>
<span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
<span class="token literal-property property">tags</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'web'</span><span class="token punctuation">,</span> <span class="token string">'mobile'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">'Beijing'</span><span class="token punctuation">,</span>
<span class="token literal-property property">hasCar</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token literal-property property">zipcode</span><span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 输出 Bob</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 输出 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Array-类型"><a href="#Array-类型" class="headerlink" title="Array 类型"></a>Array 类型</h4><p>数组（Array）是一组按顺序排列的数据的集合，数组中的每个值都称为元素，而且数组中可以包含任意类型的数据。在 JavaScript 中定义数组需要使用方括号[ ]，数组中的每个元素使用逗号进行分隔</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>也可以使用 Array() 函数来创建数组</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 输出 [1, 2, 3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>数组中的元素可以通过索引来访问。数组中的索引从 0 开始，并依次递增，也就是说数组第一个元素的索引为 0，第二个元素的索引为 1，第三个元素的索引为 2，以此类推</p>
</blockquote>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出索引为 0 的元素，即 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出索引为 5 的元素，即 true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 索引超出了范围，返回 undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Function-类型"><a href="#Function-类型" class="headerlink" title="Function 类型"></a>Function 类型</h4><p>函数（Function）是一段具有特定功能的代码块，函数并不会自动运行，需要通过函数名调用才能运行</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"Jinghai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 Hello, Jinghai</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>函数还可以存储在变量、对象、数组中，而且函数可以作为参数传递给其它函数，或则从其它函数返回</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"https://www.jianshu.com/u/32841c0369fb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createGreeting</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">displayGreeting</span><span class="token punctuation">(</span><span class="token parameter">greetingFunction<span class="token punctuation">,</span> userName</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">greetingFunction</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">displayGreeting</span><span class="token punctuation">(</span>createGreeting<span class="token punctuation">,</span> <span class="token string">"Jinghai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 Hello, Jinghai</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="读后有收获可以请作者喝咖啡"><a href="#读后有收获可以请作者喝咖啡" class="headerlink" title="读后有收获可以请作者喝咖啡"></a>读后有收获可以请作者喝咖啡</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS基本数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title>思维导图</title>
    <url>/archives/6c27b784.html</url>
    <content><![CDATA[<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><blockquote>
<p>首先进入到 Hexo 博客的根目录，执行 <code>npm install hexo-simple-mindmap</code> 安装插件</p>
</blockquote>
<p>写新文章时，在需要脑图的地方，按以下格式添加内容。插件会自动将 <code>pullquote</code> 中包裹的内容按照层级顺序渲染成脑图</p>
<pre class="line-numbers language-none"><code class="language-none">{% pullquote mindmap mindmap-md %}
- [Hexo 的思维导图插件](https://屵.com/archives/6c27b784.html)
  - 前言
  - 使用方法
    - 一
    - 二
    - 三
  - 太长不看
  - 参考资料
{% endpullquote %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>运行结果如下</strong></p>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li><a href="https://屵.com/archives/6c27b784.html">Hexo 的思维导图插件</a><ul>
<li>前言</li>
<li>使用方法<ul>
<li>一</li>
<li>二</li>
<li>三</li>
</ul>
</li>
<li>太长不看</li>
<li>参考资料</li>
</ul>
</li>
</ul>
</blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>思维导图</tag>
      </tags>
  </entry>
  <entry>
    <title>JS运算符</title>
    <url>/archives/19d8bcc5.html</url>
    <content><![CDATA[<h2 id="JS运算符（优先级及结合性）"><a href="#JS运算符（优先级及结合性）" class="headerlink" title="JS运算符（优先级及结合性）"></a>JS运算符（优先级及结合性）</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><hr>
<p>算数运算符用来执行常见的数学运算，例如加法、减法、乘法、除法等，下表中列举了 JavaScript 中支持的算术运算符：</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">加法运算符</td>
<td align="center">x + y 表示计算 x 加 y 的和</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">减法运算符</td>
<td align="center">x - y 表示计算 x 减 y 的差</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">乘法运算符</td>
<td align="center">x * y 表示计算 x 乘 y 的积</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">除法运算符</td>
<td align="center">x / y 表示计算 x 除以 y 的商</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取模（取余）运算符</td>
<td align="center">x % y 表示计算 x 除以 y 的余数</td>
</tr>
</tbody></table>
<p>示例代码如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>
y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x + y ="</span><span class="token punctuation">,</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：x + y = 14</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x - y ="</span><span class="token punctuation">,</span> x <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：x - y = 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x * y ="</span><span class="token punctuation">,</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：x * y = 40</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x / y ="</span><span class="token punctuation">,</span> x <span class="token operator">/</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：x / y = 2.5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x % y ="</span><span class="token punctuation">,</span> x <span class="token operator">%</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：x % y = 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算符用来为变量赋值，下表中列举了 JavaScript 中支持的赋值运算符：</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">=</td>
<td align="center">最简单的赋值运算符，将运算符右侧的值赋值给运算符左侧的变量</td>
<td align="center">x = 10 表示将变量 x 赋值为 10</td>
</tr>
<tr>
<td align="center">+=</td>
<td align="center">先进行加法运算，再将结果赋值给运算符左侧的变量</td>
<td align="center">x += y 等同于 x = x + y</td>
</tr>
<tr>
<td align="center">-=</td>
<td align="center">先进行减法运算，再将结果赋值给运算符左侧的变量</td>
<td align="center">x -= y 等同于 x = x - y</td>
</tr>
<tr>
<td align="center">*=</td>
<td align="center">先进行乘法运算，再将结果赋值给运算符左侧的变量</td>
<td align="center">x *= y 等同于 x = x * y</td>
</tr>
<tr>
<td align="center">/=</td>
<td align="center">先进行除法运算，再将结果赋值给运算符左侧的变量</td>
<td align="center">x /= y 等同于 x = x / y</td>
</tr>
<tr>
<td align="center">%=</td>
<td align="center">先进行取模运算，再将结果赋值给运算符左侧的变量</td>
<td align="center">x %= y 等同于 x = x % y</td>
</tr>
</tbody></table>
<p>示例代码如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
x <span class="token operator">+=</span> <span class="token number">20</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：30</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span>
y <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
x <span class="token operator">-=</span> y<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：5</span>
x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
x <span class="token operator">*=</span> <span class="token number">25</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：125</span>
x <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：5</span>
x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
x <span class="token operator">%=</span> <span class="token number">15</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><p>JavaScript 中的+和+=运算符除了可以进行数学运算外，还可以用来拼接字符串，其中：</p>
<ul>
<li> +运算符表示将运算符左右两侧的字符串拼接到一起；</li>
<li> +=运算符表示先将字符串进行拼接，然后再将结果赋值给运算符左侧的变量。</li>
</ul>
<p>示例代码如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"Hello "</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">"World!"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：Hello World!</span>
x <span class="token operator">+=</span> y<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：Hello World!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="自增、自减运算符"><a href="#自增、自减运算符" class="headerlink" title="自增、自减运算符"></a>自增、自减运算符</h3><p>自增、自减运算符用来对变量的值进行自增（+1）、自减（-1）操作，下表中列举了 JavaScript 中支持的自增、自减运算符：</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">名称</th>
<th align="center">影响</th>
</tr>
</thead>
<tbody><tr>
<td align="center">++x</td>
<td align="center">自增运算符</td>
<td align="center">将 x 加 1，然后返回 x 的值</td>
</tr>
<tr>
<td align="center">x++</td>
<td align="center">自增运算符</td>
<td align="center">返回 x 的值，然后再将 x 加 1</td>
</tr>
<tr>
<td align="center">–x</td>
<td align="center">自减运算符</td>
<td align="center">将 x 减 1，然后返回 x 的值</td>
</tr>
<tr>
<td align="center">x–</td>
<td align="center">自减运算符</td>
<td align="center">返回 x 的值，然后将 x 减 1</td>
</tr>
</tbody></table>
<p>示例代码如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x<span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：11</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出：11</span>
x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出：11</span>
x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">--</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：9</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出：9</span>
x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出：9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>比较运算符用来比较运算符左右两侧的表达式，比较运算符的运算结果是一个布尔值，结果只有两种，不是 true 就是 false。</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">名称</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">==</td>
<td align="center">等于</td>
<td align="center">x == y 表示如果 x 等于 y，则为真</td>
</tr>
<tr>
<td align="center">===</td>
<td align="center">全等</td>
<td align="center">x === y 表示如果 x 等于 y，并且 x 和 y 的类型也相同，则为真</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="center">不相等</td>
<td align="center">x != y 表示如果 x 不等于 y，则为真</td>
</tr>
<tr>
<td align="center">!==</td>
<td align="center">不全等</td>
<td align="center">x !== y 表示如果 x 不等于 y，或者 x 和 y 的类型不同，则为真</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
<td align="center">x &lt; y 表示如果 x 小于 y，则为真</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
<td align="center">x &gt; y 表示如果 x 大于 y，则为真</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="center">大于或等于</td>
<td align="center">x &gt;= y 表示如果 x 大于或等于 y，则为真</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="center">小于或等于</td>
<td align="center">x &lt;= y 表示如果 x 小于或等于 y，则为真</td>
</tr>
</tbody></table>
<p>示例代码如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token string">"25"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">==</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出： true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">===</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出： false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出： true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">!==</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出： true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出： true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出： false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出： true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出： false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符通常用来组合多个表达式，逻辑运算符的运算结果是一个布尔值，只能有两种结果，不是 true 就是 false。</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">名称</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;&amp;</td>
<td align="center">逻辑与</td>
<td align="center">x &amp;&amp; y 表示如果 x 和 y 都为真，则为真</td>
</tr>
<tr>
<td align="center">II</td>
<td align="center">逻辑或</td>
<td align="center">x II y 表示如果 x 或 y 有一个为真，则为真</td>
</tr>
<tr>
<td align="center">!</td>
<td align="center">逻辑非</td>
<td align="center">!x 表示如果 x 不为真，则为真</td>
</tr>
</tbody></table>
<p>示例代码如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token number">2021</span><span class="token punctuation">;</span>
<span class="token comment">// 闰年可以被 400 整除，也可以被 4 整除，但不能被 100 整除</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">" 年是闰年。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">" 年是平年。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>三元运算符（也被称为条件运算符），由一个问号和一个冒号组成，语法格式如下</p>
<blockquote>
<p>   条件表达式 ? 表达式1 : 表达式2 ;<br>  如果“条件表达式”的结果为真（true），则执行“表达式1”中的代码，否则就执行“表达式2”中的代码。</p>
</blockquote>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span>
    y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
x <span class="token operator">&gt;</span> y <span class="token operator">?</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x 大于 y"</span><span class="token punctuation">)</span> <span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x 小于 y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：x 小于 y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>位运算符用来对二进制位进行操作，JavaScript 中支持的位运算符如下表</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">描述</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;</td>
<td align="center">按位与：如果对应的二进制位都为 1，则该二进制位为 1</td>
<td align="center">5 &amp; 1 等同于 0101 &amp; 0001 结果为 0001，十进制结果为 1</td>
</tr>
<tr>
<td align="center">I</td>
<td align="center">按位或：如果对应的二进制位有一个为 1，则该二进制位为 1</td>
<td align="center">5 I1 等同于 0101 I 0001 结果I为 0101，十进制结果为 5</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">按位异或：如果对应的二进制位只有一个为 1，则该二进制位为 1</td>
<td align="center">5 ^ 1 等同于 0101 ^ 0001 结果为 0100，十进制结果为 4</td>
</tr>
<tr>
<td align="center">~</td>
<td align="center">按位非：反转所有二进制位，即 1 转换为 0，0 转换为 1</td>
<td align="center">~5 等同于 ~0101 结果为 1010，十进制结果为 -6</td>
</tr>
<tr>
<td align="center">&lt;&lt;</td>
<td align="center">按位左移：将所有二进制位统一向左移动指定的位数，并在最右侧补 0</td>
<td align="center">5 &lt;&lt; 1 等同于 0101 &lt;&lt; 1 结果为 1010，十进制结果为 10</td>
</tr>
<tr>
<td align="center">&gt;&gt;</td>
<td align="center">按位右移（有符号右移）：将所有二进制位统一向右移动指定的位数，并拷贝最左侧的位来填充左侧</td>
<td align="center">5 &gt;&gt; 1 等同于 0101 &gt;&gt; 1 结果为 0010，十进制结果为 2</td>
</tr>
<tr>
<td align="center">&gt;&gt;&gt;</td>
<td align="center">按位右移零（无符号右移）：将所有二进制位统一向右移动指定的位数，并在最左侧补0</td>
<td align="center">5 &gt;&gt;&gt; 1 等同于 0101 &gt;&gt;&gt; 1 结果为 0010，十进制结果为 2</td>
</tr>
</tbody></table>
<p>示例代码如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">,</span>
    b <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token punctuation">,</span>
    c <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">,</span>
    d <span class="token operator">=</span> <span class="token operator">~</span> <span class="token number">5</span><span class="token punctuation">,</span>
    e <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>
    f <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span>
    g <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：4</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：-6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="JS运算符优先级"><a href="#JS运算符优先级" class="headerlink" title="JS运算符优先级"></a>JS运算符优先级</h3><p>JS 运算符的优先级和结合性规定了它们在复杂的表达式中的运算顺序。</p>
<p>运算符的执行顺序称为运算符的优先级，优先级高的运算符先于优先级低的运算符执行运算。</p>
<blockquote>
<p>w=x+y<em>z;<br>执行加法运算的+运算符的优先级低于</em>运算符，所以y*z将先被执行，乘法运算执行完后得到的结果再和 x 相加。</p>
</blockquote>
<p>运算符的优先级可以通过使用圆括号来改变，例如为了让加法先执行，乘法后执行，可以修改上面的表达式为：</p>
<blockquote>
<p>w=(x+y)*z;    </p>
</blockquote>
<h3 id="JS-运算符结合性"><a href="#JS-运算符结合性" class="headerlink" title="JS 运算符结合性"></a>JS 运算符结合性</h3><p>对于相同优先级的运算符的执行顺序，则由运算符的结合性来决定。运算符的结合性包括「从右至左」和「从左至右」两种：</p>
<ul>
<li> 从右至左的结合性指的是，运算的执行是按从右到左的顺序进行；</li>
<li> 从左至右的结合性刚好相反，运算符的执行顺序按照从左到右的顺序进行。</li>
</ul>
<h3 id="JS-运算符优先级和结合性一览表"><a href="#JS-运算符优先级和结合性一览表" class="headerlink" title="JS 运算符优先级和结合性一览表"></a>JS 运算符优先级和结合性一览表</h3><p>下表中按照优先级由高到低的顺序罗列了 JavaScript 中的所有运算符</p>
<table>
<thead>
<tr>
<th align="center">运算类型</th>
<th align="center">运算符</th>
<th align="center">关联性</th>
<th align="center">优先级</th>
</tr>
</thead>
<tbody><tr>
<td align="center">圆括号</td>
<td align="center">(…)</td>
<td align="center">n/a(不相关)</td>
<td align="center">20</td>
</tr>
<tr>
<td align="center">成员访问</td>
<td align="center">… . …</td>
<td align="center">从左到右</td>
<td align="center">19</td>
</tr>
<tr>
<td align="center">需计算的成员访问</td>
<td align="center">… [ … ]</td>
<td align="center">从左到右</td>
<td align="center">19</td>
</tr>
<tr>
<td align="center">new(带参数列表)</td>
<td align="center">new … ( … )</td>
<td align="center">n/a</td>
<td align="center">19</td>
</tr>
<tr>
<td align="center">可选链（Optional chaining）</td>
<td align="center">？.</td>
<td align="center">从左到右</td>
<td align="center">19</td>
</tr>
<tr>
<td align="center">new(无参数列表)</td>
<td align="center">new …</td>
<td align="center">从右到左</td>
<td align="center">18</td>
</tr>
<tr>
<td align="center">后置递增（运算符在后）</td>
<td align="center">… ++</td>
<td align="center">n/a</td>
<td align="center">17</td>
</tr>
<tr>
<td align="center">逻辑非</td>
<td align="center">！…</td>
<td align="center">从右到左</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">按位非</td>
<td align="center">~ …</td>
<td align="center">从右到左</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">一元加法</td>
<td align="center">+ …</td>
<td align="center">从右到左</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">一元减法</td>
<td align="center">- ….</td>
<td align="center">从右到左</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">前置递增</td>
<td align="center">++ …</td>
<td align="center">从右到左</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">前置递减</td>
<td align="center">– …</td>
<td align="center">从右到左</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">typeof</td>
<td align="center">typeof …</td>
<td align="center">从右到左</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">void</td>
<td align="center">void …</td>
<td align="center">从右到左</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">delete</td>
<td align="center">delete …</td>
<td align="center">从右到左</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">await</td>
<td align="center">await …</td>
<td align="center">从右到左</td>
<td align="center">16</td>
</tr>
<tr>
<td align="center">幂</td>
<td align="center">… ** …</td>
<td align="center">从右到左</td>
<td align="center">15</td>
</tr>
<tr>
<td align="center">乘法</td>
<td align="center">… * …</td>
<td align="center">从左到右</td>
<td align="center">14</td>
</tr>
<tr>
<td align="center">除法</td>
<td align="center">… / …</td>
<td align="center">从左到右</td>
<td align="center">14</td>
</tr>
<tr>
<td align="center">取模</td>
<td align="center">… % …</td>
<td align="center">从左到右</td>
<td align="center">14</td>
</tr>
<tr>
<td align="center">加法</td>
<td align="center">… + …</td>
<td align="center">从左到右</td>
<td align="center">13</td>
</tr>
<tr>
<td align="center">减法</td>
<td align="center">… - …</td>
<td align="center">从左到右</td>
<td align="center">13</td>
</tr>
<tr>
<td align="center">按位左移</td>
<td align="center">… &lt;&lt; …</td>
<td align="center">从左到右</td>
<td align="center">12</td>
</tr>
<tr>
<td align="center">按位右移</td>
<td align="center">… &gt;&gt; …</td>
<td align="center">从左到右</td>
<td align="center">12</td>
</tr>
<tr>
<td align="center">无符号右移</td>
<td align="center">… &gt;&gt;&gt; …</td>
<td align="center">从左到右</td>
<td align="center">12</td>
</tr>
<tr>
<td align="center">小于</td>
<td align="center">… &lt; …</td>
<td align="center">从左到右</td>
<td align="center">11</td>
</tr>
<tr>
<td align="center">小于等于</td>
<td align="center">… &lt;= …</td>
<td align="center">从左到右</td>
<td align="center">11</td>
</tr>
<tr>
<td align="center">大于</td>
<td align="center">… &gt; …</td>
<td align="center">从左到右</td>
<td align="center">11</td>
</tr>
<tr>
<td align="center">大于等于</td>
<td align="center">… &gt;= …</td>
<td align="center">从左到右</td>
<td align="center">11</td>
</tr>
<tr>
<td align="center">in</td>
<td align="center">… in …</td>
<td align="center">从左到右</td>
<td align="center">11</td>
</tr>
<tr>
<td align="center">instanceof</td>
<td align="center">… instanceof …</td>
<td align="center">从左到右</td>
<td align="center">11</td>
</tr>
<tr>
<td align="center">等号</td>
<td align="center">… == …</td>
<td align="center">从左到右</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">非等号</td>
<td align="center">… ！= …</td>
<td align="center">从左到右</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">全等号</td>
<td align="center">… === …</td>
<td align="center">从左到右</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">非全等号</td>
<td align="center">… ！=== …</td>
<td align="center">从左到右</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">按位与</td>
<td align="center">… &amp; …</td>
<td align="center">从左到右</td>
<td align="center">9</td>
</tr>
<tr>
<td align="center">按位异或</td>
<td align="center">… ^ …</td>
<td align="center">从左到右</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">按位或</td>
<td align="center">… | …</td>
<td align="center">从左到右</td>
<td align="center">7</td>
</tr>
<tr>
<td align="center">逻辑与</td>
<td align="center">… &amp;&amp; …</td>
<td align="center">从左到右</td>
<td align="center">6</td>
</tr>
<tr>
<td align="center">逻辑或</td>
<td align="center">… || …</td>
<td align="center">从左到右</td>
<td align="center">5</td>
</tr>
<tr>
<td align="center">条件运算符</td>
<td align="center">… ? … : …</td>
<td align="center">从右到左</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">赋值</td>
<td align="center">… = … <br> … += … <br> … -= … <br> … *= … <br> … /= … <br> … %= … <br> … &lt;&lt;= … <br> … &gt;&gt;= … <br> … &gt;&gt;&gt;= … <br> … &amp;= … <br> … ^= … <br> … |= …</td>
<td align="center">从右到左</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">yield</td>
<td align="center">yield …</td>
<td align="center">从右到左</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">yield*</td>
<td align="center">yield* …</td>
<td align="center">从右到左</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">展开运算符</td>
<td align="center">… …</td>
<td align="center">n/a</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">逗号</td>
<td align="center">… , …</td>
<td align="center">从左到右</td>
<td align="center">0</td>
</tr>
</tbody></table>
<h1 id="读后有收获可以请作者喝咖啡"><a href="#读后有收获可以请作者喝咖啡" class="headerlink" title="读后有收获可以请作者喝咖啡"></a>读后有收获可以请作者喝咖啡</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JS运算符</tag>
      </tags>
  </entry>
</search>
