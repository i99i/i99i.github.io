{"meta":{"title":"屵的博客","subtitle":"屵","description":"专注创新 分享互联网精神","author":"i996的肥仔","url":"https://屵.com","root":"/"},"pages":[{"title":"404","date":"2022-03-27T10:02:17.000Z","updated":"2022-03-27T11:02:07.760Z","comments":true,"path":"404/index.html","permalink":"https://屵.com/404/index.html","excerpt":"","text":""},{"title":"about","date":"2022-03-27T09:54:28.000Z","updated":"2022-03-27T09:55:10.764Z","comments":true,"path":"about/index.html","permalink":"https://屵.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-03-27T09:28:06.000Z","updated":"2022-03-27T09:52:54.548Z","comments":true,"path":"categories/index.html","permalink":"https://屵.com/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2022-03-27T09:55:25.000Z","updated":"2022-03-27T09:55:55.955Z","comments":true,"path":"contact/index.html","permalink":"https://屵.com/contact/index.html","excerpt":"","text":""},{"title":"friends","date":"2022-03-27T09:58:07.000Z","updated":"2022-03-27T09:58:41.731Z","comments":true,"path":"friends/index.html","permalink":"https://屵.com/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-03-27T09:53:31.000Z","updated":"2022-03-27T09:54:12.123Z","comments":true,"path":"tags/index.html","permalink":"https://屵.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"js_method","slug":"js-method","date":"2022-03-30T01:49:36.000Z","updated":"2022-03-30T03:46:14.113Z","comments":true,"path":"archives/379d8b7a.html","link":"","permalink":"https://屵.com/archives/379d8b7a.html","excerpt":"","text":"JS方法共包含: JS输出语句、JS if else语句、JS switch case语句、JS while循环语句、JS do while循环语句、JS for循环语句、JS for in循环语句、JS for of循环语句、JS break和continue语句、JS输出杨辉三角（作业带解析） JS输出语句 需要将程序的运行结果输出到浏览器中，JavaScript 中为我们提供了多种不同的输出语句来向浏览器中输出内容： 使用 alert() 函数来弹出提示框； 使用 confirm() 函数来弹出一个对话框； 使用 document.write() 方法将内容写入到 HTML 文档中； 使用 innerHTML 将内容写入到 HTML 标签中； 使用 console.log() 在浏览器的控制台输出内容。 alert() 函数使用 JS alert() 函数可以在浏览器中弹出一个提示框，在提示框中我们可以定义要输出的内容 alert(message); 其中 message 为要在提示框中输出的内容，需要注意的是，alert() 中只能输出文本内容。 alert() 函数是 window 对象下的一个函数，所以有时为了代码更严谨，我们也可以使用 window.alert() 的形式来调用 alert() 函数 window.alert(\"Jinghai\") confirm() 函数JS confirm() 函数与 alert() 函数相似，它们都是 window 对象下的函数，同样可以在浏览器窗口弹出一个提示框，不同的是，使用 confirm() 函数创建的提示框中，除了包含一个“确定”按钮外，还有一个“取消”按钮。如果点击“确定”按钮，那么 confirm() 函数会返回一个布尔值 true，如果点击“取消”按钮，那么 confirm() 函数会返回一个布尔值 false。 window.confirm(\"Jinghai\") //点击确定返回true console.log()使用 JS console.log() 可以在浏览器的控制台输出信息，通常使用 console.log() 来调试程序，其语法格式如下： console.log(message); 其中 message 为要输出的内容，可以是字符串或者对象类型。与 window.alert() 和 window.confirm() 可以分别简写成 alert() 和 confirm() 不同，console.log() 不能简写 要看到 console.log() 的输出内容需要先打开浏览器的控制台。以 Edge浏览器为例，要打开控制台您只需要在浏览器窗口按 F12 快捷键 document.write()使用 JS document.write() 可以向 HTML 文档中写入 HTML 或者 JavaScript 代码，语法格式如下： document.write(exp1, exp2, exp3, ...); 其中 exp1、exp2、exp3 为要向文档中写入的内容，document.write() 可以接收多个参数，即我们可以一次向文档中写入多个内容，内容之间使用逗号进行分隔。 document.write(Date()) \\\\ Mon Mar 21 2022 15:40:34 GMT+0800 (中国标准时间) innerHTML与前面介绍的几个函数不同，innerHTML 是一个属性而不是一个函数，通过它可以设置或者获取指定 HTML 标签中的内容 &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;JavaScript&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"demo\"&gt;JavaScript 输出&lt;/div&gt; &lt;script type=\"text/javascript\"&gt; var demo = document.getElementById(\"demo\"); console.log(demo.innerHTML); demo.innerHTML = \"&lt;h2&gt;innerHTML&lt;/h2&gt;\" &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 运行结果如下图所示： JS if else语句：条件判断语句 条件判断语句是程序开发过程中一种经常使用的语句形式，和大部分编程语言相同，JavaScript中也有条件判断语句。所谓条件判断，指的是程序根据不同的条件来执行不同的操作，例如根据年龄来显示不同的内容，根据布尔值 true 或 false 来判断操作是成功还是失败等。 JavaScript 中支持以下几种不同形式的条件判断语句： if 语句； if else 语句； if else if else 语句； switc case 语句。 if 语句if 语句是 JavaScript 中最简单的条件判断语句，语法格式如下： if(条件表达式){ // 要执行的代码; } 当条件表达式成立，即结果为布尔值 true 时，就会执行{ }中的代码。 var age = 20; if(age &gt;= 18){ // 如果 age &gt;= 18 的结果为 true，则执行下面 { } 中的代码 console.log(\"Jinghai\"); } //执行结果是Jinghai if else 语句if else 语句是 if 语句的升级版，它不仅可以指定当表达式成立时要执行的代码，还可以指定当表达式不成立时要执行的代码，语法格式如下： if(条件表达式){ // 当表达式成立时要执行的代码 }else{ // 当表达式不成立时要执行的代码 } 示例代码如下： var now = new Date(); // 获取当前的完整日期 var dayOfWeek = now.getDay(); // 获取一个 0-6 之间的数字，用来表示当前是星期几，0 表示星期日、1 表示星期一、以此类推 if (dayOfWeek &gt; 0 &amp;&amp; dayOfWeek &lt; 6) { // 判断：如果当前是星期一到星期五中的一天，则输出“Have a nice day!”，若不是则输出“Have a nice weekend!” alert(\"Have a nice day!\"); } else { alert(\"Have a nice weekend!\"); } if else if else 语句if 和 if else 语句都只有一个条件表达式，而 if else if else 语句是它们更高级的形式，在 if else if else 语句中允许您定义多个条件表达式，并根据表达式的结果执行相应的代码，语法格式如下： if (条件表达式 1) { // 条件表达式 1 为真时执行的代码 } else if (条件表达式 2) { // 条件表达式 2 为真时执行的代码 } ... else if (条件表达式N) { // 条件表达式 N 为真时执行的代码 } else { // 所有条件表达式都为假时要执行的代码 } 提示：if else if else 语句在执行过程中，当遇到成立的条件表达式时，会立即执行其后{ }中的代码，然后退出整个 if else if else 语句，若后续代码中还有成立的条件表达式，则不会执行。 示例代码如下： var now = new Date(); // 获取当前的完整日期 var dayOfWeek = now.getDay(); // 获取一个 0-6 之间的数字，用来表示当前是星期几，0 表示星期日、1 表示星期一、以此类推 if(dayOfWeek == 0) { // 判断当前是星期几 alert(\"星期日\") } else if(dayOfWeek == 1) { alert(\"星期一\") } else if(dayOfWeek == 2) { alert(\"星期二\") } else if(dayOfWeek == 3) { alert(\"星期三\") } else if(dayOfWeek == 4) { alert(\"星期四\") } else if(dayOfWeek == 5) { alert(\"星期五\") } else { alert(\"星期六\") } 注意事项使用嵌套 if else 时，如果只有一行语句，也应该使用大括号包裹起来，避免条件歧义 下面嵌套 if else 就容易引发误解： if(0) if(1) console.log(1); else console.log(0); 因此使用大括号可以避免很多问题： if(0){ if(1) console.log(1); }else{ console.log(0); } JS switch case语句 JS switch case 语句与 if else 语句的多分支结构类似，都可以根据不同的条件来执行不同的代码；但是与 if else 多分支结构相比，switch case 语句更加简洁和紧凑，执行效率更高。 switch (表达式){ case value1: statements1 // 当表达式的结果等于 value1 时，则执行该代码 break; case value2: statements2 // 当表达式的结果等于 value2 时，则执行该代码 break; ...... case valueN: statementsN // 当表达式的结果等于 valueN 时，则执行该代码 break; default : statements // 如果没有与表达式相同的值，则执行该代码 } switch 语句根据表达式的值，依次与 case 子句中的值进行比较： 如果两者相等，则执行其后的语句段，当遇到 break 关键字时则跳出整个 switch 语句。 如果不相等，则继续匹配下一个 case。 switch 语句包含一个可选的 default 关键字，如果在前面的 case 中没有找到相等的条件，则执行 default 后面的语句段。 注意：switch 语句中，表达式是使用全等（===）来与各个 cese 子句中的值进行匹配的。由于使用的是全等运算符，因此不会自动转换每个值的类型。 break 关键字switch 语句是逐行执行的，当 switch 语句找到一个与之匹配的 case 子句时，不仅会执行该子句对应的代码，还会继续向后执行，直至 switch 语句结束。为了防止这种情况产生，需要在每个 case 子句的末尾使用 break 来跳出 switch 语句。 break 除了可以用来跳出 switch 语句外，还可以用来跳出循环语句（for、for in、while、do while 等） //示例使用 switch case 语句设计网站登录会员管理模块 var id = 1; switch (id) { case 1 : console.log(\"普通会员\"); break; //停止执行，跳出switch case 2 : console.log(\"VIP会员\"); break; //停止执行，跳出switch case 3 : console.log(\"管理员\"); break; //停止执行，跳出switch default : //上述条件都不满足时，默认执行的代码 console.log(\"游客\"); } case 子句case 子句可以省略语句，这样当匹配时，不管下一个 case 条件是否满足，都会继续执行下一个 case 子句的语句。 //示例演示了把普通会员和 VIP 会员合并在一起进行检测 var id = 1; switch (id) { case 1 : case 2 : console.log(\"VIP会员\"); break; case 3 : console.log(\"管理员\"); break; default : console.log(\"游客\"); 在 switch 语句中，case 子句只是指明了执行起点，但是没有指明执行的终点，如果在 case 子句中没有 break 语句，就会发生连续执行的情况，从而忽略后面 case 子句的条件限制，这样就容易破坏 switch 结构的逻辑。 如果在函数中使用 switch 语句，可以使用 return 语句终止 switch 语句，防止代码继续执行。 default语句default 是 switch 子句，可以位于 switch 内任意位置，不会影响多重分支耳朵正常执行。下面结合示例介绍使用 default 语句应该注意 3 个问题。 //如果 default 下面还有 case 子句，应该在 default 后面添加 break 语句，终止 switch 结构，防止程序突破 case 条件的限制继续执行下面 case 子句 var id = 1; switch (id) { default : console.log(\"游客\"); break; case 1 : console.log(\"普通会员\"); break; case 2 : console.log(\"VIP会员\"); break； case 3 : console.log(\"管理员\"); break; } 在下面代码中，JavaScript 先检测 case 表达式的值，由于 case 表达式的值都不匹配，则跳转到 default 子句执行，然后继续执行 case 1 和 case 2 子句。但是，最后不会返回 default 子句再重复执行。 var id = 3; switch (id) { default : console.log(\"游客\"); case 1 : console.log(\"普通会员\"); case 2 : console.log(\"VIP会员\"); } 下面示例使用 switch 语句设计一个四则运算函数。在 switch 结构内，先使用 case 枚举 4 种可预知的算术运算，当然还可以继续扩展 case 子句，枚举所有可能的操作，但是无法枚举所有不测，因此最后使用 default 处理意外情况。 function oper (a,b,opr) { switch (opr) { case \"+\" : //正常枚举 return a + b; case \"-\" : //正常枚举 return a - b; case \"*\" : //正常枚举 return a * b; case \"/\" : //正常枚举 return a / b; default : //异常处理 return \"非预期的 opr 值\"; } } console.log(oper (2,5,\"*\")); //返回10 default 语句与 case 语句简单比较如下： 语义不同：default 为默认项，case 为判例。 功能扩展：default 选项是唯一的，不可以扩展。而 case 选项是可扩展的，没有限制。 异常处理：default 与 case 扮演的角色不同，case 用于枚举，default 用于异常处理。 JS while 循环语法 循环的目的就是为了反复执某段代码，使用循环可以减轻编程压力，避免代码冗余，提高开发效率，方便后期维护。while 循环是 JavaScript 中提供的最简单的循环语句，本节我们就来简单介绍一下 while 循环的使用。 while (条件表达式) { // 要执行的代码 } while 循环在每次循环之前，会先对条件表达式进行求值，如果条件表达式的结果为 true，则执行{ }中的代码，如果条件表达式的结果为 false，则退出 while 循环，执行 while 循环之后的代码。 //使用 while 循环计算 1~100 之间所有整数的和 var i = 1; while( i &lt;= 5) { document.write(i+\", \"); i++; } 运行结果：1, 2, 3, 4, 5, 注意事项在编写循环语句时，一定要确保条件表达式的结果能够为假（即布尔值 false），因为只要表达式的结果为 true，循环会一直持续下去，不会自动停止，对于这种无法自动停止的循环，我们通常将其称为“无限循环”或“死循环”。 JS while 循环示例var i=1; var sum=0; while (i &lt;= 100){ sum += i; i++; } document.write(\"1 + 2 + 3 + ... + 98 + 99 + 100 = \" + sum) 运行结果：1 + 2 + 3 + … + 98 + 99 + 100 = 5050 //找出 1900 年到 2022 年之间所有的闰年，并以每行 6 个进行输出 var i = 1900; var count = 0; //计数闰年的个数 while (i &lt;= 2022) { //判断是否是闰年 if (i % 4 == 0 &amp;&amp; i % 100 != 0 || i % 400 == 0) { document.write(i + \"&amp;nbsp;&amp;nbsp;\"); count++; if (count % 6 == 0) { document.write(\"&lt;br/&gt;\"); } } i++; } 运行结果：1904 1908 1912 1916 1920 19241928 1932 1936 1940 1944 19481952 1956 1960 1964 1968 19721976 1980 1984 1988 1992 19962000 2004 2008 2012 2016 2020 JS do while循环语句 JS do while 循环与 while 循环非常相似，不同之处在于，do while 循环会先执行循环中的代码，然后再对条件表达式进行判断。因此，无论条件表达式是真还是假，do while 循环都能至少执行一次，而 while 循环就不行了，如果条件表达式为假会直接退出 while 循环。 JS do while 循环语法do { // 需要执行的代码 } while (条件表达式); 提示：do while 循环与 while 循环还有一点不同，那就是 do while 循环的末尾需要使用分号;进行结尾，而 while 循环则不需要。示例代码如下： var i = 1; do{ document.write(i + \" \"); i++; }while (i &gt; 5); JS do while 循环示例使用 do while 循环计算 1~100 之间所有整数的和 &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;JavaScript&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; var i=1; var sum=0; do { sum+=i; i++ }while (i&lt;=100); document.write('1+2+3+4+·····+100='+sum) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 运行结果是： 1+2+3+4+·····+100=5050 JS for循环语句 JS for 循环语法JS for 循环适合在已知循环次数时使用 for(initialization; condition; increment) { // 要执行的代码 } for 循环中包含三个可选的表达式 initialization、condition 和 increment，其中： initialization：为一个表达式或者变量声明，我们通常将该步骤称为“初始化计数器变量”，在循环过程中只会执行一次； condition：为一个条件表达式，与 while 循环中的条件表达式功能相同，通常用来与计数器的值进行比较，以确定是否进行循环，通过该表达式可以设置循环的次数； increment：为一个表达式，用来在每次循环结束后更新（递增或递减）计数器的值。for (var i = 1; i &lt;= 10; i++) { document.write(i + \" \"); } 1 2 3 4 5 6 7 8 9 10 使用 for 循环遍历数组中的内容 var fruits = [\"Apple\", \"Banana\", \"Mango\", \"Orange\", \"Papaya\"]; for(var i = 0; i &lt; fruits.length; i++) { document.write(fruits[i] + \"&amp;emsp;\"); } 运行结果：Apple Banana Mango Orange Papaya JS for 循环中的三个表达式JS for 循环中括号中的三个表达式是可以省略的，但是用于分隔三个表达式的分号不能省略，如下例所示： // 省略第一个表达式 var i = 0; for (; i &lt; 5; i++) { // 要执行的代码 } // 省略第二个表达式 for (var y = 0; ; y++) { if(y &gt; 5){ break; } // 要执行的代码 } // 省略第一个和第三个表达式 var j = 0; for (; j &lt; 5;) { // 要执行的代码 j++; } // 省略所有表达式 var z = 0; for (;;) { if(z &gt; 5){ break; } // 要执行的代码 z++; } JS for 循环嵌套无论是哪种循环，都可以嵌套使用（即在一个循环中再定义一个或多个循环），下面就以 for 循环为例，来演示一下循环的嵌套使用： for (var i = 1; i &lt;= 9; i++) { for (var j = 1; j &lt;= i; j++) { document.write(j + \" x \" + i + \" = \" + (i * j) + \"&amp;emsp;\"); } document.write(\"&lt;br&gt;\"); } 1 x 1 = 1 1 x 2 = 2 2 x 2 = 4 1 x 3 = 3 2 x 3 = 6 3 x 3 = 9 1 x 4 = 4 2 x 4 = 8 3 x 4 = 12 4 x 4 = 16 1 x 5 = 5 2 x 5 = 10 3 x 5 = 15 4 x 5 = 20 5 x 5 = 25 1 x 6 = 6 2 x 6 = 12 3 x 6 = 18 4 x 6 = 24 5 x 6 = 30 6 x 6 = 36 1 x 7 = 7 2 x 7 = 14 3 x 7 = 21 4 x 7 = 28 5 x 7 = 35 6 x 7 = 42 7 x 7 = 49 1 x 8 = 8 2 x 8 = 16 3 x 8 = 24 4 x 8 = 32 5 x 8 = 40 6 x 8 = 48 7 x 8 = 56 8 x 8 = 64 1 x 9 = 9 2 x 9 = 18 3 x 9 = 27 4 x 9 = 36 5 x 9 = 45 6 x 9 = 54 7 x 9 = 63 8 x 9 = 72 9 x 9 = 81 JS for in循环语句JS for in 循环是一种特殊类型的循环，也是普通 for 循环的变体，主要用来遍历对象，使用它可以将对象中的属性依次循环出来，其语法格式如下： for (variable in object) { // 要执行的代码 } 其中，variable 为一个变量，每次循环时这个变量都会被赋予不同的值，我们可以在{ }中使用这个变量来进行一系列操作；object 为要遍历的对象，在每次循环中，会将 object 对象中的一个属性的键赋值给变量 variable，直到对象中的所有属性都遍历完 // 定义一个对象 var person = {\"name\": \"Clark\", \"surname\": \"Kent\", \"age\": \"36\"}; // 遍历对象中的所有属性 for(var prop in person) { document.write(\"&lt;p&gt;\" + prop + \" = \" + person[prop] + \"&lt;/p&gt;\"); } JS for of循环语句JS for of 循环是 ECMAScript6 中新添加的一个循环方式，与 for in 循环类似，也是普通 for 循环的一种变体。使用 for of 循环可以轻松的遍历数组或者其它可遍历的对象，例如字符串、对象等。 JS for of 循环的语法格式如下： for (variable of iterable) { // 要执行的代码 } 其中，variable 为一个变量，每次循环时这个变量都会被赋予不同的值，我们可以在后面的{ }中使用这个变量来进行一系列操作；iterable 为要遍历的内容，在每次循环中，会将 iterable 中的一个值赋值给变量 variable，直到 iterable 中的所有值都遍历完 // 定义一个数组 var arr = ['a', 'b', 'c', 'd', 'e', 'f']; // 使用 for of 循环遍历数组中的每个元素 for (var value of arr) { document.write(value + \", \"); } document.write(\"&lt;br&gt;\"); // 定义一个字符串 var str = \"Hello World!\"; // 使用 for of 循环遍历字符串中的每个字符 for (var value of str) { document.write(value + \", \"); } document.write(\"&lt;br&gt;\"); // 定义一个对象 var obj = {\"name\": \"Clark\", \"surname\": \"Kent\", \"age\": \"36\"}; // 使用 for of 循环遍历对象中的所有属性 for(var value in obj) { document.write(value + \", \"); } 运行结果：a, b, c, d, e, f,H, e, l, l, o, , W, o, r, l, d, !,name, surname, age, 注意，虽然 for of 循环也可以遍历对象，但并不推荐，若要遍历对象可以使用 for in 循环。 JavaScript跳出循环JS break 语句for (var i = 0; i &lt; 10; i++) { if(i == 5) { break; } document.write(\"i = \" + i + \"&lt;br&gt;\"); } document.write(\"循环之外的代码\"); 运行结果：i = 0i = 1i = 2i = 3i = 4循环之外的代码 JS continue 语句continue 语句用来跳过本次循环，执行下次循环。当遇到 continue 语句时，程序会立即重新检测条件表达式，如果表达式结果为真则开始下次循环，如果表达式结果为假则退出循环。 break 语句用来跳出整个循环，执行循环后面的代码；continue 语句用来跳过当次循环，继续执行下次循环。 for (var i = 0; i &lt; 10; i++) { if(i % 2 == 0) { continue; } document.write(i + \"&amp;nbsp;\"); } 运行结果：1 3 5 7 9 JavaScript 标签JavaScript 中的标签与 HTML 中的标签不同，JavaScript 中的标签就是一个标识符（类似变量名），后面跟随一个冒号:。JavaScript 标签可以声明在任何语句或者代码块之前，并与 break 或 continue 配合来跳出特定的循环，例如当多个循环嵌套使用时，单纯使用 break 只能跳出当前的循环，无法跳出外层循环，如果将 break 与标签配合使用，则可以一次跳出多层循环。 document.write(\"开始循环!&lt;br /&gt; \"); outerloop: // 定义一个标签 for (var i = 0; i &lt; 5; i++) { document.write(\"外层循环: \" + i + \"&lt;br /&gt;\"); innerloop: // 定义一个标签 for (var j = 0; j &lt; 5; j++) { if (j &gt; 3 ) break ; // 跳出内层循环 if (i == 2) break innerloop; // 跳出内层讯息 if (i == 4) break outerloop; // 跳出外层循环 document.write(\"内层循环: \" + j + \" &lt;br /&gt;\"); } } document.write(\"循环结束!&lt;br /&gt; \"); 运行结果： 开始循环! 外层循环: 0 内层循环: 0 内层循环: 1 内层循环: 2 内层循环: 3 外层循环: 1 内层循环: 0 内层循环: 1 内层循环: 2 内层循环: 3 外层循环: 2 外层循环: 3 内层循环: 0 内层循环: 1 内层循环: 2 内层循环: 3 外层循环: 4 循环结束! JS输出杨辉三角杨辉三角是一个经典的编程案例，它揭示了多次放二项式展开后各项系数的分布规律。简单描述，就是每行开头和结尾的数字为 1，出第一行外，每个数都等于它上方两数之和，如图所示。设计思路定义两个数组，数组 1 为上一行数字列表，为已知数组；数组 2 为下一行数字列表，为待求数组。假设上一行数组为 [1,1]，即第二行数字。那么，下一行数组的元素值就等于上一行相邻两个数字的和，即为 2，然后数组两端的值为 1，这样就可以求出下一行数组，即第三行数字列表。求第四行数组的值，可以把已计算出的第三数组作为上一行数组，而第四行数字为待求的下一行数组，以此类推 使用嵌套for 循环结构，外层循环遍历高次方的幂数（即行数），内层循环遍历每次方的项数（即列数）。具体 JS 代码如下： function print(v){ if (typeof v == \"number\") { var w = 30; if(n&gt;30) w = (n-30) + 40; var s = '&lt;span style=\"padding:4px 2px;display:inline-block;text-align:center;width:' + w + 'px;\"&gt;'+v+'&lt;/span&gt;'; document.write(s); }else{ document.write(v); } } var n = prompt(\"请输入幂数：\",9); n = n - 0; var t1 = new Date(); var a1 = [1,1]; var a2 = [1,1]; print('&lt;div style=text-align:center;\"&gt;'); for (var i = 0;i &lt;=n;i++){ for (var j = 1; j &lt; i + 2; j++) { print(c(i,j)); } print(\"&lt;br /&gt;\"); } print(\"&lt;/div&gt;\"); var t2 = new Date(); print(\"&lt;p style='text-align:center;'&gt;耗时为（毫秒）：\"+(t2-t1)+\"&lt;/p&gt;\"); function c(x,y){ if ((y == 1) || (y == x + 1)) return 1; return c(x-1,y-1) + c(x-1,y); } 输入4 读后有收获可以请作者喝咖啡","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[]},{"title":"思维导图","slug":"思维导图","date":"2022-03-30T01:03:47.000Z","updated":"2022-03-30T01:25:12.456Z","comments":true,"path":"archives/6c27b784.html","link":"","permalink":"https://屵.com/archives/6c27b784.html","excerpt":"","text":"使用方法 首先进入到 Hexo 博客的根目录，执行 npm install hexo-simple-mindmap 安装插件 写新文章时，在需要脑图的地方，按以下格式添加内容。插件会自动将 pullquote 中包裹的内容按照层级顺序渲染成脑图 {% pullquote mindmap mindmap-md %} - [Hexo 的思维导图插件](https://屵.com/archives/6c27b784.html) - 前言 - 使用方法 - 一 - 二 - 三 - 太长不看 - 参考资料 {% endpullquote %} 运行结果如下 Hexo 的思维导图插件 前言 使用方法 一 二 三 太长不看 参考资料 读后有收获可以请作者喝咖啡","categories":[{"name":"markdown","slug":"markdown","permalink":"https://屵.com/categories/markdown/"}],"tags":[{"name":"思维导图","slug":"思维导图","permalink":"https://屵.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"}]},{"title":"Markdown使用详解","slug":"Markdown使用详解","date":"2022-03-29T09:06:06.000Z","updated":"2022-03-30T01:25:09.543Z","comments":true,"path":"archives/f2108d0a.html","link":"","permalink":"https://屵.com/archives/f2108d0a.html","excerpt":"","text":"创建文章在站点文件夹中打开 git bash，输入如下命令创建文章，其中 title 为文章的标题 $ hexo new “title” 当输入命令后，就会在 source/_post 文件夹下创建一个文件，命名为：title.md 这个文件就是将要发布到网站上的原始文件，用于记录文章内容 编写文章（基于 Markdown）Markdown 简介 Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式 在编写 Markdown 时，博主强烈的推荐给大家一款简洁易用的 Markdown 编辑器 —— Typora Typora使用说明标题Typora 快捷键 Ctrl+1：一级标题 Ctrl+2：二级标题 Ctrl+3：三级标题 Ctrl+4：四级标题 Ctrl+5：五级标题 Ctrl+6 ：六级标题 Ctrl+0：段落 粗体、斜体、删除线和下划线Typora 快捷键 Ctrl+I：斜体 Ctrl+B：粗体 Ctrl+U：下划线 Alt+Shift+5：删除线 引用块Typora 快捷键： Ctrl+Shift+Q 代码块Typora 快捷键： 行内代码：Ctrl+Shift+` 多行代码：Ctrl+Shift+K 公式块Typora 快捷键： Ctrl+Shift+M 分割线 方法一：— 方法二：+++ 方法三：*** 列表Typora 快捷键： 有序列表项：Ctrl+Shift+[ 无序列表项：Ctrl+Shift+] 表格Typora 快捷键： Ctrl+T 超链接Typora快捷键： Ctrl+K 图片 Typora快捷键： Ctrl+Shift+I 说明：在 Hexo中 插入图片时，请按照以下的步骤进行设置 将站点配置文件 中的 post_asset_folder 选项的值设置为 true 在站点文件夹中打开 git bash，输入命令 npm install hexo-asset-image –save 安装插件 这样，当使用 hexo new title 创建文章时，将同时在 source/_post 文件夹中生成一个与 title 同名的文件夹，我们只需将图片放进此文件夹中，然后在文章中通过 Markdown 语法进行引用即可 例如，在资源文件夹（就是那个与 title 同名的文件夹）中添加图片 example.PNG，则可以在对应的文章中使用语句![示例图片](title/example.PNG “示例图片”) 添加图片 base64编码 再图片中引用![示例图片][good] 文档最后添加/[good]:data::image/png;base64,iVB—- 高级设置模板设置当我们使用命令 hexo new \"title\" 创建文章时，Hexo 会根据 /scaffolds/post.md 对新文章进行初始化 换言之，/scaffolds/post.md 就是新文章的 模板，所以我们可以修改它来适应自己的写作习惯 示例如下 title: {{ title }} date: {{ date }} tags: categories: 头部设置在每篇利用 Hexo 创建的文章的开头，都会有对文章进行说明的文字，叫做 文章头部 文章的头部除了可以设置文章标题、发布日期等基础信息外，还可以为文章添加标签、分类等 一个简单的示例如下 title: Title date: YYYY-MM-DD HH:MM:SS tags: [tag1, tag2, ...] categories: category 注意：属性和属性值之间必须有一个空格，否则会解析错误 首页显示在利用 Hexo 框架搭建的博客网站中，首页会显示文章的内容，且默认显示文章的全部内容 如果当文章太长的时候就会显得十分冗余，所以我们有必要对其进行精简 这时，我们只需在文章中使用 &lt;!--more--&gt; 标志即可，表示只会显示标志前面的内容 部署发布在站点文件夹中打开 git bash，输入如下命令部署和发布文章 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 建议：在使用 hexo g 部署之后，可以先使用 hexo s 运行本地站点，然后在浏览器输入地址 http://lacolhost:4000/ 查看运行结果，检查无误后再使用 hexo d 发布 读后有收获可以请作者喝咖啡","categories":[{"name":"markdown","slug":"markdown","permalink":"https://屵.com/categories/markdown/"}],"tags":[{"name":"Typora","slug":"Typora","permalink":"https://屵.com/tags/Typora/"}]},{"title":"JS运算符","slug":"JS运算符","date":"2022-03-28T07:35:28.000Z","updated":"2022-03-29T08:56:09.954Z","comments":true,"path":"archives/19d8bcc5.html","link":"","permalink":"https://屵.com/archives/19d8bcc5.html","excerpt":"","text":"JS运算符（优先级及结合性）算术运算符 算数运算符用来执行常见的数学运算，例如加法、减法、乘法、除法等，下表中列举了 JavaScript 中支持的算术运算符： 运算符 描述 示例 + 加法运算符 x + y 表示计算 x 加 y 的和 - 减法运算符 x - y 表示计算 x 减 y 的差 * 乘法运算符 x * y 表示计算 x 乘 y 的积 / 除法运算符 x / y 表示计算 x 除以 y 的商 % 取模（取余）运算符 x % y 表示计算 x 除以 y 的余数 示例代码如下： var x = 10, y = 4; console.log(\"x + y =\", x + y); // 输出：x + y = 14 console.log(\"x - y =\", x - y); // 输出：x - y = 6 console.log(\"x * y =\", x * y); // 输出：x * y = 40 console.log(\"x / y =\", x / y); // 输出：x / y = 2.5 console.log(\"x % y =\", x % y); // 输出：x % y = 2 赋值运算符赋值运算符用来为变量赋值，下表中列举了 JavaScript 中支持的赋值运算符： 运算符 描述 示例 = 最简单的赋值运算符，将运算符右侧的值赋值给运算符左侧的变量 x = 10 表示将变量 x 赋值为 10 += 先进行加法运算，再将结果赋值给运算符左侧的变量 x += y 等同于 x = x + y -= 先进行减法运算，再将结果赋值给运算符左侧的变量 x -= y 等同于 x = x - y *= 先进行乘法运算，再将结果赋值给运算符左侧的变量 x *= y 等同于 x = x * y /= 先进行除法运算，再将结果赋值给运算符左侧的变量 x /= y 等同于 x = x / y %= 先进行取模运算，再将结果赋值给运算符左侧的变量 x %= y 等同于 x = x % y 示例代码如下： var x = 10; x += 20; console.log(x); // 输出：30 var x = 12, y = 7; x -= y; console.log(x); // 输出：5 x = 5; x *= 25; console.log(x); // 输出：125 x = 50; x /= 10; console.log(x); // 输出：5 x = 100; x %= 15; console.log(x); // 输出：10 字符串运算符JavaScript 中的+和+=运算符除了可以进行数学运算外，还可以用来拼接字符串，其中： +运算符表示将运算符左右两侧的字符串拼接到一起； +=运算符表示先将字符串进行拼接，然后再将结果赋值给运算符左侧的变量。 示例代码如下： var x = \"Hello \"; var y = \"World!\"; var z = x + y; console.log(z); // 输出：Hello World! x += y; console.log(x); // 输出：Hello World! 自增、自减运算符自增、自减运算符用来对变量的值进行自增（+1）、自减（-1）操作，下表中列举了 JavaScript 中支持的自增、自减运算符： 运算符 名称 影响 ++x 自增运算符 将 x 加 1，然后返回 x 的值 x++ 自增运算符 返回 x 的值，然后再将 x 加 1 –x 自减运算符 将 x 减 1，然后返回 x 的值 x– 自减运算符 返回 x 的值，然后将 x 减 1 示例代码如下： var x; x = 10; console.log(++x); // 输出：11 console.log(x); // 输出：11 x = 10; console.log(x++); // 输出：10 console.log(x); // 输出：11 x = 10; console.log(--x); // 输出：9 console.log(x); // 输出：9 x = 10; console.log(x--); // 输出：10 console.log(x); // 输出：9 比较运算符比较运算符用来比较运算符左右两侧的表达式，比较运算符的运算结果是一个布尔值，结果只有两种，不是 true 就是 false。 运算符 名称 示例 == 等于 x == y 表示如果 x 等于 y，则为真 === 全等 x === y 表示如果 x 等于 y，并且 x 和 y 的类型也相同，则为真 != 不相等 x != y 表示如果 x 不等于 y，则为真 !== 不全等 x !== y 表示如果 x 不等于 y，或者 x 和 y 的类型不同，则为真 &lt; 小于 x &lt; y 表示如果 x 小于 y，则为真 &gt; 大于 x &gt; y 表示如果 x 大于 y，则为真 &gt;= 大于或等于 x &gt;= y 表示如果 x 大于或等于 y，则为真 &lt;= 小于或等于 x &lt;= y 表示如果 x 小于或等于 y，则为真 示例代码如下： var x = 25; var y = 35; var z = \"25\"; console.log(x == z); // 输出： true console.log(x === z); // 输出： false console.log(x != y); // 输出： true console.log(x !== z); // 输出： true console.log(x &lt; y); // 输出： true console.log(x &gt; y); // 输出： false console.log(x &lt;= y); // 输出： true console.log(x &gt;= y); // 输出： false 逻辑运算符逻辑运算符通常用来组合多个表达式，逻辑运算符的运算结果是一个布尔值，只能有两种结果，不是 true 就是 false。 运算符 名称 示例 &amp;&amp; 逻辑与 x &amp;&amp; y 表示如果 x 和 y 都为真，则为真 II 逻辑或 x II y 表示如果 x 或 y 有一个为真，则为真 ! 逻辑非 !x 表示如果 x 不为真，则为真 示例代码如下： var year = 2021; // 闰年可以被 400 整除，也可以被 4 整除，但不能被 100 整除 if((year % 400 == 0) || ((year % 100 != 0) &amp;&amp; (year % 4 == 0))){ console.log(year + \" 年是闰年。\"); } else{ console.log(year + \" 年是平年。\"); } 三元运算符三元运算符（也被称为条件运算符），由一个问号和一个冒号组成，语法格式如下 条件表达式 ? 表达式1 : 表达式2 ; 如果“条件表达式”的结果为真（true），则执行“表达式1”中的代码，否则就执行“表达式2”中的代码。 var x = 11, y = 20; x &gt; y ? console.log(\"x 大于 y\") : console.log(\"x 小于 y\"); // 输出：x 小于 y 位运算符位运算符用来对二进制位进行操作，JavaScript 中支持的位运算符如下表 运算符 描述 示例 &amp; 按位与：如果对应的二进制位都为 1，则该二进制位为 1 5 &amp; 1 等同于 0101 &amp; 0001 结果为 0001，十进制结果为 1 I 按位或：如果对应的二进制位有一个为 1，则该二进制位为 1 5 I1 等同于 0101 I 0001 结果I为 0101，十进制结果为 5 ^ 按位异或：如果对应的二进制位只有一个为 1，则该二进制位为 1 5 ^ 1 等同于 0101 ^ 0001 结果为 0100，十进制结果为 4 ~ 按位非：反转所有二进制位，即 1 转换为 0，0 转换为 1 ~5 等同于 ~0101 结果为 1010，十进制结果为 -6 &lt;&lt; 按位左移：将所有二进制位统一向左移动指定的位数，并在最右侧补 0 5 &lt;&lt; 1 等同于 0101 &lt;&lt; 1 结果为 1010，十进制结果为 10 &gt;&gt; 按位右移（有符号右移）：将所有二进制位统一向右移动指定的位数，并拷贝最左侧的位来填充左侧 5 &gt;&gt; 1 等同于 0101 &gt;&gt; 1 结果为 0010，十进制结果为 2 &gt;&gt;&gt; 按位右移零（无符号右移）：将所有二进制位统一向右移动指定的位数，并在最左侧补0 5 &gt;&gt;&gt; 1 等同于 0101 &gt;&gt;&gt; 1 结果为 0010，十进制结果为 2 示例代码如下： var a = 5 &amp; 1, b = 5 | 1, c = 5 ^ 1, d = ~ 5, e = 5 &lt;&lt; 1, f = 5 &gt;&gt; 1, g = 5 &gt;&gt;&gt; 1; console.log(a); // 输出：1 console.log(b); // 输出：5 console.log(c); // 输出：4 console.log(d); // 输出：-6 console.log(e); // 输出：10 console.log(f); // 输出：2 console.log(g); // 输出：2 JS运算符优先级JS 运算符的优先级和结合性规定了它们在复杂的表达式中的运算顺序。 运算符的执行顺序称为运算符的优先级，优先级高的运算符先于优先级低的运算符执行运算。 w=x+yz;执行加法运算的+运算符的优先级低于运算符，所以y*z将先被执行，乘法运算执行完后得到的结果再和 x 相加。 运算符的优先级可以通过使用圆括号来改变，例如为了让加法先执行，乘法后执行，可以修改上面的表达式为： w=(x+y)*z; JS 运算符结合性对于相同优先级的运算符的执行顺序，则由运算符的结合性来决定。运算符的结合性包括「从右至左」和「从左至右」两种： 从右至左的结合性指的是，运算的执行是按从右到左的顺序进行； 从左至右的结合性刚好相反，运算符的执行顺序按照从左到右的顺序进行。 JS 运算符优先级和结合性一览表下表中按照优先级由高到低的顺序罗列了 JavaScript 中的所有运算符 运算类型 运算符 关联性 优先级 圆括号 (…) n/a(不相关) 20 成员访问 … . … 从左到右 19 需计算的成员访问 … [ … ] 从左到右 19 new(带参数列表) new … ( … ) n/a 19 可选链（Optional chaining） ？. 从左到右 19 new(无参数列表) new … 从右到左 18 后置递增（运算符在后） … ++ n/a 17 逻辑非 ！… 从右到左 16 按位非 ~ … 从右到左 16 一元加法 + … 从右到左 16 一元减法 - …. 从右到左 16 前置递增 ++ … 从右到左 16 前置递减 – … 从右到左 16 typeof typeof … 从右到左 16 void void … 从右到左 16 delete delete … 从右到左 16 await await … 从右到左 16 幂 … ** … 从右到左 15 乘法 … * … 从左到右 14 除法 … / … 从左到右 14 取模 … % … 从左到右 14 加法 … + … 从左到右 13 减法 … - … 从左到右 13 按位左移 … &lt;&lt; … 从左到右 12 按位右移 … &gt;&gt; … 从左到右 12 无符号右移 … &gt;&gt;&gt; … 从左到右 12 小于 … &lt; … 从左到右 11 小于等于 … &lt;= … 从左到右 11 大于 … &gt; … 从左到右 11 大于等于 … &gt;= … 从左到右 11 in … in … 从左到右 11 instanceof … instanceof … 从左到右 11 等号 … == … 从左到右 10 非等号 … ！= … 从左到右 10 全等号 … === … 从左到右 10 非全等号 … ！=== … 从左到右 10 按位与 … &amp; … 从左到右 9 按位异或 … ^ … 从左到右 8 按位或 … | … 从左到右 7 逻辑与 … &amp;&amp; … 从左到右 6 逻辑或 … || … 从左到右 5 条件运算符 … ? … : … 从右到左 4 赋值 … = … … += … … -= … … *= … … /= … … %= … … &lt;&lt;= … … &gt;&gt;= … … &gt;&gt;&gt;= … … &amp;= … … ^= … … |= … 从右到左 3 yield yield … 从右到左 2 yield* yield* … 从右到左 2 展开运算符 … … n/a 1 逗号 … , … 从左到右 0 读后有收获可以请作者喝咖啡","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[{"name":"JS运算符","slug":"JS运算符","permalink":"https://屵.com/tags/JS%E8%BF%90%E7%AE%97%E7%AC%A6/"}]},{"title":"JS数据类型（基本数据类型+引用类型）","slug":"JS数据类型","date":"2022-03-27T07:47:31.000Z","updated":"2022-03-29T08:58:36.209Z","comments":true,"path":"archives/18789.html","link":"","permalink":"https://屵.com/archives/18789.html","excerpt":"","text":"JS数据类型（基本数据类型+引用类型）JavaScript 是一种动态类型的语言，在定义变量时不需要提前指定变量的类型，变量的类型是在程序运行过程中由 JavaScript 引擎动态决定的，另外，您可以使用同一个变量来存储不同类型的数据 var a; // 此时 a 为 Undefined a = \"https://www.jianshu.com/u/32841c0369fb\"; // 此时 a 为 String 类型 a = 123; // 此时 a 为 Number 类型 基本数据类型（值类型） 字符串（String）、数字（Number）、布尔（Boolean）、空（Null）、未定义（Undefined）、Symbol String 类型字符串（String）类型是一段以单引号’’或双引号””包裹起来的文本，例如 ‘123’、”abc”。需要注意的是，单引号和双引号是定义字符串的不同方式，并不是字符串的一部分 var str = \"Let's have a cup of coffee.\"; // 双引号中包含单引号 var str = 'He said \"Hello\" and left.'; // 单引号中包含双引号 var str = 'We\\'ll never give up.'; // 使用反斜杠转义字符串中的单引号 Number 类型数值（Number）类型用来定义数值，JavaScript 中不区分整数和小数（浮点数），统一使用 Number 类型表示 var num1 = 123; // 整数 var num2 = 3.14; // 浮点数 注意：Number 类型所能定义的数值并不是无限的 对于一些极大或者极小的数，也可以通过科学（指数）计数法来表示 var y=123e5; // 123 乘以 10 的 5 次方，即 12300000 var z=123e-5; // 123 乘以 10 的 -5 次方，即 0.00123 Number 类型中还有一些比较特殊的值，分别为 Infinity、-Infinity 和 NaN，其中Infinity：用来表示正无穷大的数值，一般指大于 1.7976931348623157e+308 的数；-Infinity：用来表示负无穷大的数值，一般指小于 5e-324 的数；NaN：即非数值（Not a Number 的缩写），用来表示无效或未定义的数学运算结构，例如 0 除以 0。提示：如果某次计算的结果超出了 JavaScript 中 Number 类型的取值范围，那么这个数就会自动转化为无穷大，正数为 Infinity，负数为 -Infinity。 Boolean 类型布尔（Boolean）类型只有两个值，true（真）或者 false（假），在做条件判断时使用的比较多，您除了可以直接使用 true 或 false 来定义布尔类型的变量外，还可以通过一些表达式来得到布尔类型的值 var a = true; // 定义一个布尔值 true var b = false; // 定义一个布尔值 false var c = 2 &gt; 1; // 表达式 2 &gt; 1 成立，其结果为“真（true）”，所以 c 的值为布尔类型的 true var d = 2 &lt; 1; // 表达式 2 &lt; 1 不成立，其结果为“假（false）”，所以 c 的值为布尔类型的 false Undefined 类型Undefined 也是一个只有一个值的特殊数据类型，表示未定义。当我们声明一个变量但未给变量赋值时，这个变量的默认值就是 Undefined var num; console.log(num); // 输出 undefined 在使用 typeof 操作符查看未赋值的变量类型时，会发现它们的类型也是 undefined。对于未声明的变量，使用 typeof 操作符查看其类型会发现，未声明的变量也是 undefined var message; console.log(typeof message); // 输出 undefined console.log(typeof name); // 输出 undefined Symbol 类型Symbol 是 ECMAScript6 中引入的一种新的数据类型，表示独一无二的值，Symbol 类型的值需要使用 Symbol() 函数来生成 var str = \"123\"; var sym1 = Symbol(str); var sym2 = Symbol(str); console.log(sym1); // 输出 Symbol(123) console.log(sym2); // 输出 Symbol(123) console.log(sym1 == sym2); // 输出 false ：虽然 sym1 与 sym2 看起来是相同的，但实际上它们并 不一样，根据 Symbol 类型的特点，sym1 和 sym2 都是独一无二的 引用数据类型 对象（Object）、数组（Array）、函数（Function） Object 类型JavaScript 中的对象（Object）类型是一组由键、值组成的无序集合，定义对象类型需要使用花括号{ }，格式如下： {name1: value1, name2: value2, name3: value3, ..., nameN: valueN} 其中 name1、name2、name3、…、nameN 为对象中的键，value1、value2、value3、…、valueN 为对应的值。 在 JavaScript 中，对象类型的键都是字符串类型的，值则可以是任意数据类型。要获取对象中的某个值，可以使用对象名.键的形式 var person = { name: 'Bob', age: 20, tags: ['js', 'web', 'mobile'], city: 'Beijing', hasCar: true, zipcode: null }; console.log(person.name); // 输出 Bob console.log(person.age); // 输出 20 Array 类型数组（Array）是一组按顺序排列的数据的集合，数组中的每个值都称为元素，而且数组中可以包含任意类型的数据。在 JavaScript 中定义数组需要使用方括号[ ]，数组中的每个元素使用逗号进行分隔 [1, 2, 3, 'hello', true, null] 也可以使用 Array() 函数来创建数组 var arr = new Array(1, 2, 3, 4); console.log(arr); // 输出 [1, 2, 3, 4] 数组中的元素可以通过索引来访问。数组中的索引从 0 开始，并依次递增，也就是说数组第一个元素的索引为 0，第二个元素的索引为 1，第三个元素的索引为 2，以此类推 var arr = [1, 2, 3.14, 'Hello', null, true]; console.log(arr[0]); // 输出索引为 0 的元素，即 1 console.log(arr[5]); // 输出索引为 5 的元素，即 true console.log(arr[6]); // 索引超出了范围，返回 undefined Function 类型函数（Function）是一段具有特定功能的代码块，函数并不会自动运行，需要通过函数名调用才能运行 function sayHello(name){ return \"Hello, \" + name; } var res = sayHello(\"Jinghai\"); console.log(res); // 输出 Hello, Jinghai 函数还可以存储在变量、对象、数组中，而且函数可以作为参数传递给其它函数，或则从其它函数返回 var fun = function(){ console.log(\"https://www.jianshu.com/u/32841c0369fb\"); } function createGreeting(name){ return \"Hello, \" + name; } function displayGreeting(greetingFunction, userName){ return greetingFunction(userName); } var result = displayGreeting(createGreeting, \"Jinghai\"); console.log(result); // 输出 Hello, Jinghai 读后有收获可以请作者喝咖啡","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[{"name":"JS基本数据类型","slug":"JS基本数据类型","permalink":"https://屵.com/tags/JS%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"}]}],"categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"},{"name":"markdown","slug":"markdown","permalink":"https://屵.com/categories/markdown/"}],"tags":[{"name":"思维导图","slug":"思维导图","permalink":"https://屵.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"},{"name":"Typora","slug":"Typora","permalink":"https://屵.com/tags/Typora/"},{"name":"JS运算符","slug":"JS运算符","permalink":"https://屵.com/tags/JS%E8%BF%90%E7%AE%97%E7%AC%A6/"},{"name":"JS基本数据类型","slug":"JS基本数据类型","permalink":"https://屵.com/tags/JS%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"}]}