{"meta":{"title":"屵的博客","subtitle":"屵","description":"专注创新 分享互联网精神","author":"i996的肥仔","url":"https://屵.com","root":"/"},"pages":[{"title":"404","date":"2022-03-27T10:02:17.000Z","updated":"2022-03-27T11:02:07.760Z","comments":true,"path":"404/index.html","permalink":"https://屵.com/404/index.html","excerpt":"","text":""},{"title":"contact","date":"2022-03-27T09:55:25.000Z","updated":"2022-03-27T09:55:55.955Z","comments":true,"path":"contact/index.html","permalink":"https://屵.com/contact/index.html","excerpt":"","text":""},{"title":"about","date":"2022-03-27T09:54:28.000Z","updated":"2022-03-27T09:55:10.764Z","comments":true,"path":"about/index.html","permalink":"https://屵.com/about/index.html","excerpt":"","text":""},{"title":"friends","date":"2022-03-27T09:58:07.000Z","updated":"2022-03-27T09:58:41.731Z","comments":true,"path":"friends/index.html","permalink":"https://屵.com/friends/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-03-27T09:28:06.000Z","updated":"2022-03-27T09:52:54.548Z","comments":true,"path":"categories/index.html","permalink":"https://屵.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-03-27T09:53:31.000Z","updated":"2022-03-27T09:54:12.123Z","comments":true,"path":"tags/index.html","permalink":"https://屵.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"流程图","slug":"flowchart","date":"2022-03-31T05:50:48.000Z","updated":"2022-03-31T07:24:44.105Z","comments":true,"path":"archives/6998536.html","link":"","permalink":"https://屵.com/archives/6998536.html","excerpt":"","text":"","categories":[{"name":"markdown","slug":"markdown","permalink":"https://屵.com/categories/markdown/"}],"tags":[{"name":"流程图","slug":"流程图","permalink":"https://屵.com/tags/%E6%B5%81%E7%A8%8B%E5%9B%BE/"}]},{"title":"JS文档对象模型","slug":"jsdom","date":"2022-03-31T02:17:11.000Z","updated":"2022-03-31T08:42:37.512Z","comments":true,"path":"archives/f2929ef2.html","link":"","permalink":"https://屵.com/archives/f2929ef2.html","excerpt":"","text":"文档对象模型（Document Object Model，简称 DOM），是一种与平台和语言无关的模型，用来表示 HTML 或 XML 文档。文档对象模型中定义了文档的逻辑结构，以及程序访问和操作文档的方式。 借助 DOM 您可以使用 JavaScript 来访问、修改、删除或添加 HTML 文档中的任何内容。 Document 对象当浏览器加载一个 HTML 文档时，会创建一个 Document 对象，Document 对象是 DOM 树中所有节点的根节点。通过 Document 对象我们可以访问 HTML 文档中的所有元素。 提示：Document 对象是 Window 对象的一部分，所以您可以通过 window.document 来访问 Document 对象。 Document 对象中的属性下表中列举了 Document 对象中提供的属性及其描述：Document 对象中的属性 属性 描述 document.activeElement 返回当前获取焦点的元素 document.anchors 返回对文档中所有 Anchor 对象的引用 document.applets 返回对文档中所有 Applet 对象的引用。注意: HTML5 已不支持 元素 document.baseURI 返回文档的基础 URI document.body 返回文档的 body 元素 document.cookie 设置或返回与当前文档有关的所有 cookie document.doctype 返回与文档相关的文档类型声明 (DTD) document.documentElement 返回文档的根节点 document.documentMode 返回浏览器渲染文档的模式 document.documentURI 设置或返回文档的位置 document.domain 返回当前文档的域名 document.domConfig 已废弃，返回 normalizeDocument() 被调用时所使用的配置 document.embeds 返回文档中所有嵌入内容（embed）的集合 document.forms 返回文档中所有 Form 对象的引用 document.images 返回文档中所有 Image 对象的引用 document.implementation 返回处理该文档的 DOMImplementation 对象 document.inputEncoding 返回文档的编码方式 document.lastModified 返回文档的最后修改日期 document.links 返回对文档中所有 Area 和 Link 对象的引用 document.readyState 返回文档状态（载入中） document.referrer 返回载入当前文档的 URL document.scripts 返回页面中所有脚本的集合 document.strictErrorChecking 设置或返回是否强制进行错误检查 document.title 返回当前文档的标题 document.URL 返回文档的完整 URL Document 对象中的方法 方法 描述 document.addEventListener() 向文档中添加事件 document.adoptNode(node) 从另外一个文档返回 adapded 节点到当前文档 document.close() 关闭使用 document.open() 方法打开的输出流，并显示选定的数据 document.createAttribute() 为指定标签添加一个属性节点 document.createComment() 创建一个注释节点 document.createDocumentFragment() 创建空的 DocumentFragment 对象，并返回此对象 document.createElement() 创建一个元素节点 document.createTextNode() 创建一个文本节点 document.getElementsByClassName() 返回文档中所有具有指定类名的元素集合 document.getElementById() 返回文档中具有指定 id 属性的元素 document.getElementsByName() 返回具有指定 name 属性的对象集合 document.getElementsByTagName() 返回具有指定标签名的对象集合 document.importNode() 把一个节点从另一个文档复制到该文档以便应用 document.normalize() 删除空文本节点，并合并相邻的文本节点 document.normalizeDocument() 删除空文本节点，并合并相邻的节点 document.open() 打开一个流，以收集来自 document.write() 或 document.writeln() 方法的输出 document.querySelector() 返回文档中具有指定 CSS 选择器的第一个元素 document.querySelectorAll() 返回文档中具有指定 CSS 选择器的所有元素 document.removeEventListener() 移除文档中的事件句柄 document.renameNode() 重命名元素或者属性节点 document.write() 向文档中写入某些内容 document.writeln() 等同于 write() 方法，不同的是 writeln() 方法会在末尾输出一个换行符 示例代码如下： document.addEventListener(\"click\", function(){ document.body.innerHTML = document.activeElement; var box = document.createElement('div'); document.body.appendChild(box); var att = document.createAttribute('id'); att.value = \"myDiv\"; document.getElementsByTagName('div')[0].setAttributeNode(att); document.getElementById(\"myDiv\").innerHTML = Math.random(); var btn = document.createElement(\"button\"); var t = document.createTextNode(\"按钮\"); btn.appendChild(t); document.body.appendChild(btn); var att = document.createAttribute('onclick'); att.value = \"myfunction()\"; document.getElementsByTagName('button')[0].setAttributeNode(att); }); function myfunction(){ alert(document.title); } JS Element对象（元素对象）使用 Document 对象中提供的方法（例如 getElementsByTagName()、getElementById()、getElementsByClassName() 等）可以得到 Element 对象，在 Element 对象中同样也提供了一系列方法和属性，来操作文档中的元素或者元素中的属性。 Element 对象中的属性 属性 描述 element.accessKey 设置或返回一个访问单选按钮的快捷键 element.attributes 返回一个元素的属性数组 element.childNodes 返回元素的一个子节点的数组 element.children 返回元素中子元素的集合 element.classList 返回元素中类名组成的对象 element.className 设置或返回元素的 class 属性 element.clientHeight 返回内容的可视高度（不包括边框，边距或滚动条） element.clientWidth 返回内容的可视宽度（不包括边框，边距或滚动条） element.contentEditable 设置或返回元素的内容是否可编辑 element.dir 设置或返回一个元素中的文本方向 element.firstChild 返回元素中的第一个子元素 element.id 设置或者返回元素的 id element.innerHTML 设置或者返回元素的内容 element.isContentEditable 返回元素内容是否可编辑，如果可编辑则返回 true，否则返回 false element.lang 设置或者返回一个元素的语言 element.lastChild 返回元素的最后一个子元素 element.namespaceURI 返回命名空间的 URI element.nextSibling 返回指定元素之后的兄弟元素，两个元素在 DOM 树中位于同一层级（包括文本节点、注释节点） element.nextElementSibling 返回指定元素之后的兄弟元素，两个元素在 DOM 树中位于同一层级（不包括文本节点、注释节点） element.nodeName 返回元素名称（大写） element.nodeType 返回元素的节点类型 element.nodeValue 返回元素的节点值 element.offsetHeight 返回元素的高度，包括边框和内边距，但不包括外边距 element.offsetWidth 返回元素的宽度，包括边框和内边距，但不包括外边距 element.offsetLeft 返回元素在水平方向的偏移量 element.offsetParent 返回距离该元素最近的进行过定位的父元素 element.offsetTop 返回元素在垂直方向的偏移量 element.ownerDocument 返回元素的根元素（文档对象） element.parentNode 返回元素的父节点 element.previousSibling 返回元素之前的兄弟元素，两个元素在 DOM 树中位于同一层级（包括文本节点、注释节点） element.previousElementSibling 返回元素之前的兄弟元素，两个元素在 DOM 树中位于同一层级（不包括文本节点、注释节点） element.scrollHeight 返回元素的完整高度（包括被滚动条隐蔽的部分） element.scrollLeft 设置或返回元素滚动条距离元素左侧的距离 element.scrollTop 设置或返回元素滚动条距离元素上方的距离 element.scrollWidth 返回元素的完整宽度（包括被滚动条隐蔽的部分） element.style 设置或返回元素的样式属性 element.tabIndex 设置或返回元素的标签顺序 element.tagName 以字符的形式返回元素的名称（大写） element.textContent 设置或返回某个元素以及其中的文本内容 element.title 设置或返回元素的 title 属性 element.length 返回对象的长度 Element 对象中的方法 方法 描述 element.addEventListener() 为指定元素定义事件 element.appendChild() 为元素添加一个新的子元素 element.cloneNode() 克隆某个元素 element.compareDocumentPosition() 比较当前元素与指定元素在文档中的位置，返回值如下： 1 ：表示两个元素没有关系，不属于同一文档；2：表示当前元素在指定元素之后；4 ：当前元素在指定元素之前；8 ：当前元素在指定元素之内；16 ：指定元素在当前元素之内；32 ：两个元素没有关系，或者它们是同一元素的两个属性。 element.focus() 使元素获得焦点 element.getAttribute() 通过属性名称获取指定元素的属性值 element.getAttributeNode() 通过属性名称获取指定元素得属性节点 element.getElementsByTagName() 通过标签名获取当前元素下的所有子元素的集合 element.getElementsByClassName() 通过类名获取当前元素下的子元素的集合 element.hasAttribute() 判断元素是否具有指定的属性，若存在则返回 true，不存在则返回 false element.hasAttributes() 判断元素是否存在任何属性，若存在则返回 true，不存在则返回 false element.hasChildNodes() 判断一个元素是否具有子元素，有则返回 true，没有则返回 false element.hasFocus() 判断元素是否获得了焦点 element.insertBefore() 在已有子元素之前插入一个新的子元素 element.isDefaultNamespace() 如果指定 namespaceURI 是默认的则返回 true，否则返回 false。 element.isEqualNode() 检查两个元素是否相等 element.isSameNode() 检查当前元素与指定元素是否为同一元素 element.isSupported() 判断当前元素是否支持某个特性 element.normalize() 合并相邻的文本节点，并删除空的文本节点 element.querySelector() 根据 CSS 选择器，返回第一个匹配的元素 document.querySelectorAll() 根据 CSS 选择器，返回所有匹配的元素 element.removeAttribute() 从元素中删除指定的属性 element.removeAttributeNode() 从元素中删除指定的属性节点 element.removeChild() 删除一个子元素 element.removeEventListener() 移除由 addEventListener() 方法添加的事件 element.replaceChild() 替换一个子元素 element.setAttribute() 设置或者修改指定属性的值 element.setAttributeNode() 设置或者修改指定的属性节点 element.setUserData() 在元素中为指定键值关联对象 element.toString() 将元素转换成字符串 nodelist.item() 返回某个元素基于文档树的索引 &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;JavaScript&lt;/title&gt; &lt;/head&gt; &lt;body onload=\"accesskey()\"&gt; &lt;a id=\"r\" class=\"aaa bbb ccc\" href=\"javascript:;\"&gt;使用 Alt + r 访问该元素&lt;/a&gt;&lt;br&gt; &lt;a id=\"g\" href=\"javascript:;\"&gt;使用 Alt + g 访问该元素&lt;/a&gt; &lt;script type=\"text/javascript\"&gt; function accesskey(){ document.getElementById('r').accessKey=\"r\" document.getElementById('g').accessKey=\"g\" } var ele = document.getElementById('r'); console.log(ele.attributes); // 输出：NamedNodeMap {0: id, 1: href, id: id, href: href, length: 2} console.log(document.body.childNodes); // 输出：NodeList(7) [text, a#r, br, text, a#g, text, script] console.log(ele.classList); // 输出：DOMTokenList(3) [\"aaa\", \"bbb\", \"ccc\", value: \"aaa bbb ccc\"] console.log(ele.className); // 输出：aaa bbb ccc console.log(ele.clientHeight); // 输出：DOMTokenList(3) [\"aaa\", \"bbb\", \"ccc\", value: \"aaa bbb ccc\"] console.log(ele.tagName); // 输出：A console.log(ele.compareDocumentPosition(document.getElementById('g'))); // 输出：4 console.log(ele.getAttribute('href')); // 输出：javascript:; console.log(ele.getAttributeNode('href')); // 输出：href=\"javascript:;\" &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 运行结果如下图所示： JS attributes对象（元素属性对象）元素属性是指在 HTML 元素的开始标签中用来控制标签行为或提供标签信息的特殊词语 在 HTML DOM 中，通过 attributes 对象来表示 HTML 属性，在 attributes 对象中提供了多种添加、修改和删除 HTML 属性的方法，如下表所示 属性 / 方法 描述 attributes.isId 如果属性是 ID 类型，则返回 true，否则返回 false attributes.name 返回属性名称 attributes.value 设置或者返回属性的值 attributes.specified 如果定义了指定属性，则返回 true，否则返回 false nodemap.getNamedItem() 从节点列表中返回的指定属性节点 nodemap.item() 返回节点列表中处于指定索引号的节点 nodemap.length 返回节点列表的节点数目 nodemap.removeNamedItem() 删除指定属性节点 nodemap.setNamedItem() 设置指定属性节点（通过名称） &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;JavaScript&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;a href=\"javascript:;\" target=\"_blank\" id=\"myLink\"&gt;JavaScript&lt;/a&gt;&lt;br&gt; &lt;script type=\"text/javascript\"&gt; var atag = document.getElementById('myLink'); var attr = atag.attributes; document.write(attr.target.value + \"&lt;br&gt;\"); // 输出：_blank document.write(attr.target.name + \"&lt;br&gt;\"); // 输出：target document.write(attr.target.specified + \"&lt;br&gt;\"); // 输出：true document.write(attr.getNamedItem('href').textContent + \"&lt;br&gt;\"); // 输出：javascript:; document.write(attr.item(0).name + \"&lt;br&gt;\"); // 输出：href document.write(attr.length + \"&lt;br&gt;\"); // 输出：3 document.write(attr.removeNamedItem('target') + \"&lt;br&gt;\"); // 输出：[object Attr] var cla = document.createAttribute('class'); cla.value = 'democlass'; document.write(attr.setNamedItem(cla) + \"&lt;br&gt;\"); // 输出：null &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 运行结果如下图所示： 读后有收获可以请作者喝咖啡","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[{"name":"JS DOM","slug":"JS-DOM","permalink":"https://屵.com/tags/JS-DOM/"}]},{"title":"JS正则表达式","slug":"jsregexp","date":"2022-03-30T14:31:52.000Z","updated":"2022-03-30T15:06:06.362Z","comments":true,"path":"archives/b1bfb9e8.html","link":"","permalink":"https://屵.com/archives/b1bfb9e8.html","excerpt":"","text":"JS RegExp 对象JavaScript 字符串是在编程中使用最多的一种数据类型，很多地方都需要对字符串进行操作，例如判断一个字符串是否为一个合法的 E-mail 地址、从字符串截取指定的部分等。 正则表达式是一种用于匹配字符串或特殊字符的一种逻辑公式，所谓逻辑公式就是由一些特定字符组合成的，用来表示某些规则的特殊字符串，可以表达对字符串数据的过滤逻辑。 在 JavaScript 中需要借助 RegExp 对象来使用正则表达式，要创建 RegExp 对象有两种方法 var patt = new RegExp(pattern, modifiers);var patt = /pattern/modifiers; pattern：正则表达式，按照正则表达式的语法定义的正则表达式；modifiers：修饰符，用来设置字符串的匹配模式，可选值如下表所示： 修饰符 描述 i 执行对大小写不敏感的匹配 g 执行全局匹配（查找所有的匹配项，而非在找到第一个匹配项后停止） m 执行多行匹配 s 允许使用.匹配换行符 u 使用 Unicode 码的模式进行匹配 y 执行“粘性”搜索，匹配从目标字符串的当前位置开始 注意：当使用 new 关键字创建 RegExp 对象时，需要将正则表达式中的特殊字符转义，即在特殊字符前加反斜杠\\，例如\\w+。 定义正则表达式正则表达式由字母、数字、标点以及一些特殊特殊字符组成，例如/abc/、/(\\d+).\\d*/，可以在正则表达式中使用的特殊字符如下表所示 特殊字符 含义 \\ 转义字符，在非特殊字符之前使用反斜杠表示下一个字符是特殊字符，不能按照字面理解，例如\\b表示一个字符边界；在特殊字符之前使用反斜杠则表示下一个字符不是特殊字符，应该按照字面理解。例如反斜杠本身，若要在正则表达式中定义一个反斜杠，则需要在反斜杠前再添加一个反斜杠\\。 ^ 匹配字符串的开头，如果设置了修饰符 m，则也可以匹配换行符后紧跟的位置。 例如“/^A/”并不会匹配“an A”中的“A”，但是会匹配“An E”中的“A”。 $ 匹配字符串的末尾，如果设置了修饰符 m，则也可以匹配换行符之前的位置。 例如“/t$/”并不会匹配“eater”中的“t”，但是会匹配“eat”中的“t”。 * 匹配前一个表达式 0 次或多次，等价于 {0,}。例如“/bo*/”能够匹配“A ghost boooooed”中的“booooo”和“A bird warbled”中的“b”，但是在“A goat grunted”中不会匹配任何内容 + 匹配前面一个表达式 1 次或者多次，等价于 {1,}。例如“/a+/”能够匹配“candy”中的“a”和“caaaaaaandy”中所有的“a”，但是在“cndy”中不会匹配任何内容 ? 匹配前面一个表达式 0 次或者 1 次，等价于 {0,1}。例如“/e?le?/”能够匹配“angel”中的“el”，“angle”中的“le”以及“oslo”中的“l” . 匹配除换行符之外的任何单个字符。例如“/.n/”将会匹配“nay, an apple is on the tree”中的“an”和“on” (x) 匹配“x”并记住这一匹配项，这里的括号被称为捕获括号 (?:x) 匹配“x”但是不记住匹配项，这里的括号被称为非捕获括号 x(?=y) 当“x”后面跟着“y”时，匹配其中的“x”。例如“/Jack(?=Sprat)/”会匹配后面跟着“Sprat”的“Jack”，“/Jack(?=Sprat|Frost)/”会匹配后面跟着“Sprat”或者是“Frost”的“Jack”。注意：无论是“Sprat”还是“Frost”都不是匹配结果的一部分 (?&lt;=y)x 当“x”前面是“y”时，匹配其中的“x”。例如“/(?&lt;=Jack)Sprat/”会匹配前面未“Sprat”的“Jack”，“/(?&lt;=JackITom)Sprat/”会匹配前面为“Jack”或者“Tom”的“Sprat”。注意：无论是“Jack”和“Tom”都不是匹配结果的一部分 x(?!y) 当“x”后面不是“y”时，匹配其中的“x”。 例如“/\\d+(?!.)/”会匹配“3.141”中的“141”，而不是“3.141” (?&lt;!y)x 当“x”前面不是“y”时，匹配其中的“x” x|y 匹配“x”或者“y”。 例如“/green|red/”能够匹配“green apple”中的“green”和“red apple”中的“red” {n} n 是一个正整数，表示匹配前一个字符 n 次。例如“/a{2}/”不会匹配“candy”中的“a”，但是能够匹配“caandy”中所有的“a”，以及“caaandy”中的前两个“a” {n,} n 是一个正整数，表示匹配前一个字符至少 n 次。例如“/a{2,}/”能够匹配“aa”、“aaaa”或“aaaaa”，但不会匹配“a” {n,m} n 和 m 都是整数，表示匹配前一个字符至少 n 次，最多 m 次，如果 n 或 m 等于 0，则表示忽略这个值。例如“/a{1, 3}/”能够匹配“candy”中的“a”，“caandy”中的前两个“a”，“caaaaaaandy”中的前三个“a” [xyz|] 转义序列，匹配 x、y 或 z，您也可以使用破折号-来指定一个字符范围。例如“[abcd]”和“[a-d]”是一样的，它们都能匹配“brisket”中的“b”,“city”中的“c” [^xyz] 反向字符集，匹配除 x、y、z 以外的任何字符，您通用也可以使用破折号-来指定一个字符范围。例如“[^abc]”和“[^a-c]”是一样的，它们都能匹配“brisket”中的“r”，“chop”中的“h” [\\b] 匹配一个退格符，注意：不要和 \\b 混淆 \\b 匹配一个单词的边界，即单词的开始或末尾。例如“/\\bm/”能够匹配“moon”中的“m”，但不会匹配“imoon”中的“m” \\B 匹配一个非单词边界。例如“er\\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er” \\cX 当 X 是 A 到 Z 之间的字符时，匹配字符串中的一个控制符。例如“/\\cM/”能够匹配字符串中的“control-M(U+000D)” \\d 匹配一个数字，等价于“[0-9]”。例如“/\\d/”或者“/[0-9]/”能够匹配“B2 is the suite number.”中的“2” \\D 匹配一个非数字字符，等价于“[^0-9]”。 例如“/\\D/”或者“/[^0-9]/”能够匹配“B2 is the suite number.”中的“B” \\f 匹配一个换页符 (U+000C) \\n 匹配一个换行符 (U+000A) \\r 匹配一个回车符 (U+000D) \\s 匹配一个空白字符，包括空格、制表符、换页符和换行符，等价于“[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]”。例如“/\\s\\w*/”能够匹配“foo bar.”中的“bar” \\S 匹配一个非空白字符，等价于“[^\\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]”。例如“/\\S\\w*/”能够匹配“foo bar.”中的“foo” \\t 匹配一个水平制表符 (U+0009) \\v 匹配一个垂直制表符 (U+000B) \\w 匹配一个单字字符（字母、数字或者下划线），等价于“[A-Za-z0-9_]”。例如“/\\w/”能够匹配“apple,”中的“a”，“$5.28,”中的“5”和“3D.”中的“3” \\W 匹配一个非单字字符，等价于“[^A-Za-z0-9_]”。例如“/\\W/”或者“/[^A-Za-z0-9_]/”能够匹配“50%.”中的“%” \\n 获取最后的第 n 个匹配的值。比如“/apple(,)\\sorange\\1/”能够匹配“apple, orange, cherry, peach.”中的“apple, orange,” \\0 匹配 NULL（U+0000）字符，不要在这后面跟其它小数，因为 \\0 是一个八进制转义序列 \\xhh 匹配一个两位十六进制数（\\x00-\\xFF）表示的字符 \\uhhhh 匹配一个四位十六进制数表示的 UTF-16 代码单元 \\u{hhhh}或\\u{hhhhh} （仅在设置了修饰符 u 时）匹配一个十六进制数表示的 Unicode 字符 提示：在正则表达式中.、*、?、+、[、]、(、)、{、}、^、$、|、\\等字符被赋予了特殊的含义，若要在正则表达式中使用这些字符的原本意思时，需要在这些字符前添加反斜线进行转义，例如若要匹配.，则必须编写为.。 使用正则表达式JavaScript RegExp 对象中提供了一些列方法来执行正则表达式，如下表所示 方法 描述 compile() 在 1.5 版本中已废弃，编译正则表达式 exec() 在字符串搜索匹配项，并返回一个数组，若没有匹配项则返回 null test() 测试字符串是否与正则表达式匹配，匹配则返回 true，不匹配则返回 false toString() 返回表示指定对象的字符串 此外 String 对象中也提供了一些方法来执行正则表达式 方法 描述 search() 在字符串中搜索匹配项，并返回第一个匹配的结果，若没有找到匹配项则返回 -1 match() 在字符串搜索匹配项，并返回一个数组，若没有匹配项则返回 null matchAll() 在字符串搜索所有匹配项，并返回一个迭代器（iterator） replace() 替换字符串中与正则表达式相匹配的部分 split() 按照正则表达式将字符串拆分为一个字符串数组 除了方法外，RegExp 对象中还提供了一些属性|属性| 描述|| :—– | :—– ||constructor| 返回一个函数，该函数是一个创建 RegExp 对象的原型||global |判断是否设置了修饰符 “g”||ignoreCase| 判断是否设置了修饰符 “i”||lastIndex |用于规定下次匹配的起始位置||multiline |判断是否设置了修饰符 “m”||source |返回正则表达式的匹配模式| var str = \"Hello World!\"; var reg = /[a-g]/g; document.write(reg.exec(str) + \"&lt;br&gt;\"); // 输出：e document.write(reg.test(str) + \"&lt;br&gt;\"); // 输出：true document.write(reg.toString() + \"&lt;br&gt;\"); // 输出：/[a-g]/g document.write(str.search(reg) + \"&lt;br&gt;\"); // 输出：1 document.write(str.match(reg) + \"&lt;br&gt;\"); // 输出：e,d document.write(str.matchAll(reg) + \"&lt;br&gt;\"); // 输出：[object RegExp String Iterator] document.write(str.replace(reg, \"+\") + \"&lt;br&gt;\"); // 输出：H+llo Worl+! document.write(str.split(reg) + \"&lt;br&gt;\"); // 输出：H,llo Worl,! 读后有收获可以请作者喝咖啡","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[{"name":"JS正则表达式","slug":"JS正则表达式","permalink":"https://屵.com/tags/JS%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}]},{"title":"JSMath对象","slug":"jsmath","date":"2022-03-30T14:20:46.000Z","updated":"2022-03-30T14:30:35.187Z","comments":true,"path":"archives/2ebcccd1.html","link":"","permalink":"https://屵.com/archives/2ebcccd1.html","excerpt":"","text":"JS Math对象Math 是 JavaScript 中的一个内置对象，其中提供了一些数学中常用的常量值和函数，用来实现一些数学中常见计算，例如计算平均数、求绝对值、四舍五入等 与前面介绍的几个对象（例如 Number 对象、String对象、Array对象等）不同，调用 Math 对象中的属性和方法无需预先使用 new 运算符来创建它，直接将 Math 作为对象调用即可 var pi_val = Math.PI; // 数学中 π 的值：3.141592653589793 var abs_val = Math.sin(-5.35); // -5.35 的绝对值：5.35 Math 对象中的属性下表中列举了 Math 对象中提供的属性及其描述信息： 属性 描述 E 返回算术常量 e，即自然对数的底数（约等于 2.718） LN2 返回 2 的自然对数（约等于 0.693） LN10 返回 10 的自然对数（约等于 2.302） LOG2E 返回以 2 为底的 e 的对数（约等于 1.443） LOG10E 返回以 10 为底的 e 的对数（约等于 0.434） PI 返回圆周率 π（约等于 3.14159） SQRT1_2 返回返回 2 的平方根的倒数（约等于 0.707） SQRT2 返回 2 的平方根（约等于 1.414） document.write(Math.E + \"&lt;br&gt;\"); // 输出：2.718281828459045 document.write(Math.LN2 + \"&lt;br&gt;\"); // 输出：0.6931471805599453 document.write(Math.LN10 + \"&lt;br&gt;\"); // 输出：2.302585092994046 document.write(Math.LOG2E + \"&lt;br&gt;\"); // 输出：1.4426950408889634 document.write(Math.LOG10E + \"&lt;br&gt;\"); // 输出：0.4342944819032518 document.write(Math.PI + \"&lt;br&gt;\"); // 输出：3.141592653589793 document.write(Math.SQRT1_2 + \"&lt;br&gt;\"); // 输出：0.7071067811865476 document.write(Math.SQRT2 + \"&lt;br&gt;\"); // 输出：1.4142135623730951 Math 对象中的方法 方法 描述 abs(x) 返回 x 的绝对值 acos(x) 返回 x 的反余弦值 acosh(x) 返回 x 的反双曲余弦值 asin(x) 返回 x 的反正弦值 asinh(x) 返回 x 的反双曲正弦值 atan(x) 返回 x 的反正切值 atanh(x) 返回 x 的反双曲正切值 atan2(y,x) 返回 y/x 的反正切值 cbrt(x) 返回 x 的立方根 ceil(x) 对 x 进行向上取整，即返回大于 x 的最小整数 clz32(x) 返回将 x 转换成 32 无符号整形数字的二进制形式后，开头 0 的个数 cos(x) 返回 x 的余弦值 cosh(x) 返回 x 的双曲余弦值 exp(x) 返回算术常量 e 的 x 次方，即 Ex expm1(x) 返回 exp(x) - 1 的值 floor(x) 对 x 进行向下取整，即返回小于 x 的最大整数 fround(x) 返回最接近 x 的单精度浮点数 hypot([x, [y, […]]]) 返回所有参数平方和的平方根 imul(x, y) 将参数 x、y 分别转换位 32 位整数，并返回它们相乘后的结果 log(x) 返回 x 的自然对数 log1p(x) 返回 x 加 1 后的自然对数 log10(x) 返回 x 以 10 为底的对数 log2(x) 返回 x 以 2 为底的对数 max([x, [y, […]]]) 返回多个参数中的最大值 min([x, [y, […]]]) 返回多个参数中的最小值 pow(x,y) 返回 x 的 y 次幂 random() 返回一个 0 到 1 之间的随机数 round(x) 返回 x 四舍五入后的整数 sign(x) 返回 x 的符号，即一个数是正数、负数还是 0 sin(x) 返回 x 的正弦值 sinh(x) 返回 x 的双曲正弦值 sqrt(x) 返回 x 的平方根 tan(x) 返回 x 的正切值 tanh(x) 返回 x 的双曲正切值 toSource() 返回字符串”Math” trunc(x) 返回 x 的整数部分 valueOf() 返回 Math 对象的原始值 document.write(Math.abs(-3.1415) + \"&lt;br&gt;\"); // 输出：3.1415 document.write(Math.acos(0.5) + \"&lt;br&gt;\"); // 输出：1.0471975511965979 document.write(Math.ceil(1.45) + \"&lt;br&gt;\"); // 输出：2 document.write(Math.exp(1) + \"&lt;br&gt;\"); // 输出：2.718281828459045 document.write(Math.floor(5.99) + \"&lt;br&gt;\"); // 输出：5 document.write(Math.log(6) + \"&lt;br&gt;\"); // 输出：1.791759469228055 document.write(Math.max(4, 8, 1, 9) + \"&lt;br&gt;\"); // 输出：9 document.write(Math.min(4, 8, 1, 9) + \"&lt;br&gt;\"); // 输出：1 document.write(Math.random() + \"&lt;br&gt;\"); // 输出：0.9172594288928195 document.write(Math.pow(2, 3) + \"&lt;br&gt;\"); // 输出：8 document.write(Math.sign(-123) + \"&lt;br&gt;\"); // 输出：-1 document.write(Math.sqrt(125) + \"&lt;br&gt;\"); // 输出：11.180339887498949 读后有收获可以请作者喝咖啡","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[{"name":"JSMath对象","slug":"JSMath对象","permalink":"https://屵.com/tags/JSMath%E5%AF%B9%E8%B1%A1/"}]},{"title":"JS日期对象","slug":"jsdate","date":"2022-03-30T14:14:37.000Z","updated":"2022-03-30T14:30:46.956Z","comments":true,"path":"archives/2d05ffe6.html","link":"","permalink":"https://屵.com/archives/2d05ffe6.html","excerpt":"","text":"JS Date 对象Date 对象是 JavaScript 内置的对象，通过它您可以访问计算机系统的时间，此外，Date 对象中还提供了多种用于管理、操作和格式化时间/日期的方法。 创建 Date 对象在开始处理时间和日期之前，我们需要先创建一个 Date 对象。与其他对象（数组对象、字符串对象等）不同，Date 对象不能直接声明，必须通过 Date() 函数定义。 JavaScript 中提供了四种不同的方法来创建 Date 对象，如下所示 var time = new Date(); var time = new Date(milliseconds); var time = new Date(datestring); var time = new Date(year, month, date[, hour, minute, second, millisecond]); 参数说明如下： 不提供参数：若调用 Date() 函数时不提供参数，则创建一个包含当前时间和日期的 Date 对象； milliseconds（毫秒）：若提供一个数值作为参数，则会将这个参数视为一个以毫秒为单位的时间值，并返回自 1970-01-01 00:00:00 起，经过指定毫秒数的时间，例如 new Date(5000) 会返回一个 1970-01-01 00:00:00 经过 5000 毫秒之后的时间； datestring（日期字符串）：若提供一个字符串形式的日期作为参数，则会将其转换为具体的时间，日期的字符串形式有两种，如下所示： YYYY/MM/dd HH:mm:ss（推荐）：若省略时间部分，则返回的 Date 对象的时间为 00:00:00； YYYY-MM-dd HH:mm:ss：若省略时间部分，则返回的 Date 对象的时间为 08:00:00（加上本地时区），若不省略，在 IE 浏览器中会转换失败。 将具体的年月日、时分秒转换为 Date 对象，其中： year：表示年，为了避免错误的产生，推荐使用四位的数字来表示年份； month：表示月，0 代表 1 月，1 代表 2 月，以此类推； date：表示月份中的某一天，1 代表 1 号，2 代表 2 号，以此类推； hour：表示时，以 24 小时制表示，取值范围为 0 ~ 23； minute：表示分，取值范围为 0 ~ 59； second：表示秒，取值范围为 0 ~ 59； millisecond：表示毫秒，取值范围为 0 ~ 999。var time1 = new Date(); var time2 = new Date(1517356800000); var time3 = new Date(\"2022/03/30 10:22:14\"); var time4 = new Date(2099, 9, 12, 15, 16, 17); document.write(time1 + \"&lt;br&gt;\"); // 输出：Tue Mar 22 2022 10:22:52 GMT+0800 (中国标准时间) document.write(time2 + \"&lt;br&gt;\"); // 输出：Wed Jan 31 2018 08:00:00 GMT+0800 (中国标准时间) document.write(time3 + \"&lt;br&gt;\"); // 输出：Tue Mar 30 2022 10:22:14 GMT+0800 (中国标准时间) document.write(time4 + \"&lt;br&gt;\"); // 输出：Mon Oct 12 2099 15:16:17 GMT+0800 (中国标准时间) Date 对象中的属性下表中列举了 Date 属性中提供的属性及其描述： 属性 描述 constructor 返回创建 Date 对象的原型函数 prototype 通过该属性您可以向对象中添加属性和方法 var time = new Date(); Date.prototype.name = null; time.name = \"JavaScript\"; document.write(time.constructor + \"&lt;br&gt;\"); // 输出：function Date() { [native code] } document.write(time.name + \"&lt;br&gt;\"); // 输出：JavaScript Date 对象中的方法 Date 对象中的方法 方法 描述 getDate() 从 Date 对象返回一个月中的某一天 (1 ~ 31) getDay() 从 Date 对象返回一周中的某一天 (0 ~ 6) getMonth() 从 Date 对象返回月份 (0 ~ 11) getFullYear() 从 Date 对象返回四位数字的年份 getYear() 已废弃，请使用 getFullYear() 方法代替 getHours() 返回 Date 对象的小时 (0 ~ 23) getMinutes() 返回 Date 对象的分钟 (0 ~ 59) getSeconds() 返回 Date 对象的秒数 (0 ~ 59) getMilliseconds() 返回 Date 对象的毫秒(0 ~ 999) getTime() 返回 1970 年 1 月 1 日至今的毫秒数 getTimezoneOffset() 返回本地时间与格林威治标准时间 (GMT) 的分钟差 getUTCDate() 根据通用时间从 Date 对象返回月中的一天 (1 ~ 31) getUTCDay() 根据通用时间从 Date 对象返回周中的一天 (0 ~ 6) getUTCMonth() 根据通用时间从 Date 对象返回月份 (0 ~ 11) getUTCFullYear() 根据通用时间从 Date 对象返回四位数的年份 getUTCHours() 根据通用时间返回 Date 对象的小时 (0 ~ 23) getUTCMinutes() 根据通用时间返回 Date 对象的分钟 (0 ~ 59) getUTCSeconds() 根据通用时间返回 Date 对象的秒钟 (0 ~ 59) getUTCMilliseconds() 根据通用时间返回 Date 对象的毫秒(0 ~ 999) parse() 返回1970年1月1日午夜到指定日期（字符串）的毫秒数 setDate() 设置 Date 对象中月的某一天 (1 ~ 31) setMonth() 设置 Date 对象中月份 (0 ~ 11) setFullYear() 设置 Date 对象中的年份（四位数字） setYear() 已废弃，请使用 setFullYear() 方法代替 setHours() 设置 Date 对象中的小时 (0 ~ 23) setMinutes() 设置 Date 对象中的分钟 (0 ~ 59) setSeconds() 设置 Date 对象中的秒钟 (0 ~ 59) setMilliseconds() 设置 Date 对象中的毫秒 (0 ~ 999) setTime() 以毫秒设置 Date 对象 setUTCDate() 根据通用时间设置 Date 对象中月份的一天 (1 ~ 31) setUTCMonth() 根据通用时间设置 Date 对象中的月份 (0 ~ 11) setUTCFullYear() 根据通用时间设置 Date 对象中的年份（四位数字） setUTCHours() 根据通用时间设置 Date 对象中的小时 (0 ~ 23) setUTCMinutes() 根据通用时间设置 Date 对象中的分钟 (0 ~ 59) setUTCSeconds() 根据通用时间设置 Date 对象中的秒钟 (0 ~ 59) setUTCMilliseconds() 根据通用时间设置 Date 对象中的毫秒 (0 ~ 999) toSource() 返回该对象的源代码 toString() 把 Date 对象转换为字符串 toTimeString() 把 Date 对象的时间部分转换为字符串 toDateString() 把 Date 对象的日期部分转换为字符串 toGMTString() 已废弃，请使用 toUTCString() 方法代替 toUTCString() 根据通用时间，把 Date 对象转换为字符串 toLocaleString() 根据本地时间格式，把 Date 对象转换为字符串 toLocaleTimeString() 根据本地时间格式，把 Date 对象的时间部分转换为字符串 toLocaleDateString() 根据本地时间格式，把 Date 对象的日期部分转换为字符串 UTC() 根据通用时间返回 1970 年 1 月 1 日 到指定日期的毫秒数 valueOf() 返回 Date 对象的原始值 var time = new Date(); document.write(time.getDate() + \"&lt;br&gt;\"); // 输出：22 document.write(time.getDay() + \"&lt;br&gt;\"); // 输出：5 document.write(time.getFullYear() + \"&lt;br&gt;\"); // 输出：2022 document.write(time.getHours() + \"&lt;br&gt;\"); // 输出：11 document.write(time.getMonth() + \"&lt;br&gt;\"); // 输出：2 document.write(time.getTime() + \"&lt;br&gt;\"); // 输出：1647916764940 document.write(time.getUTCDate() + \"&lt;br&gt;\"); // 输出：22 document.write(time.toDateString() + \"&lt;br&gt;\"); // 输出：Tue Mar 22 2022 document.write(time.toString() + \"&lt;br&gt;\"); // 输出：Tue Mar 22 2022 10:39:24 GMT+0800 (中国标准时间) document.write(time.toLocaleDateString() + \"&lt;br&gt;\"); // 输出：2022/3/22 document.write(time.toLocaleTimeString() + \"&lt;br&gt;\"); // 输出：10:39:24 document.write(time.toLocaleString() + \"&lt;br&gt;\"); // 输出：2022/3/22 10:39:24 读后有收获可以请作者喝咖啡","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[{"name":"JS日期对象","slug":"JS日期对象","permalink":"https://屵.com/tags/JS%E6%97%A5%E6%9C%9F%E5%AF%B9%E8%B1%A1/"}]},{"title":"JS对象","slug":"jsobject","date":"2022-03-30T13:57:45.000Z","updated":"2022-03-30T14:12:35.180Z","comments":true,"path":"archives/e0e6a3e3.html","link":"","permalink":"https://屵.com/archives/e0e6a3e3.html","excerpt":"","text":"JavaScript 是一种面向对象的编程语言，在 JavaScript 中几乎所有的东西都是对象。因此，要想有效的使用 JavaScript，首先需要了解对象的工作原理以及如何创建并使用对象 我们可以将对象看作是一个属性的无序集合，每个属性都有一个名称和值（键/值对）。对象类似与数组，不同的是对象中的索引是自定义的，例如 name（姓名）、age（年龄）、gender（性别）等。 JS 创建对象JS 创建对象您可以使用花括号 { } 来创建对象，{ } 中用来定义对象中的属性。属性是一个个键:值 对的组合，其中键（属性名称）始终是字符串类型的，而值（属性值）则可以是任意类型，例如字符串、数组、函数或其它对象等。不同的属性之间使用逗号进行分隔。 var person = { name: \"Peter\", age: 28, gender: \"Male\", displayName: function() { document.write(this.name); } }; 提示：在对象中定义的函数通常被称为方法。 上面示例中创建了一个名为 person 的对象，该对象中包含三个属性 name、age、gender 和一个方法 displayName()。displayName() 方法中的 this.name 表示访问当前对象中的 name 属性，会被 JavaScript 解析为 person.name。 在定义对象时，属性名称虽然是字符串类型，但通常不需要使用引号来定义，但是以下三种情况则需要为属性名添加引号： 属性名为 JavaScript 中的保留字； 属性名中包含空格或特殊字符（除字母、数字、_ 和 $ 以外的任何字符）； 属性名以数字开头。var person = { \"first name\": \"Peter\", \"current age\": 28, gender: \"Male\" }; 访问对象的属性要访问或获取属性的值，您可以使用 对象名.属性名 或者 对象名[“属性名”] 的形式，如下例所示： var person = { name: \"Peter\", age: 28, gender: \"Male\", displayName: function() { document.write(this.name); } } document.write(\"姓名：\" + person.name + \"&lt;br&gt;\"); // 输出：姓名：Peter document.write(\"年龄：\" + person[\"age\"]); // 输出：年龄：28 在访问对象属性时，使用 对象名.属性名 的形式更易于代码的编写，但并不是所有情况下都可以使用。如果属性名中包含空格或者特殊字符，则不能使用 对象名.属性名 的形式来访问对象属性，必须使用 对象名[“属性名”] 的形式才行，如下例所示： var person = { \"first name\": \"Peter\", \"current age\": 28, gender: \"Male\" }; document.write(person[\"first name\"]); // 输出：Peter document.write(person.current age); // 报错：missing ) after argument list 使用 对象名[“属性名”] 的形式访问对象属性相对比较灵活，您除了可以直接通过属性名访问属性外，还可以将属性名称赋值给变量，然后再通过这个变量来访问属性的值，如下所示： var person = { name: \"Peter\", age: 28, gender: \"Male\" }; var key = \"age\"; document.write(person[key]); // 输出：28 设置修改对象的属性使用 对象名.属性名 或者 对象名[“属性名”] 的形式除了可以获取对象的属性值外，也可以用来设置或修改对象的属性值，如下例所示： var person = { name: \"Peter\", age: 28, gender: \"Male\" }; person.phone = \"19912345678\"; person.age = 20; person[\"name\"] = \"Peter Parker\"; for (var key in person) { document.write(key + \"：\" + person[key] + \"&lt;br&gt;\") } 输出结果如下所示： name：Peter Parkerage：20gender：Malephone：19912345678 JS 删除对象的属性您可以使用 delete 语句来删除对象中的属性 var person = { name: \"Peter\", age: 28, gender: \"Male\", phone: \"15012345678\" }; delete person.gender; delete person[\"phone\"]; for (var key in person) { document.write(key + \"：\" + person[key] + \"&lt;br&gt;\") } 输出结果如下所示： name：Peterage：28 提示：delete 语句是从对象中删除指定属性的唯一方式，而将属性值设置为 undefined 或 null 仅会更改属性的值，并不会将其从对象中删除。 JS 调用对象的方法var person = { name: \"Peter\", age: 28, gender: \"Male\", displayName: function() { document.write(this.name); } }; person.displayName(); // 输出：Peter person[\"displayName\"](); // 输出：Peter JS Number对象在 JavaScript 中您可以使用十进制、十六进制或八进制表示法来表示整数或浮点数。与其它编程语言不同，JavaScript 中的数字并不区分整数和浮点数，统一使用 IEEE754 标准（二进制浮点数算术标准）的 64 位浮点格式表示数字，能表示的最大值（Number.MAX_VALUE）为 ±1.7976931348623157e+308，最小值（Number.MIN_VALUE）为 ±5e-324。 var x = 123; // 整数 var y = 3.14; // 浮点数 var z = 0xff; // 十六进制数：255 对于比较大的数字可以使用指数表示法来表示，例如 6.02e+23 等于 6.02 x 10²³ var x = 1.57e4; // 等于 15700 var y = 4.25e+6; // 等于 4250000 var z = 4.25e-6; // 等于 0.00000425 提示：JavaScript 中能够表示的最大的整数是 2⁵³ - 1，即 9007199254740991，能够表示的最小整数是 -(2⁵³ - 1)，即 -9007199254740991。 也可以使用八进制或十六进制表示法来表示数字，其中八进制表示法使用 0 作为前缀，十六进制表示法使用 0x 作为前缀 var a = 0377; // 等于 255 var b = 0123; // 等于 83 var c = 0xff; // 等于 255 var d = 0xb4; // 等于 180 ±Infinity（无穷）Infinity 是一个特殊的值，表示无穷大。当一个表达式的运算结果超过了 JavaScript 所能表示的数字上限或下限时，JavaScript 就会使用 Infinity 或 -Infinity 表示这个结果，其中 Infinity 表示正无穷大，-Infinity 表示负无穷大。 var a = 5 / 0; // 等于 Infinity var b = -5 / 0; // 等于 -Infinity NaN（非数字）NaN 同样是 JavaScript 中的一个特殊值，用来表示某个值不是数字。NaN 不等于（通过 ==、!=、===、!=== 比较）其它任何值（包括另外一个 NaN 值），使用 isNaN() 函数可以判断一个数是否为 NaN。 以下几种操作会返回 NaN： 使用函数无法将参数转换为数字时会返回 NaN，例如 parseInt(“abc”)、new Number(“abc”)； 结果不是实数的数学运算，例如 Math.sqrt(-1)； 任何操作数中包含 NaN 的表达式，例如 5 * NaN； 涉及字符串的非加法运算，且字符串无法自动转换为数字，例如 “foo” / 5。 Number 对象Number 对象是原始数值的包装对象，创建 Number 对象的语法格式如下： var myNum = new Number(value); var myNum = Number(value); 其中 value 为要创建的 Number 对象的数值，若 value 为一个非数字的值，则会尝试将其转换为数字，若转换失败则会返回 NaN。 当 Number() 函数和 new 运算符一起使用时，会创建一个新的 Number 对象。如果不用 new 运算符，把 Number() 当作一个函数来调用，则会将其中的参数转换为一个数值，并且返回这个值（如果转换失败，则返回 NaN）。 var a = new Number(\"123\"); var b = Number(\"456\"); var c = 789; var d = new Number(\"abc\"); document.write(typeof a + \"&lt;br&gt;\"); // 输出：object document.write(typeof b + \"&lt;br&gt;\"); // 输出：number document.write(typeof c + \"&lt;br&gt;\"); // 输出：number document.write(d + \"&lt;br&gt;\"); // 输出：NaN Number 属性Number 对象中提供了一些属性，如下表所示： 属性 描述 Number.MAX_VALUE JavaScript 中所能表示的最大值 Number.MIN_VALUE JavaScript 中所能表示的最小值 Number.NaN 非数字 Number.NEGATIVE_INFINITY 负无穷，在溢出时返回 Number.POSITIVE_INFINITY 正无穷，在溢出时返回 Number.EPSILON 表示 1 与 Number 所能表示的大于 1 的最小浮点数之间的差 Number.MIN_SAFE_INTEGER 最小安全整数，即 -9007199254740991 Number.MAX_SAFE_INTEGER 最大安全整数，即 9007199254740991 Number 方法除了属性外，Number 对象中还提供了一些方法，如下表所示： 方法 描述 Number.parseFloat() 将字符串转换成浮点数，和全局方法 parseFloat() 作用相同 Number.parseInt() 将字符串转换成整型数字，和全局方法 parseInt() 作用相同 Number.isFinite() 判断 Number 对象是否为有穷数 Number.isInteger() 判断 Number 对象是否为整数 Number.isNaN() 判断 Number 对象是否为 NaN 类型 vNumber.isSafeInteger() 判断 Number 对象是否为安全整数，即范围为 -(2⁵³ - 1)到 2⁵³ - 1 之间的整数 Number.toString() 把 Number 对象转换为字符串，使用指定的基数 Number.toLocaleString() 把 Number 对象转换为字符串，使用本地数字格式顺序 Number.toFixed() 把 Number 对象转换为字符串，结果的小数点后有指定位数的数字 vNumber.toExponential() 把 Number 对象的值转换为指数计数法 Number.toPrecision() 把 Number 对象格式化为指定的长度 Number.valueOf() 返回一个 Number 对象的基本数字值 JS String 对象JavaScript String 对象用于处理字符串，其中提供了大量操作字符串的方法，以及一些属性 创建 String 对象的语法格式如下： var val = new String(value); var val = String(value); 其中参数 value 为要创建的字符串或字符串对象。JavaScript 中，字符串和字符串对象之间能够自由转换，因此不论是创建字符串对象还是直接声明字符串类型的变量，都可以直接使用字符串对象中提供的方法和属性。 String 对象中的属性下表中列举了 String 对象中提供的属性及其描述信息： 属性 描述 constructor 获取创建此对象的 String() 函数的引用 length 获取字符串的长度 prototype 通过该属性您可以向对象中添加属性和方法 示例代码如下： var str = new String('JavaScript'); String.prototype.name = null; str.name = \"Hello World!\"; document.write(str.constructor + \"&lt;br&gt;\"); // 输出：function String() { [native code] } document.write(str.length + \"&lt;br&gt;\"); // 输出：10 document.write(str.name); // 输出：Hello World! String 对象中的方法下表中列举了 String 对象中提供的方法及其描述信息： 方法 描述 anchor() 创建一个 HTML 锚点，即生成一个标签，标签的 name 属性为 anchor() 方法中的参数 big() 用大号字体显示字符串 blink() 显示闪动的字符串 bold() 使用粗体显示字符串 charAt() 返回在指定位置的字符 charCodeAt() 返回指定字符的 Unicode 编码 concat() 拼接字符串 fixed() 以打字机文本显示字符串 fontcolor() 使用指定的颜色来显示字符串 fontsize() 使用指定的尺寸来显示字符串 fromCharCode() 将字符编码转换为一个字符串 indexOf() 检索字符串，获取给定字符串在字符串对象中首次出现的位置 italics() 使用斜体显示字符串 lastIndexOf() 获取给定字符串在字符串对象中最后出现的位置 link() 将字符串显示为链接 localeCompare() 返回一个数字，并使用该数字来表示字符串对象是大于、小于还是等于给定字符串 match() 根据正则表达式匹配字符串中的字符 replace() 替换与正则表达式匹配的子字符串 search() 获取与正则表达式相匹配字符串首次出现的位置 slice() 截取字符串的片断，并将其返回 small() 使用小字号来显示字符串 split() 根据给定字符将字符串分割为字符串数组 strike() 使用删除线来显示字符串 sub() 把字符串显示为下标 substr() 从指定索引位置截取指定长度的字符串 substring() 截取字符串中两个指定的索引之间的字符 sup() 把字符串显示为上标 toLocaleLowerCase() 把字符串转换为小写 toLocaleUpperCase() 把字符串转换为大写 toLowerCase() 把字符串转换为小写 toUpperCase() 把字符串转换为大写 toString() 返回字符串 valueOf() 返回某个字符串对象的原始值 var str = new String('JavaScript教程'); document.write(str.anchor(\"myanchor\") + \"&lt;br&gt;\"); // 生成一段 HTML 代码：&lt;a name=\"myanchor\"&gt;JavaScript教程&lt;/a&gt; document.write(str.big() + \"&lt;br&gt;\"); // 生成一段 HTML 代码：&lt;big&gt;JavaScript教程&lt;/big&gt; document.write(str.blink() + \"&lt;br&gt;\"); // 生成一段 HTML 代码：&lt;blink&gt;JavaScript教程&lt;/blink&gt; document.write(str.bold() + \"&lt;br&gt;\"); // 生成一段 HTML 代码：&lt;b&gt;JavaScript教程&lt;/b&gt; document.write(str.charAt(10) + \"&lt;br&gt;\"); // 获取 str 中的第 11 个字符，输出：教 document.write(str.charCodeAt(10) + \"&lt;br&gt;\"); // 获取 str 中第 11 个字符的 Unicode 编码，输出：25945 document.write(str.concat(\" String 对象\") + \"&lt;br&gt;\"); // 将字符串“ String 对象”拼接到字符串 str 之后，输出：JavaScript教程 String 对象 document.write(str.fixed() + \"&lt;br&gt;\"); // 生成一段 HTML 代码：&lt;tt&gt;JavaScript教程&lt;/tt&gt; document.write(str.fontcolor(\"red\") + \"&lt;br&gt;\"); // 生成一段 HTML 代码：&lt;font color=\"red\"&gt;JavaScript教程&lt;/font&gt; document.write(str.fontsize(2) + \"&lt;br&gt;\"); // 生成一段 HTML 代码：&lt;font size=\"2\"&gt;JavaScript教程&lt;/font&gt; document.write(String.fromCharCode(72,69,76,76,79) + \"&lt;br&gt;\"); // 将 Unicode 编码转换为具体的字符，输出：HELLO document.write(str.indexOf(\"Script\") + \"&lt;br&gt;\"); // 获取字符串“Script”在 str 中首次出现的为，输出：4 document.write(str.italics() + \"&lt;br&gt;\"); // 生成一段 HTML 代码：&lt;i&gt;JavaScript教程&lt;/i&gt; document.write(str.lastIndexOf(\"a\") + \"&lt;br&gt;\"); // 获取字符串“a”在 str 中最后一次出现的位置，输出 3 document.write(str.link(\"http://c.biancheng.net/\") + \"&lt;br&gt;\"); // 生成一段 HTML 代码：&lt;a href=\"http://c.biancheng.net/\"&gt;JavaScript教程&lt;/a&gt; document.write(str.localeCompare(\"JavaScript\") + \"&lt;br&gt;\"); // 比较字符串对象与给定字符串，返回：1 document.write(str.match(/[abc]/g) + \"&lt;br&gt;\"); // 根据正则 /[abc]/g 检索 str，返回：a,a,c document.write(str.replace(/[abc]/g, \"Y\") + \"&lt;br&gt;\"); // 使用字符串“Y”替换正则 /[abc]/g 匹配的字符，返回：JYvYSYript教程 document.write(str.search(/[Script]/g) + \"&lt;br&gt;\"); // 获取与正则匹配的字符串首次出现的位置，返回：4 document.write(str.slice(6,11) + \"&lt;br&gt;\"); // 截取字符串（获取 str 中第 7 到第 11 个字符），返回：ript教 document.write(str.small() + \"&lt;br&gt;\"); // 生成一段 HTML 代码：&lt;small&gt;JavaScript教程&lt;/small&gt; document.write(str.split(\"a\") + \"&lt;br&gt;\"); // 根据“a”将字符串 str 拆分为数组，返回：J,v,Script教程 document.write(str.strike() + \"&lt;br&gt;\"); // 生成一段 HTML 代码：&lt;strike&gt;JavaScript教程&lt;/strike&gt; document.write(str.sub() + \"&lt;br&gt;\"); // 生成一段 HTML 代码：&lt;sub&gt;JavaScript教程&lt;/sub&gt; document.write(str.substr(3, 7) + \"&lt;br&gt;\"); // 从第 4 个字符开始，向后截取 7 个字符，返回：aScript document.write(str.substring(3, 7) + \"&lt;br&gt;\"); // 截取字符串（获取 str 中第 4 到第 7 个字符），返回：aScr document.write(str.sup() + \"&lt;br&gt;\"); // 生成一段 HTML 代码：&lt;sup&gt;JavaScript教程&lt;/sup&gt; document.write(str.toLocaleLowerCase() + \"&lt;br&gt;\"); // 返回：javascript教程 document.write(str.toLocaleUpperCase() + \"&lt;br&gt;\"); // 返回：JAVASCRIPT教程 document.write(str.toLowerCase() + \"&lt;br&gt;\"); // 返回：javascript教程 document.write(str.toUpperCase() + \"&lt;br&gt;\"); // 返回：JAVASCRIPT教程 document.write(str.toString() + \"&lt;br&gt;\"); // 返回：JavaScript教程 document.write(str.valueOf() + \"&lt;br&gt;\"); // 返回：JavaScript教程 特殊字符通过前面的学习我们知道，可以使用单引号和双引号来定义字符串，但如果字符串中也需要添加单引号或双引号该怎么办呢？我们可以使用反斜线\\来转义字符串中的引号 var str1 = \"He said \\\"Goodbye\\\"\"; var str2 = 'it\\'s okay'; 除了单引号和双引号外，JavaScript 中还提供了一些能够使用反斜线转义的特殊字符 代码 输出 代码 输出 ' 单引号 \\r 回车 \" 双引号 \\t tab \\ 反斜线本身 \\b 空格 \\n 换行 \\f 换页 JS Array对象数组是值的有序集合，数组中的每个值称为一个元素，每个元素在数组中都有一个数字位置，称为索引，索引从 0 开始，依次递增。在 JavaScript 中，您可以使用 Array 对象定义数组，此外，Array 对象中还提供了各种有关数组的属性和方法。创建 Array 对象的语法格式如下： var arr = new Array(values); var arr = Array(values); 其中，values 为数组中各个元素组成的列表，多个元素之间使用逗号分隔。 除了可以使用 Array() 函数来定义数组外，您也可以直接使用方括号[ ]来定义数组，[ ]中为数组中的各个元素，多个元素之间使用逗号,进行分隔。示例代码如下： var fruits = [ \"apple\", \"orange\", \"mango\" ]; console.log(fruits); // 输出：(3) [\"apple\", \"orange\", \"mango\"] 您可以通过数组的索引来访问数组中的各个元素，示例代码如下： var fruits = [ \"apple\", \"orange\", \"mango\" ]; document.write(fruits[0] + \"&lt;br&gt;\"); // 输出：apple document.write(fruits[1] + \"&lt;br&gt;\"); // 输出：orange document.write(fruits[2] + \"&lt;br&gt;\"); // 输出：mango Array 对象中的属性下表中列举了 Array 对象中提供的属性及其描述信息： 属性 描述 constructor 返回创建数组对象的原型函数 length 设置或返回数组中元素的个数 prototype 通过该属性您可以向对象中添加属性和方法 var cars = new Array(\"Saab\", \"Volvo\", \"BMW\"); Array.prototype.name = null; cars.name = \"JavaScript\"; document.write(cars.constructor + \"&lt;br&gt;\"); // 输出：function Array() { [native code] } document.write(cars.length + \"&lt;br&gt;\"); // 输出：3 document.write(cars.name + \"&lt;br&gt;\"); Array 对象中的方法下表中列举了 Array 对象中提供的方法及其描述信息： 方法 描述 concat() 拼接两个或更多的数组，并返回结果 copyWithin() 从数组的指定位置拷贝元素到数组的另一个指定位置中 entries() 返回数组的可迭代对象 every() 检测数值元素的每个元素是否都符合条件 fill() 使用一个固定值来填充数组 filter() 检测数值元素，并返回符合条件所有元素的数组 find() 返回符合传入函数条件的数组元素 findIndex() 返回符合传入函数条件的数组元素索引 forEach() 数组每个元素都执行一次回调函数 from() 通过给定的对象中创建一个数组 includes() 判断一个数组是否包含一个指定的值 indexOf() 搜索数组中的元素，并返回它所在的位置 isArray() 判断对象是否为数组 join() 把数组的所有元素放入一个字符串 keys() 返回数组的可迭代对象，包含原始数组的键（key） lastIndexOf() 搜索数组中的元素，并返回它最后出现的位置 map() 通过指定函数处理数组的每个元素，并返回处理后的数组 pop() 删除数组的最后一个元素并返回删除的元素 push() 向数组的末尾添加一个或更多元素，并返回数组的长度 reduce() 累加（从左到右）数组中的所有元素，并返回结果 reduceRight() 累加（从右到左）数组中的所有元素，并返回结果 reverse() 反转数组中元素的顺序 shift() 删除并返回数组的第一个元素 slice() 截取数组的一部分，并返回这个新的数组 some() 检测数组元素中是否有元素符合指定条件 sort() 对数组的元素进行排序 splice() 从数组中添加或删除元素 toString() 把数组转换为字符串，并返回结果 unshift() 向数组的开头添加一个或多个元素，并返回新数组的长度 valueOf() 返回数组对象的原始值 var fruits = [\"Orange\", \"Banana\", \"Apple\", \"Papaya\", \"Mango\"]; document.write(fruits.entries() + \"&lt;br&gt;\"); // 返回：[object Array Iterator] document.write(fruits.includes(\"Apple\") + \"&lt;br&gt;\"); // 返回：true document.write(fruits.fill(\"grape\") + \"&lt;br&gt;\"); // 返回：grape,grape,grape,grape,grape var fruits = [\"Orange\", \"Banana\", \"Apple\", \"Papaya\", \"Mango\"]; document.write(fruits.indexOf(\"Mango\") + \"&lt;br&gt;\"); // 返回：4 document.write(Array.isArray(fruits) + \"&lt;br&gt;\"); // 返回：true document.write(fruits.join(\"-\") + \"&lt;br&gt;\"); // 返回：Orange-Banana-Apple-Papaya-Mango document.write(fruits.lastIndexOf(\"Banana\") + \"&lt;br&gt;\"); // 返回：1 document.write(fruits.pop() + \"&lt;br&gt;\"); // 返回：Mango document.write(fruits.push(\"Watermelon\") + \"&lt;br&gt;\"); // 返回：5 document.write(fruits.unshift(\"Lemon\",\"Pineapple\") + \"&lt;br&gt;\"); // 返回：7 document.write(fruits.slice(1, 5) + \"&lt;br&gt;\"); // 返回：Pineapple,Orange,Banana,Apple document.write(fruits.sort() + \"&lt;br&gt;\"); // 返回：Apple,Banana,Lemon,Orange,Papaya,Pineapple,Watermelon document.write(fruits.valueOf() + \"&lt;br&gt;\"); // 返回：Apple,Banana,Lemon,Orange,Papaya,Pineapple,Watermelon 读后有收获可以请作者喝咖啡","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[{"name":"JS对象","slug":"JS对象","permalink":"https://屵.com/tags/JS%E5%AF%B9%E8%B1%A1/"}]},{"title":"JS类型转换","slug":"jstypecast","date":"2022-03-30T09:11:39.000Z","updated":"2022-03-30T13:55:11.118Z","comments":true,"path":"archives/d4879a5b.html","link":"","permalink":"https://屵.com/archives/d4879a5b.html","excerpt":"","text":"JavaScript 中有五种基本数据类型（其中包括 String、Number、Boolean、Function、Symbol）、三种对象类型（其中包括 Object、Date、Array）和两种特殊类型（其中包括 Null、Undefined）。不同的类型之间运算需要先对数据的类型进行转换，类型转换是将一种数据类型转换为另一种数据类型的过程 在 JavaScript 有两种类型转换的方式，分别是隐式类型转换和强制类型转换（也叫显式类型转换） JS 隐式类型转换隐式转换就是自动转换，通常发生在一些数学运算中。因为 JavaScript 是一种弱类型的语言，在一个表达式中，运算符两边的类型可以不同（比如一个字符串和一个数字相加），JavaScript 解释器会在运算之前将它们的类型进行转换 var str = \"https://www.jianshu.com/u/32841c0369fb#js\"; var num = 123; var res = str + num; document.write(typeof res); // 输出：string document.write(res); // 输出：https://www.jianshu.com/u/32841c0369fb#js123 通过运行结果可以看出，将一个字符串与一个数字相加，会得到一个字符串类型的值。如果是在 C语言或者 Java 语言中的话，上面的运算会因为运算符两边的数据类型不一致而导致报错，但在 JavaScript 中则不会，因为在运算之前 JavaScript 解释器会将上面的 num 变量隐式的转换为字符串类型，之后再进行运算。JavaScript 中，表达式中包含以下运算符时，会发生隐式类型转换： 算术运算符：加（+）、减（-）、乘（*）、除（/）、取模（%）； 逻辑运算符：逻辑与（&amp;&amp;）、逻辑或（||）、逻辑非（!）； 字符串运算符：+、+=。document.write(\"3\" - 2); // 输出：1 document.write(\"3\" + 2); // 输出：\"32\" document.write(3 + \"2\"); // 输出：\"32\" document.write(\"3\" * \"2\"); // 输出：6 document.write(\"10\" / \"2\"); // 输出：5 document.write(1 + true); // 输出：2 document.write(1 + false); // 输出：1 document.write(1 + undefined); // 输出：NaN document.write(3 + null); // 输出：3 document.write(\"3\" + null); // 输出：\"3null\" document.write(true + null); // 输出：1 document.write(true + undefined); // 输出：NaN 通过运行结果可以得出： 字符串加数字，数字会转换为字符串； 数字减字符串，字符串会转换为数字，如果字符串无法转换为数字（例如”abc”、”JavaScript”），则会转换为 NaN； 字符串减数字，字符串会转换为数字，如果字符串无法转换为数字，则会转换为 NaN； 乘、除运算时，也会先将字符串转换为数字。 JS 强制类型转换与隐式类型转换相反，强制类型转换需要手动进行，在 JavaScript 中，强制类型转换主要是通过调用全局函数来实现的，例如 Number()、Boolean()、parseInt()、parseFloat() 等。 使用 Number() 函数Number() 函数的语法格式如下： Number(value); document.write(Number(\"10.5\")); // 输出：10.5 document.write(Number(true)); // 输出：1 document.write(Number(false)); // 输出：0 document.write(Number(null)); // 输出：0 在使用 Number() 函数时，有以下几点需要注意： 如果参数中只包含数字，将转换为十进制数字，忽略前导 0 以及前导空格，如果数字前面有负（-）号，那么-会保留在* 转换结果中，如果数字前面有加（+）号，转换后会删掉+号； 如果参数中包含有效浮点数字，将转换为对应的浮点数字，忽略前导 0 以及前导空格，同样对于数字前的正负号，会保留负号忽略正号； 如果参数中包含有效的十六进制数字，将转换为对应大小的十进制数字； 如果参数为空字符串，将转换为 0； 如果参数为布尔值，则将 true 转换为 1，将 false 转换为 0； 如果参数为 null，将转换为 0； 如果参数为 undefined，将转换为 NaN； 如果参数为 Date 对象，将转换为从 1970 年 1 月 1 日到执行转换时的毫秒数； 如果参数为函数、包含两个元素以上的数组对象以及除 Date 对象以外的其他对象，将转换为 NaN； 如果在参数前面包含了除空格、+和-以外的其他特殊符号或非数字字符，或在参数中间包含了包括空格、+和-的特殊符号或非数字字符，将转换为 NaN。 使用 parseInt() 函数parseInt() 函数的语法格式如下： parseInt(string, radix); 其中 string 为要转换的值，如果参数不是一个字符串，则会先将其转换为字符串，字符串开头的空白将会忽略；radix 为一个可选参数，表示字符串的基数，取值范围在 2 到 36 之间，例如将 radix 参数设置为 16，则表示将 string 转换为一个十六进制数。在使用 parseInt() 函数时，有以下几点需要注意： 解析字符串时，会忽略字符串前后的空格，如果字符串第一个字符为负号（-），那么负号会保留在转换结果中，如果字符串第一个字符为正号（+），那么转换后将忽略正号； 如果字符串前面为除空格、正号（+）、负号（-）以外的特殊符号或者除 a～f（或 A～F）之外的非数字字符，那么字符串将不会被解析，返回结果为 NaN； 在字符串中包含空格、小数点（.）等特殊符号或非数字的字符时，解析将在遇到这些字符时停止，并返回已解析的结果； 如果字符串是空字符串，返回结果为 NaN。 document.write(parseInt(\"1101\",2)); // 输出：13 document.write(parseInt(\"a37f\",16)); // 输出：41855 document.write(parseInt(\"123\")); // 输出：123 document.write(parseInt(\" 123\")); // 输出：123 使用 parseFloat() 函数parseFloat() 函数的语法格式如下： parseFloat(string); 其中 string 为要被转换为浮点数的值，如果转换失败，则会返回 NaN。 在使用 parseFloat() 函数时，有以下几点需要注意： 如果在解析的过程中遇到了正号（+）、负号（-）、数字（0-9）、小数点（.）、或科学计数法中的指数（e 或 E）以外的字符，则会忽略该字符以及之后的所有字符，并返回解析到的浮点数； 解析过程中若遇到多个小数点，则会在解析到第二个小数点时停止，并返回第二个小数点之前的解析结果； 解析过程中会忽略参数开头或末尾的空白字符； 如果参数的第一个字符不能被解析为数字，则会返回 NaN。document.write(parseFloat(\"312.456\")); // 输出：312.456 document.write(parseFloat(\"-3.12\")); // 输出：-3.12 document.write(parseFloat(\"+3.12\")); // 输出：3.12 document.write(parseFloat(\".12\")); // 输出：0.12 读后有收获可以请作者喝咖啡","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[{"name":"JS类型转换","slug":"JS类型转换","permalink":"https://屵.com/tags/JS%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"}]},{"title":"js作用域","slug":"jsscope","date":"2022-03-30T07:21:00.000Z","updated":"2022-05-14T01:06:16.038Z","comments":true,"path":"archives/589bdf59.html","link":"","permalink":"https://屵.com/archives/589bdf59.html","excerpt":"","text":"JS 全局作用域全局作用域是指变量可以在当前脚本的任意位置访问，拥有全局作用域的变量也被称为“全局变量”，一般情况下拥有以下特征的变量具有全局作用域： 最外层的函数和在最外层函数外面定义的变量拥有全局作用域； 所有未定义直接赋值的变量拥有全局作用域； 所有 window 对象的属性拥有全局作用域，例如 window.name、window.location、window.top 等。var str = \"Hello World!\"; function myFun(){ document.write(str); // 输出：Hello World! } myFun(); document.write(str); // 输出：Hello World! 实际情况下，所有具有全局作用域的变量都会被绑定到 window 对象中，成为 window 对象的一个属性var str = \"JavaScript\"; document.write(str); // 输出：JavaScript document.write(window.str); // 输出：JavaScript document.write(str === window.str); // 输出：true JS 局部作用域在函数内部声明的变量具有局部作用域，拥有局部作用域的变量也被称为“局部变量”，局部变量只能在其作用域中（函数内部）使用 function myFun(){ var str = \"Hello World!\"; document.write(str); // 输出：Hello World! } document.write(str); // 报错：str is not defined 在函数内定义的局部变量只有在函数被调用时才会生成，当函数执行完毕后会被立即销毁。 读后有收获可以请作者喝咖啡","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[{"name":"js作用域","slug":"js作用域","permalink":"https://屵.com/tags/js%E4%BD%9C%E7%94%A8%E5%9F%9F/"}],"author":"飞天码猪"},{"title":"JS事件","slug":"event","date":"2022-03-30T06:23:23.000Z","updated":"2022-03-30T07:18:45.349Z","comments":true,"path":"archives/3bae0aa7.html","link":"","permalink":"https://屵.com/archives/3bae0aa7.html","excerpt":"","text":"JS 事件JS 事件（event）是当用户与网页进行交互时发生的事情，例如单机某个链接或按钮、在文本框中输入文本、按下键盘上的某个按键、移动鼠标等等。当事件发生时，您可以使用 JavaScript 中的事件处理程序（也可称为事件监听器）来检测并执行某些特定的程序 鼠标键盘事件 事件 描述 onclickondbclick 点击鼠标时触发此事件双击鼠标时触发此事件 onmousedownonmouseup 按下鼠标时触发此事件鼠标按下后又松开时触发此事件 onmouseoveronmousemoveonmouseout 当鼠标移动到某个元素上方时触发此事件移动鼠标时触发此事件当鼠标离开某个元素范围时触发此事件 onkeypress 当按下并松开键盘上的某个键时触发此事件 onkeydown 当按下键盘上的某个按键时触发此事件 onkeyup 当放开键盘上的某个按键时触发此事件 窗口事件 事件 描述 onabort 图片在下载过程中被用户中断时触发此事件 onbeforeunload 当前页面的内容将要被改变时触发此事件 onerror 出现错误时触发此事件 onload 页面内容加载完成时触发此事件 onmoveonresize 当移动浏览器的窗口时触发此事件当改变浏览器的窗口大小时触发此事件 onscroll 当滚动浏览器的滚动条时触发此事件 onstop 当按下浏览器的停止按钮或者正在下载的文件被中断时触发此事件 oncontextmenu 当弹出右键上下文菜单时触发此事件 onunload 改变当前页面时触发此事件 表单事件 事件 描述 onblur 当前元素失去焦点时触发此事件 onchange 当前元素失去焦点并且元素的内容发生改变时触发此事件 onfocus 当某个元素获得焦点时触发此事件 onreset 当点击表单中的重置按钮时触发此事件 onsubmit 当提交表单时触发此事件 事件绑定事件只有与 HTML 元素绑定之后才能被触发，为 HTML 元素绑定事件处理程序的方法由很多，最简单的就是通过 HTML 事件属性来直接绑定事件处理程序，例如 onclick、onmouseover、onmouseout 等属性。 以 onclick 属性为例，通过该属性我们可以为指定的 HTML 元素定义鼠标点击事件（即在该元素上单击鼠标左键时触发的事件），示例代码如下： &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;JavaScript&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;button type=\"button\" onclick=\"myBtn()\"&gt;按钮&lt;/button&gt; &lt;script type=\"text/javascript\"&gt; function myBtn(){ alert(\"Hello World!\"); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 也可以直接使用 JavaScript 中提供的内置函数来为指定元素绑定事件处理程序，如下例所示： &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;JavaScript&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;button type=\"button\" id=\"myBtn\"&gt;按钮&lt;/button&gt; &lt;script&gt; function sayHello() { alert('Hello World!'); } document.getElementById(\"myBtn\").onclick = sayHello; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; JS 事件示例一般情况下，事件可以分为四大类——鼠标事件、键盘事件、表单事件和窗口事件，另外还有一些其它事件。下面通过几个示例来简单介绍一些比较常用的事件。 onmouseover 事件 onmouseover 事件就是指当用户鼠标指针移动到元素上时触发的事件 &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;JavaScript&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;button type=\"button\" onmouseover=\"alert('您的鼠标已经移动到了该按钮上');\"&gt;请将鼠标移动至此处&lt;/button&gt;&lt;br&gt; &lt;a href=\"#\" onmouseover=\"myEvent()\"&gt;请将鼠标移动至此处&lt;/a&gt; &lt;script&gt; function myEvent() { alert('您的鼠标已经移动到了该链接上'); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; onmouseout 事件 onmouseout 事件与 onmouseover 事件正好相反，onmouseout 事件会在鼠标从元素上离开时触发 &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;JavaScript&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div style=\"width: 350px; height: 200px; border:1px solid black\" id=\"myBox\"&gt;&lt;/div&gt; &lt;script&gt; function myEvent() { alert('您的鼠标已经离开指定元素'); } document.getElementById(\"myBox\").onmouseout = myEvent; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; onkeydown 事件 onkeydown 事件是指当用户按下键盘上的某个按键时触发的事件 &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;JavaScript&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;input type=\"text\" onkeydown=\"myEvent()\"&gt; &lt;script&gt; function myEvent() { alert(\"您按下了键盘上的某个按钮\"); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; onkeyup 事件 onkeyup 事件是指当用户按下键盘上的某个按键并将其释放（即按下并松开某个按键）时触发的事件 &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;JavaScript&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;input type=\"text\" onkeyup=\"myEvent()\"&gt; &lt;script&gt; function myEvent() { alert(\"您按下了键盘上的某个按钮，并将其释放了\"); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 读后有收获可以请作者喝咖啡","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[{"name":"JS事件","slug":"JS事件","permalink":"https://屵.com/tags/JS%E4%BA%8B%E4%BB%B6/"}]},{"title":"JS函数","slug":"fuction","date":"2022-03-30T03:53:03.000Z","updated":"2022-03-30T06:18:57.140Z","comments":true,"path":"archives/1b43cb1d.html","link":"","permalink":"https://屵.com/archives/1b43cb1d.html","excerpt":"","text":"函数是一组执行特定任务（具有特定功能）的，可以重复使用的代码块，前面几节中用到的 alert()、write() 就是 JavaScript 中内置的函数。 除了使用内置函数外，我们也可以自行创建函数（自定义函数），然后在需要的地方调用这个函数，这样不仅可以避免编写重复的代码，还有利于代码的后期维护. JS 定义函数JS 函数声明需要以 function 关键字开头，之后为要创建的函数名称，function 关键字与函数名称之间使用空格分开，函数名之后为一个括号( )，括号中用来定义函数中要使用的参数（多个参数之间使用逗号,分隔开），一个函数最多可以有 255 个参数，最后为一个花括号{ }，花括号中用来定义函数的函数体（即实现函数的代码） function sayHello(name){ document.write(\"Hello \" + name); } 上面示例中定义了一个函数 sayHello()，该函数需要接收一个参数 name，调用该函数会在页面中输出“Hello …”。 JS 调用函数一旦定义好了一个函数，我们就可以在当前文档的任意位置来调用它。调用函数非常简单，只需要函数名后面加上一个括号即可，例如 alert()、write()。注意，如果在定义函数时函数名后面的括号中指定了参数，那么在调用函数时也需要在括号中提供对应的参数。 function sayHello(name){ document.write(\"Hello \" + name); } // 调用 sayHello() 函数 sayHello('Jinghai'); 运行结果为： Hello Jinghai JS 函数返回值在函数中可以使用 return 语句将一个值（函数的运行结果）返回给调用函数的程序，这个值可以是任何类型，例如数组、对象、字符串等。对于有返回值的函数，我们可以会使用一个变量来接收这个函数的返回值 function getSum(num1, num2){ return num1 + num2; } var sum1 = getSum(7, 12); // 函数返回值为：19 var sum2 = getSum(-5, 33); // 函数返回值为：28 一个函数只能有一个返回值，若要返回多个值则，则可以将值放入一个数组中，然后返回这个数组 function division(dividend, divisor){ var quotient = dividend / divisor; var arr = [dividend, divisor, quotient] return arr; } var res = division(100, 4) document.write(res[0]); // 输出：100 document.write(res[1]); // 输出：4 document.write(res[2]); // 输出：25 JS 函数表达式函数表达式与声明变量非常相似，是另外一种声明函数的形式，语法格式如下： var myfunction = function name(parameter_list){ // 函数中的代码 }; 参数说明如下： myfunction：变量名，可以通过它来调用等号之后的函数； name：函数名，可以省略（一般情况下我们也会将其省略），如果省略那么该函数就会成为一个匿名函数； parameter_list：为参数列表，一个函数最多可以有 255 个参数。// 函数声明 function getSum(num1, num2) { var total = num1 + num2; return total; } // 函数表达式 var getSum = function(num1, num2) { var total = num1 + num2; return total; }; 上面示例中的两个函数是等价的，它们的功能、返回值、调用方法都是相同的。 注意：在函数声明中，不需要在右花括号后放置分号，但若使用函数表达式就应该在表达式的最后以分号结尾。 函数声明和函数表达式虽然看起来非常相似，但它们的运行方式是不同的，如下例所示： declaration(); // 输出: function declaration function declaration() { document.write(\"function declaration\"); } expression(); // 报错：Uncaught TypeError: undefined is not a function var expression = function() { document.write(\"function expression\"); }; 如上例所示，如果函数表达式在定义之前被调用，会抛出异常（报错），但函数声明则可以成功运行。这是因为在程序执行前，JavaScript 会先对函数声明进行解析，因此无论是在函数声明前还是声明后调用函数都是可行的。而函数表达式则是将一个匿名函数赋值给一个变量，所以在程序还没有执行到该表达式之前，相当于函数还未定义，因此无法调用。 读后有收获可以请作者喝咖啡","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[{"name":"JS函数","slug":"JS函数","permalink":"https://屵.com/tags/JS%E5%87%BD%E6%95%B0/"}]},{"title":"JS方法","slug":"js-method","date":"2022-03-30T01:49:36.000Z","updated":"2022-03-30T03:53:55.406Z","comments":true,"path":"archives/379d8b7a.html","link":"","permalink":"https://屵.com/archives/379d8b7a.html","excerpt":"","text":"JS方法共包含: JS输出语句、JS if else语句、JS switch case语句、JS while循环语句、JS do while循环语句、JS for循环语句、JS for in循环语句、JS for of循环语句、JS break和continue语句、JS输出杨辉三角（作业带解析） JS输出语句 需要将程序的运行结果输出到浏览器中，JavaScript 中为我们提供了多种不同的输出语句来向浏览器中输出内容： 使用 alert() 函数来弹出提示框； 使用 confirm() 函数来弹出一个对话框； 使用 document.write() 方法将内容写入到 HTML 文档中； 使用 innerHTML 将内容写入到 HTML 标签中； 使用 console.log() 在浏览器的控制台输出内容。 alert() 函数使用 JS alert() 函数可以在浏览器中弹出一个提示框，在提示框中我们可以定义要输出的内容 alert(message); 其中 message 为要在提示框中输出的内容，需要注意的是，alert() 中只能输出文本内容。 alert() 函数是 window 对象下的一个函数，所以有时为了代码更严谨，我们也可以使用 window.alert() 的形式来调用 alert() 函数 window.alert(\"Jinghai\") confirm() 函数JS confirm() 函数与 alert() 函数相似，它们都是 window 对象下的函数，同样可以在浏览器窗口弹出一个提示框，不同的是，使用 confirm() 函数创建的提示框中，除了包含一个“确定”按钮外，还有一个“取消”按钮。如果点击“确定”按钮，那么 confirm() 函数会返回一个布尔值 true，如果点击“取消”按钮，那么 confirm() 函数会返回一个布尔值 false。 window.confirm(\"Jinghai\") //点击确定返回true console.log()使用 JS console.log() 可以在浏览器的控制台输出信息，通常使用 console.log() 来调试程序，其语法格式如下： console.log(message); 其中 message 为要输出的内容，可以是字符串或者对象类型。与 window.alert() 和 window.confirm() 可以分别简写成 alert() 和 confirm() 不同，console.log() 不能简写 要看到 console.log() 的输出内容需要先打开浏览器的控制台。以 Edge浏览器为例，要打开控制台您只需要在浏览器窗口按 F12 快捷键 document.write()使用 JS document.write() 可以向 HTML 文档中写入 HTML 或者 JavaScript 代码，语法格式如下： document.write(exp1, exp2, exp3, ...); 其中 exp1、exp2、exp3 为要向文档中写入的内容，document.write() 可以接收多个参数，即我们可以一次向文档中写入多个内容，内容之间使用逗号进行分隔。 document.write(Date()) \\\\ Mon Mar 21 2022 15:40:34 GMT+0800 (中国标准时间) innerHTML与前面介绍的几个函数不同，innerHTML 是一个属性而不是一个函数，通过它可以设置或者获取指定 HTML 标签中的内容 &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;JavaScript&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"demo\"&gt;JavaScript 输出&lt;/div&gt; &lt;script type=\"text/javascript\"&gt; var demo = document.getElementById(\"demo\"); console.log(demo.innerHTML); demo.innerHTML = \"&lt;h2&gt;innerHTML&lt;/h2&gt;\" &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 运行结果如下图所示： JS if else语句：条件判断语句 条件判断语句是程序开发过程中一种经常使用的语句形式，和大部分编程语言相同，JavaScript中也有条件判断语句。所谓条件判断，指的是程序根据不同的条件来执行不同的操作，例如根据年龄来显示不同的内容，根据布尔值 true 或 false 来判断操作是成功还是失败等。 JavaScript 中支持以下几种不同形式的条件判断语句： if 语句； if else 语句； if else if else 语句； switc case 语句。 if 语句if 语句是 JavaScript 中最简单的条件判断语句，语法格式如下： if(条件表达式){ // 要执行的代码; } 当条件表达式成立，即结果为布尔值 true 时，就会执行{ }中的代码。 var age = 20; if(age &gt;= 18){ // 如果 age &gt;= 18 的结果为 true，则执行下面 { } 中的代码 console.log(\"Jinghai\"); } //执行结果是Jinghai if else 语句if else 语句是 if 语句的升级版，它不仅可以指定当表达式成立时要执行的代码，还可以指定当表达式不成立时要执行的代码，语法格式如下： if(条件表达式){ // 当表达式成立时要执行的代码 }else{ // 当表达式不成立时要执行的代码 } 示例代码如下： var now = new Date(); // 获取当前的完整日期 var dayOfWeek = now.getDay(); // 获取一个 0-6 之间的数字，用来表示当前是星期几，0 表示星期日、1 表示星期一、以此类推 if (dayOfWeek &gt; 0 &amp;&amp; dayOfWeek &lt; 6) { // 判断：如果当前是星期一到星期五中的一天，则输出“Have a nice day!”，若不是则输出“Have a nice weekend!” alert(\"Have a nice day!\"); } else { alert(\"Have a nice weekend!\"); } if else if else 语句if 和 if else 语句都只有一个条件表达式，而 if else if else 语句是它们更高级的形式，在 if else if else 语句中允许您定义多个条件表达式，并根据表达式的结果执行相应的代码，语法格式如下： if (条件表达式 1) { // 条件表达式 1 为真时执行的代码 } else if (条件表达式 2) { // 条件表达式 2 为真时执行的代码 } ... else if (条件表达式N) { // 条件表达式 N 为真时执行的代码 } else { // 所有条件表达式都为假时要执行的代码 } 提示：if else if else 语句在执行过程中，当遇到成立的条件表达式时，会立即执行其后{ }中的代码，然后退出整个 if else if else 语句，若后续代码中还有成立的条件表达式，则不会执行。 示例代码如下： var now = new Date(); // 获取当前的完整日期 var dayOfWeek = now.getDay(); // 获取一个 0-6 之间的数字，用来表示当前是星期几，0 表示星期日、1 表示星期一、以此类推 if(dayOfWeek == 0) { // 判断当前是星期几 alert(\"星期日\") } else if(dayOfWeek == 1) { alert(\"星期一\") } else if(dayOfWeek == 2) { alert(\"星期二\") } else if(dayOfWeek == 3) { alert(\"星期三\") } else if(dayOfWeek == 4) { alert(\"星期四\") } else if(dayOfWeek == 5) { alert(\"星期五\") } else { alert(\"星期六\") } 注意事项使用嵌套 if else 时，如果只有一行语句，也应该使用大括号包裹起来，避免条件歧义 下面嵌套 if else 就容易引发误解： if(0) if(1) console.log(1); else console.log(0); 因此使用大括号可以避免很多问题： if(0){ if(1) console.log(1); }else{ console.log(0); } JS switch case语句 JS switch case 语句与 if else 语句的多分支结构类似，都可以根据不同的条件来执行不同的代码；但是与 if else 多分支结构相比，switch case 语句更加简洁和紧凑，执行效率更高。 switch (表达式){ case value1: statements1 // 当表达式的结果等于 value1 时，则执行该代码 break; case value2: statements2 // 当表达式的结果等于 value2 时，则执行该代码 break; ...... case valueN: statementsN // 当表达式的结果等于 valueN 时，则执行该代码 break; default : statements // 如果没有与表达式相同的值，则执行该代码 } switch 语句根据表达式的值，依次与 case 子句中的值进行比较： 如果两者相等，则执行其后的语句段，当遇到 break 关键字时则跳出整个 switch 语句。 如果不相等，则继续匹配下一个 case。 switch 语句包含一个可选的 default 关键字，如果在前面的 case 中没有找到相等的条件，则执行 default 后面的语句段。 注意：switch 语句中，表达式是使用全等（===）来与各个 cese 子句中的值进行匹配的。由于使用的是全等运算符，因此不会自动转换每个值的类型。 break 关键字switch 语句是逐行执行的，当 switch 语句找到一个与之匹配的 case 子句时，不仅会执行该子句对应的代码，还会继续向后执行，直至 switch 语句结束。为了防止这种情况产生，需要在每个 case 子句的末尾使用 break 来跳出 switch 语句。 break 除了可以用来跳出 switch 语句外，还可以用来跳出循环语句（for、for in、while、do while 等） //示例使用 switch case 语句设计网站登录会员管理模块 var id = 1; switch (id) { case 1 : console.log(\"普通会员\"); break; //停止执行，跳出switch case 2 : console.log(\"VIP会员\"); break; //停止执行，跳出switch case 3 : console.log(\"管理员\"); break; //停止执行，跳出switch default : //上述条件都不满足时，默认执行的代码 console.log(\"游客\"); } case 子句case 子句可以省略语句，这样当匹配时，不管下一个 case 条件是否满足，都会继续执行下一个 case 子句的语句。 //示例演示了把普通会员和 VIP 会员合并在一起进行检测 var id = 1; switch (id) { case 1 : case 2 : console.log(\"VIP会员\"); break; case 3 : console.log(\"管理员\"); break; default : console.log(\"游客\"); 在 switch 语句中，case 子句只是指明了执行起点，但是没有指明执行的终点，如果在 case 子句中没有 break 语句，就会发生连续执行的情况，从而忽略后面 case 子句的条件限制，这样就容易破坏 switch 结构的逻辑。 如果在函数中使用 switch 语句，可以使用 return 语句终止 switch 语句，防止代码继续执行。 default语句default 是 switch 子句，可以位于 switch 内任意位置，不会影响多重分支耳朵正常执行。下面结合示例介绍使用 default 语句应该注意 3 个问题。 //如果 default 下面还有 case 子句，应该在 default 后面添加 break 语句，终止 switch 结构，防止程序突破 case 条件的限制继续执行下面 case 子句 var id = 1; switch (id) { default : console.log(\"游客\"); break; case 1 : console.log(\"普通会员\"); break; case 2 : console.log(\"VIP会员\"); break； case 3 : console.log(\"管理员\"); break; } 在下面代码中，JavaScript 先检测 case 表达式的值，由于 case 表达式的值都不匹配，则跳转到 default 子句执行，然后继续执行 case 1 和 case 2 子句。但是，最后不会返回 default 子句再重复执行。 var id = 3; switch (id) { default : console.log(\"游客\"); case 1 : console.log(\"普通会员\"); case 2 : console.log(\"VIP会员\"); } 下面示例使用 switch 语句设计一个四则运算函数。在 switch 结构内，先使用 case 枚举 4 种可预知的算术运算，当然还可以继续扩展 case 子句，枚举所有可能的操作，但是无法枚举所有不测，因此最后使用 default 处理意外情况。 function oper (a,b,opr) { switch (opr) { case \"+\" : //正常枚举 return a + b; case \"-\" : //正常枚举 return a - b; case \"*\" : //正常枚举 return a * b; case \"/\" : //正常枚举 return a / b; default : //异常处理 return \"非预期的 opr 值\"; } } console.log(oper (2,5,\"*\")); //返回10 default 语句与 case 语句简单比较如下： 语义不同：default 为默认项，case 为判例。 功能扩展：default 选项是唯一的，不可以扩展。而 case 选项是可扩展的，没有限制。 异常处理：default 与 case 扮演的角色不同，case 用于枚举，default 用于异常处理。 JS while 循环语法 循环的目的就是为了反复执某段代码，使用循环可以减轻编程压力，避免代码冗余，提高开发效率，方便后期维护。while 循环是 JavaScript 中提供的最简单的循环语句，本节我们就来简单介绍一下 while 循环的使用。 while (条件表达式) { // 要执行的代码 } while 循环在每次循环之前，会先对条件表达式进行求值，如果条件表达式的结果为 true，则执行{ }中的代码，如果条件表达式的结果为 false，则退出 while 循环，执行 while 循环之后的代码。 //使用 while 循环计算 1~100 之间所有整数的和 var i = 1; while( i &lt;= 5) { document.write(i+\", \"); i++; } 运行结果：1, 2, 3, 4, 5, 注意事项在编写循环语句时，一定要确保条件表达式的结果能够为假（即布尔值 false），因为只要表达式的结果为 true，循环会一直持续下去，不会自动停止，对于这种无法自动停止的循环，我们通常将其称为“无限循环”或“死循环”。 JS while 循环示例var i=1; var sum=0; while (i &lt;= 100){ sum += i; i++; } document.write(\"1 + 2 + 3 + ... + 98 + 99 + 100 = \" + sum) 运行结果：1 + 2 + 3 + … + 98 + 99 + 100 = 5050 //找出 1900 年到 2022 年之间所有的闰年，并以每行 6 个进行输出 var i = 1900; var count = 0; //计数闰年的个数 while (i &lt;= 2022) { //判断是否是闰年 if (i % 4 == 0 &amp;&amp; i % 100 != 0 || i % 400 == 0) { document.write(i + \"&amp;nbsp;&amp;nbsp;\"); count++; if (count % 6 == 0) { document.write(\"&lt;br/&gt;\"); } } i++; } 运行结果：1904 1908 1912 1916 1920 19241928 1932 1936 1940 1944 19481952 1956 1960 1964 1968 19721976 1980 1984 1988 1992 19962000 2004 2008 2012 2016 2020 JS do while循环语句 JS do while 循环与 while 循环非常相似，不同之处在于，do while 循环会先执行循环中的代码，然后再对条件表达式进行判断。因此，无论条件表达式是真还是假，do while 循环都能至少执行一次，而 while 循环就不行了，如果条件表达式为假会直接退出 while 循环。 JS do while 循环语法do { // 需要执行的代码 } while (条件表达式); 提示：do while 循环与 while 循环还有一点不同，那就是 do while 循环的末尾需要使用分号;进行结尾，而 while 循环则不需要。示例代码如下： var i = 1; do{ document.write(i + \" \"); i++; }while (i &gt; 5); JS do while 循环示例使用 do while 循环计算 1~100 之间所有整数的和 &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;JavaScript&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script&gt; var i=1; var sum=0; do { sum+=i; i++ }while (i&lt;=100); document.write('1+2+3+4+·····+100='+sum) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 运行结果是： 1+2+3+4+·····+100=5050 JS for循环语句 JS for 循环语法JS for 循环适合在已知循环次数时使用 for(initialization; condition; increment) { // 要执行的代码 } for 循环中包含三个可选的表达式 initialization、condition 和 increment，其中： initialization：为一个表达式或者变量声明，我们通常将该步骤称为“初始化计数器变量”，在循环过程中只会执行一次； condition：为一个条件表达式，与 while 循环中的条件表达式功能相同，通常用来与计数器的值进行比较，以确定是否进行循环，通过该表达式可以设置循环的次数； increment：为一个表达式，用来在每次循环结束后更新（递增或递减）计数器的值。for (var i = 1; i &lt;= 10; i++) { document.write(i + \" \"); } 1 2 3 4 5 6 7 8 9 10 使用 for 循环遍历数组中的内容 var fruits = [\"Apple\", \"Banana\", \"Mango\", \"Orange\", \"Papaya\"]; for(var i = 0; i &lt; fruits.length; i++) { document.write(fruits[i] + \"&amp;emsp;\"); } 运行结果：Apple Banana Mango Orange Papaya JS for 循环中的三个表达式JS for 循环中括号中的三个表达式是可以省略的，但是用于分隔三个表达式的分号不能省略，如下例所示： // 省略第一个表达式 var i = 0; for (; i &lt; 5; i++) { // 要执行的代码 } // 省略第二个表达式 for (var y = 0; ; y++) { if(y &gt; 5){ break; } // 要执行的代码 } // 省略第一个和第三个表达式 var j = 0; for (; j &lt; 5;) { // 要执行的代码 j++; } // 省略所有表达式 var z = 0; for (;;) { if(z &gt; 5){ break; } // 要执行的代码 z++; } JS for 循环嵌套无论是哪种循环，都可以嵌套使用（即在一个循环中再定义一个或多个循环），下面就以 for 循环为例，来演示一下循环的嵌套使用： for (var i = 1; i &lt;= 9; i++) { for (var j = 1; j &lt;= i; j++) { document.write(j + \" x \" + i + \" = \" + (i * j) + \"&amp;emsp;\"); } document.write(\"&lt;br&gt;\"); } 1 x 1 = 1 1 x 2 = 2 2 x 2 = 4 1 x 3 = 3 2 x 3 = 6 3 x 3 = 9 1 x 4 = 4 2 x 4 = 8 3 x 4 = 12 4 x 4 = 16 1 x 5 = 5 2 x 5 = 10 3 x 5 = 15 4 x 5 = 20 5 x 5 = 25 1 x 6 = 6 2 x 6 = 12 3 x 6 = 18 4 x 6 = 24 5 x 6 = 30 6 x 6 = 36 1 x 7 = 7 2 x 7 = 14 3 x 7 = 21 4 x 7 = 28 5 x 7 = 35 6 x 7 = 42 7 x 7 = 49 1 x 8 = 8 2 x 8 = 16 3 x 8 = 24 4 x 8 = 32 5 x 8 = 40 6 x 8 = 48 7 x 8 = 56 8 x 8 = 64 1 x 9 = 9 2 x 9 = 18 3 x 9 = 27 4 x 9 = 36 5 x 9 = 45 6 x 9 = 54 7 x 9 = 63 8 x 9 = 72 9 x 9 = 81 JS for in循环语句JS for in 循环是一种特殊类型的循环，也是普通 for 循环的变体，主要用来遍历对象，使用它可以将对象中的属性依次循环出来，其语法格式如下： for (variable in object) { // 要执行的代码 } 其中，variable 为一个变量，每次循环时这个变量都会被赋予不同的值，我们可以在{ }中使用这个变量来进行一系列操作；object 为要遍历的对象，在每次循环中，会将 object 对象中的一个属性的键赋值给变量 variable，直到对象中的所有属性都遍历完 // 定义一个对象 var person = {\"name\": \"Clark\", \"surname\": \"Kent\", \"age\": \"36\"}; // 遍历对象中的所有属性 for(var prop in person) { document.write(\"&lt;p&gt;\" + prop + \" = \" + person[prop] + \"&lt;/p&gt;\"); } JS for of循环语句JS for of 循环是 ECMAScript6 中新添加的一个循环方式，与 for in 循环类似，也是普通 for 循环的一种变体。使用 for of 循环可以轻松的遍历数组或者其它可遍历的对象，例如字符串、对象等。 JS for of 循环的语法格式如下： for (variable of iterable) { // 要执行的代码 } 其中，variable 为一个变量，每次循环时这个变量都会被赋予不同的值，我们可以在后面的{ }中使用这个变量来进行一系列操作；iterable 为要遍历的内容，在每次循环中，会将 iterable 中的一个值赋值给变量 variable，直到 iterable 中的所有值都遍历完 // 定义一个数组 var arr = ['a', 'b', 'c', 'd', 'e', 'f']; // 使用 for of 循环遍历数组中的每个元素 for (var value of arr) { document.write(value + \", \"); } document.write(\"&lt;br&gt;\"); // 定义一个字符串 var str = \"Hello World!\"; // 使用 for of 循环遍历字符串中的每个字符 for (var value of str) { document.write(value + \", \"); } document.write(\"&lt;br&gt;\"); // 定义一个对象 var obj = {\"name\": \"Clark\", \"surname\": \"Kent\", \"age\": \"36\"}; // 使用 for of 循环遍历对象中的所有属性 for(var value in obj) { document.write(value + \", \"); } 运行结果：a, b, c, d, e, f,H, e, l, l, o, , W, o, r, l, d, !,name, surname, age, 注意，虽然 for of 循环也可以遍历对象，但并不推荐，若要遍历对象可以使用 for in 循环。 JavaScript跳出循环JS break 语句for (var i = 0; i &lt; 10; i++) { if(i == 5) { break; } document.write(\"i = \" + i + \"&lt;br&gt;\"); } document.write(\"循环之外的代码\"); 运行结果：i = 0i = 1i = 2i = 3i = 4循环之外的代码 JS continue 语句continue 语句用来跳过本次循环，执行下次循环。当遇到 continue 语句时，程序会立即重新检测条件表达式，如果表达式结果为真则开始下次循环，如果表达式结果为假则退出循环。 break 语句用来跳出整个循环，执行循环后面的代码；continue 语句用来跳过当次循环，继续执行下次循环。 for (var i = 0; i &lt; 10; i++) { if(i % 2 == 0) { continue; } document.write(i + \"&amp;nbsp;\"); } 运行结果：1 3 5 7 9 JavaScript 标签JavaScript 中的标签与 HTML 中的标签不同，JavaScript 中的标签就是一个标识符（类似变量名），后面跟随一个冒号:。JavaScript 标签可以声明在任何语句或者代码块之前，并与 break 或 continue 配合来跳出特定的循环，例如当多个循环嵌套使用时，单纯使用 break 只能跳出当前的循环，无法跳出外层循环，如果将 break 与标签配合使用，则可以一次跳出多层循环。 document.write(\"开始循环!&lt;br /&gt; \"); outerloop: // 定义一个标签 for (var i = 0; i &lt; 5; i++) { document.write(\"外层循环: \" + i + \"&lt;br /&gt;\"); innerloop: // 定义一个标签 for (var j = 0; j &lt; 5; j++) { if (j &gt; 3 ) break ; // 跳出内层循环 if (i == 2) break innerloop; // 跳出内层讯息 if (i == 4) break outerloop; // 跳出外层循环 document.write(\"内层循环: \" + j + \" &lt;br /&gt;\"); } } document.write(\"循环结束!&lt;br /&gt; \"); 运行结果： 开始循环! 外层循环: 0 内层循环: 0 内层循环: 1 内层循环: 2 内层循环: 3 外层循环: 1 内层循环: 0 内层循环: 1 内层循环: 2 内层循环: 3 外层循环: 2 外层循环: 3 内层循环: 0 内层循环: 1 内层循环: 2 内层循环: 3 外层循环: 4 循环结束! JS输出杨辉三角杨辉三角是一个经典的编程案例，它揭示了多次放二项式展开后各项系数的分布规律。简单描述，就是每行开头和结尾的数字为 1，出第一行外，每个数都等于它上方两数之和，如图所示。设计思路定义两个数组，数组 1 为上一行数字列表，为已知数组；数组 2 为下一行数字列表，为待求数组。假设上一行数组为 [1,1]，即第二行数字。那么，下一行数组的元素值就等于上一行相邻两个数字的和，即为 2，然后数组两端的值为 1，这样就可以求出下一行数组，即第三行数字列表。求第四行数组的值，可以把已计算出的第三数组作为上一行数组，而第四行数字为待求的下一行数组，以此类推 使用嵌套for 循环结构，外层循环遍历高次方的幂数（即行数），内层循环遍历每次方的项数（即列数）。具体 JS 代码如下： function print(v){ if (typeof v == \"number\") { var w = 30; if(n&gt;30) w = (n-30) + 40; var s = '&lt;span style=\"padding:4px 2px;display:inline-block;text-align:center;width:' + w + 'px;\"&gt;'+v+'&lt;/span&gt;'; document.write(s); }else{ document.write(v); } } var n = prompt(\"请输入幂数：\",9); n = n - 0; var t1 = new Date(); var a1 = [1,1]; var a2 = [1,1]; print('&lt;div style=text-align:center;\"&gt;'); for (var i = 0;i &lt;=n;i++){ for (var j = 1; j &lt; i + 2; j++) { print(c(i,j)); } print(\"&lt;br /&gt;\"); } print(\"&lt;/div&gt;\"); var t2 = new Date(); print(\"&lt;p style='text-align:center;'&gt;耗时为（毫秒）：\"+(t2-t1)+\"&lt;/p&gt;\"); function c(x,y){ if ((y == 1) || (y == x + 1)) return 1; return c(x-1,y-1) + c(x-1,y); } 输入4 读后有收获可以请作者喝咖啡","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[{"name":"JS Method","slug":"JS-Method","permalink":"https://屵.com/tags/JS-Method/"}]},{"title":"思维导图","slug":"思维导图","date":"2022-03-30T01:03:47.000Z","updated":"2022-03-31T06:38:10.499Z","comments":true,"path":"archives/6c27b784.html","link":"","permalink":"https://屵.com/archives/6c27b784.html","excerpt":"","text":"使用方法 首先进入到 Hexo 博客的根目录，执行 npm install hexo-simple-mindmap 安装插件 写新文章时，在需要脑图的地方，按以下格式添加内容。插件会自动将 pullquote 中包裹的内容按照层级顺序渲染成脑图 {% pullquote mindmap mindmap-md %} - [Hexo 的思维导图插件](https://屵.com/archives/6c27b784.html) - 前言 - 使用方法 - 一 - 二 - 三 - 太长不看 - 参考资料 {% endpullquote %} 运行结果如下 Hexo 的思维导图插件 前言 使用方法 一 二 三 太长不看 参考资料 读后有收获可以请作者喝咖啡","categories":[{"name":"markdown","slug":"markdown","permalink":"https://屵.com/categories/markdown/"}],"tags":[{"name":"思维导图","slug":"思维导图","permalink":"https://屵.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"}]},{"title":"Markdown使用详解","slug":"Markdown使用详解","date":"2022-03-29T09:06:06.000Z","updated":"2022-03-30T01:25:09.543Z","comments":true,"path":"archives/f2108d0a.html","link":"","permalink":"https://屵.com/archives/f2108d0a.html","excerpt":"","text":"创建文章在站点文件夹中打开 git bash，输入如下命令创建文章，其中 title 为文章的标题 $ hexo new “title” 当输入命令后，就会在 source/_post 文件夹下创建一个文件，命名为：title.md 这个文件就是将要发布到网站上的原始文件，用于记录文章内容 编写文章（基于 Markdown）Markdown 简介 Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式 在编写 Markdown 时，博主强烈的推荐给大家一款简洁易用的 Markdown 编辑器 —— Typora Typora使用说明标题Typora 快捷键 Ctrl+1：一级标题 Ctrl+2：二级标题 Ctrl+3：三级标题 Ctrl+4：四级标题 Ctrl+5：五级标题 Ctrl+6 ：六级标题 Ctrl+0：段落 粗体、斜体、删除线和下划线Typora 快捷键 Ctrl+I：斜体 Ctrl+B：粗体 Ctrl+U：下划线 Alt+Shift+5：删除线 引用块Typora 快捷键： Ctrl+Shift+Q 代码块Typora 快捷键： 行内代码：Ctrl+Shift+` 多行代码：Ctrl+Shift+K 公式块Typora 快捷键： Ctrl+Shift+M 分割线 方法一：— 方法二：+++ 方法三：*** 列表Typora 快捷键： 有序列表项：Ctrl+Shift+[ 无序列表项：Ctrl+Shift+] 表格Typora 快捷键： Ctrl+T 超链接Typora快捷键： Ctrl+K 图片 Typora快捷键： Ctrl+Shift+I 说明：在 Hexo中 插入图片时，请按照以下的步骤进行设置 将站点配置文件 中的 post_asset_folder 选项的值设置为 true 在站点文件夹中打开 git bash，输入命令 npm install hexo-asset-image –save 安装插件 这样，当使用 hexo new title 创建文章时，将同时在 source/_post 文件夹中生成一个与 title 同名的文件夹，我们只需将图片放进此文件夹中，然后在文章中通过 Markdown 语法进行引用即可 例如，在资源文件夹（就是那个与 title 同名的文件夹）中添加图片 example.PNG，则可以在对应的文章中使用语句![示例图片](title/example.PNG “示例图片”) 添加图片 base64编码 再图片中引用![示例图片][good] 文档最后添加/[good]:data::image/png;base64,iVB—- 高级设置模板设置当我们使用命令 hexo new \"title\" 创建文章时，Hexo 会根据 /scaffolds/post.md 对新文章进行初始化 换言之，/scaffolds/post.md 就是新文章的 模板，所以我们可以修改它来适应自己的写作习惯 示例如下 title: {{ title }} date: {{ date }} tags: categories: 头部设置在每篇利用 Hexo 创建的文章的开头，都会有对文章进行说明的文字，叫做 文章头部 文章的头部除了可以设置文章标题、发布日期等基础信息外，还可以为文章添加标签、分类等 一个简单的示例如下 title: Title date: YYYY-MM-DD HH:MM:SS tags: [tag1, tag2, ...] categories: category 注意：属性和属性值之间必须有一个空格，否则会解析错误 首页显示在利用 Hexo 框架搭建的博客网站中，首页会显示文章的内容，且默认显示文章的全部内容 如果当文章太长的时候就会显得十分冗余，所以我们有必要对其进行精简 这时，我们只需在文章中使用 &lt;!--more--&gt; 标志即可，表示只会显示标志前面的内容 部署发布在站点文件夹中打开 git bash，输入如下命令部署和发布文章 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 建议：在使用 hexo g 部署之后，可以先使用 hexo s 运行本地站点，然后在浏览器输入地址 http://lacolhost:4000/ 查看运行结果，检查无误后再使用 hexo d 发布 读后有收获可以请作者喝咖啡","categories":[{"name":"markdown","slug":"markdown","permalink":"https://屵.com/categories/markdown/"}],"tags":[{"name":"Typora","slug":"Typora","permalink":"https://屵.com/tags/Typora/"}]},{"title":"JS运算符","slug":"JS运算符","date":"2022-03-28T07:35:28.000Z","updated":"2022-03-29T08:56:09.954Z","comments":true,"path":"archives/19d8bcc5.html","link":"","permalink":"https://屵.com/archives/19d8bcc5.html","excerpt":"","text":"JS运算符（优先级及结合性）算术运算符 算数运算符用来执行常见的数学运算，例如加法、减法、乘法、除法等，下表中列举了 JavaScript 中支持的算术运算符： 运算符 描述 示例 + 加法运算符 x + y 表示计算 x 加 y 的和 - 减法运算符 x - y 表示计算 x 减 y 的差 * 乘法运算符 x * y 表示计算 x 乘 y 的积 / 除法运算符 x / y 表示计算 x 除以 y 的商 % 取模（取余）运算符 x % y 表示计算 x 除以 y 的余数 示例代码如下： var x = 10, y = 4; console.log(\"x + y =\", x + y); // 输出：x + y = 14 console.log(\"x - y =\", x - y); // 输出：x - y = 6 console.log(\"x * y =\", x * y); // 输出：x * y = 40 console.log(\"x / y =\", x / y); // 输出：x / y = 2.5 console.log(\"x % y =\", x % y); // 输出：x % y = 2 赋值运算符赋值运算符用来为变量赋值，下表中列举了 JavaScript 中支持的赋值运算符： 运算符 描述 示例 = 最简单的赋值运算符，将运算符右侧的值赋值给运算符左侧的变量 x = 10 表示将变量 x 赋值为 10 += 先进行加法运算，再将结果赋值给运算符左侧的变量 x += y 等同于 x = x + y -= 先进行减法运算，再将结果赋值给运算符左侧的变量 x -= y 等同于 x = x - y *= 先进行乘法运算，再将结果赋值给运算符左侧的变量 x *= y 等同于 x = x * y /= 先进行除法运算，再将结果赋值给运算符左侧的变量 x /= y 等同于 x = x / y %= 先进行取模运算，再将结果赋值给运算符左侧的变量 x %= y 等同于 x = x % y 示例代码如下： var x = 10; x += 20; console.log(x); // 输出：30 var x = 12, y = 7; x -= y; console.log(x); // 输出：5 x = 5; x *= 25; console.log(x); // 输出：125 x = 50; x /= 10; console.log(x); // 输出：5 x = 100; x %= 15; console.log(x); // 输出：10 字符串运算符JavaScript 中的+和+=运算符除了可以进行数学运算外，还可以用来拼接字符串，其中： +运算符表示将运算符左右两侧的字符串拼接到一起； +=运算符表示先将字符串进行拼接，然后再将结果赋值给运算符左侧的变量。 示例代码如下： var x = \"Hello \"; var y = \"World!\"; var z = x + y; console.log(z); // 输出：Hello World! x += y; console.log(x); // 输出：Hello World! 自增、自减运算符自增、自减运算符用来对变量的值进行自增（+1）、自减（-1）操作，下表中列举了 JavaScript 中支持的自增、自减运算符： 运算符 名称 影响 ++x 自增运算符 将 x 加 1，然后返回 x 的值 x++ 自增运算符 返回 x 的值，然后再将 x 加 1 –x 自减运算符 将 x 减 1，然后返回 x 的值 x– 自减运算符 返回 x 的值，然后将 x 减 1 示例代码如下： var x; x = 10; console.log(++x); // 输出：11 console.log(x); // 输出：11 x = 10; console.log(x++); // 输出：10 console.log(x); // 输出：11 x = 10; console.log(--x); // 输出：9 console.log(x); // 输出：9 x = 10; console.log(x--); // 输出：10 console.log(x); // 输出：9 比较运算符比较运算符用来比较运算符左右两侧的表达式，比较运算符的运算结果是一个布尔值，结果只有两种，不是 true 就是 false。 运算符 名称 示例 == 等于 x == y 表示如果 x 等于 y，则为真 === 全等 x === y 表示如果 x 等于 y，并且 x 和 y 的类型也相同，则为真 != 不相等 x != y 表示如果 x 不等于 y，则为真 !== 不全等 x !== y 表示如果 x 不等于 y，或者 x 和 y 的类型不同，则为真 &lt; 小于 x &lt; y 表示如果 x 小于 y，则为真 &gt; 大于 x &gt; y 表示如果 x 大于 y，则为真 &gt;= 大于或等于 x &gt;= y 表示如果 x 大于或等于 y，则为真 &lt;= 小于或等于 x &lt;= y 表示如果 x 小于或等于 y，则为真 示例代码如下： var x = 25; var y = 35; var z = \"25\"; console.log(x == z); // 输出： true console.log(x === z); // 输出： false console.log(x != y); // 输出： true console.log(x !== z); // 输出： true console.log(x &lt; y); // 输出： true console.log(x &gt; y); // 输出： false console.log(x &lt;= y); // 输出： true console.log(x &gt;= y); // 输出： false 逻辑运算符逻辑运算符通常用来组合多个表达式，逻辑运算符的运算结果是一个布尔值，只能有两种结果，不是 true 就是 false。 运算符 名称 示例 &amp;&amp; 逻辑与 x &amp;&amp; y 表示如果 x 和 y 都为真，则为真 II 逻辑或 x II y 表示如果 x 或 y 有一个为真，则为真 ! 逻辑非 !x 表示如果 x 不为真，则为真 示例代码如下： var year = 2021; // 闰年可以被 400 整除，也可以被 4 整除，但不能被 100 整除 if((year % 400 == 0) || ((year % 100 != 0) &amp;&amp; (year % 4 == 0))){ console.log(year + \" 年是闰年。\"); } else{ console.log(year + \" 年是平年。\"); } 三元运算符三元运算符（也被称为条件运算符），由一个问号和一个冒号组成，语法格式如下 条件表达式 ? 表达式1 : 表达式2 ; 如果“条件表达式”的结果为真（true），则执行“表达式1”中的代码，否则就执行“表达式2”中的代码。 var x = 11, y = 20; x &gt; y ? console.log(\"x 大于 y\") : console.log(\"x 小于 y\"); // 输出：x 小于 y 位运算符位运算符用来对二进制位进行操作，JavaScript 中支持的位运算符如下表 运算符 描述 示例 &amp; 按位与：如果对应的二进制位都为 1，则该二进制位为 1 5 &amp; 1 等同于 0101 &amp; 0001 结果为 0001，十进制结果为 1 I 按位或：如果对应的二进制位有一个为 1，则该二进制位为 1 5 I1 等同于 0101 I 0001 结果I为 0101，十进制结果为 5 ^ 按位异或：如果对应的二进制位只有一个为 1，则该二进制位为 1 5 ^ 1 等同于 0101 ^ 0001 结果为 0100，十进制结果为 4 ~ 按位非：反转所有二进制位，即 1 转换为 0，0 转换为 1 ~5 等同于 ~0101 结果为 1010，十进制结果为 -6 &lt;&lt; 按位左移：将所有二进制位统一向左移动指定的位数，并在最右侧补 0 5 &lt;&lt; 1 等同于 0101 &lt;&lt; 1 结果为 1010，十进制结果为 10 &gt;&gt; 按位右移（有符号右移）：将所有二进制位统一向右移动指定的位数，并拷贝最左侧的位来填充左侧 5 &gt;&gt; 1 等同于 0101 &gt;&gt; 1 结果为 0010，十进制结果为 2 &gt;&gt;&gt; 按位右移零（无符号右移）：将所有二进制位统一向右移动指定的位数，并在最左侧补0 5 &gt;&gt;&gt; 1 等同于 0101 &gt;&gt;&gt; 1 结果为 0010，十进制结果为 2 示例代码如下： var a = 5 &amp; 1, b = 5 | 1, c = 5 ^ 1, d = ~ 5, e = 5 &lt;&lt; 1, f = 5 &gt;&gt; 1, g = 5 &gt;&gt;&gt; 1; console.log(a); // 输出：1 console.log(b); // 输出：5 console.log(c); // 输出：4 console.log(d); // 输出：-6 console.log(e); // 输出：10 console.log(f); // 输出：2 console.log(g); // 输出：2 JS运算符优先级JS 运算符的优先级和结合性规定了它们在复杂的表达式中的运算顺序。 运算符的执行顺序称为运算符的优先级，优先级高的运算符先于优先级低的运算符执行运算。 w=x+yz;执行加法运算的+运算符的优先级低于运算符，所以y*z将先被执行，乘法运算执行完后得到的结果再和 x 相加。 运算符的优先级可以通过使用圆括号来改变，例如为了让加法先执行，乘法后执行，可以修改上面的表达式为： w=(x+y)*z; JS 运算符结合性对于相同优先级的运算符的执行顺序，则由运算符的结合性来决定。运算符的结合性包括「从右至左」和「从左至右」两种： 从右至左的结合性指的是，运算的执行是按从右到左的顺序进行； 从左至右的结合性刚好相反，运算符的执行顺序按照从左到右的顺序进行。 JS 运算符优先级和结合性一览表下表中按照优先级由高到低的顺序罗列了 JavaScript 中的所有运算符 运算类型 运算符 关联性 优先级 圆括号 (…) n/a(不相关) 20 成员访问 … . … 从左到右 19 需计算的成员访问 … [ … ] 从左到右 19 new(带参数列表) new … ( … ) n/a 19 可选链（Optional chaining） ？. 从左到右 19 new(无参数列表) new … 从右到左 18 后置递增（运算符在后） … ++ n/a 17 逻辑非 ！… 从右到左 16 按位非 ~ … 从右到左 16 一元加法 + … 从右到左 16 一元减法 - …. 从右到左 16 前置递增 ++ … 从右到左 16 前置递减 – … 从右到左 16 typeof typeof … 从右到左 16 void void … 从右到左 16 delete delete … 从右到左 16 await await … 从右到左 16 幂 … ** … 从右到左 15 乘法 … * … 从左到右 14 除法 … / … 从左到右 14 取模 … % … 从左到右 14 加法 … + … 从左到右 13 减法 … - … 从左到右 13 按位左移 … &lt;&lt; … 从左到右 12 按位右移 … &gt;&gt; … 从左到右 12 无符号右移 … &gt;&gt;&gt; … 从左到右 12 小于 … &lt; … 从左到右 11 小于等于 … &lt;= … 从左到右 11 大于 … &gt; … 从左到右 11 大于等于 … &gt;= … 从左到右 11 in … in … 从左到右 11 instanceof … instanceof … 从左到右 11 等号 … == … 从左到右 10 非等号 … ！= … 从左到右 10 全等号 … === … 从左到右 10 非全等号 … ！=== … 从左到右 10 按位与 … &amp; … 从左到右 9 按位异或 … ^ … 从左到右 8 按位或 … | … 从左到右 7 逻辑与 … &amp;&amp; … 从左到右 6 逻辑或 … || … 从左到右 5 条件运算符 … ? … : … 从右到左 4 赋值 … = … … += … … -= … … *= … … /= … … %= … … &lt;&lt;= … … &gt;&gt;= … … &gt;&gt;&gt;= … … &amp;= … … ^= … … |= … 从右到左 3 yield yield … 从右到左 2 yield* yield* … 从右到左 2 展开运算符 … … n/a 1 逗号 … , … 从左到右 0 读后有收获可以请作者喝咖啡","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[{"name":"JS运算符","slug":"JS运算符","permalink":"https://屵.com/tags/JS%E8%BF%90%E7%AE%97%E7%AC%A6/"}]},{"title":"JS数据类型（基本数据类型+引用类型）","slug":"JS数据类型","date":"2022-03-27T07:47:31.000Z","updated":"2022-03-29T08:58:36.209Z","comments":true,"path":"archives/18789.html","link":"","permalink":"https://屵.com/archives/18789.html","excerpt":"","text":"JS数据类型（基本数据类型+引用类型）JavaScript 是一种动态类型的语言，在定义变量时不需要提前指定变量的类型，变量的类型是在程序运行过程中由 JavaScript 引擎动态决定的，另外，您可以使用同一个变量来存储不同类型的数据 var a; // 此时 a 为 Undefined a = \"https://www.jianshu.com/u/32841c0369fb\"; // 此时 a 为 String 类型 a = 123; // 此时 a 为 Number 类型 基本数据类型（值类型） 字符串（String）、数字（Number）、布尔（Boolean）、空（Null）、未定义（Undefined）、Symbol String 类型字符串（String）类型是一段以单引号’’或双引号””包裹起来的文本，例如 ‘123’、”abc”。需要注意的是，单引号和双引号是定义字符串的不同方式，并不是字符串的一部分 var str = \"Let's have a cup of coffee.\"; // 双引号中包含单引号 var str = 'He said \"Hello\" and left.'; // 单引号中包含双引号 var str = 'We\\'ll never give up.'; // 使用反斜杠转义字符串中的单引号 Number 类型数值（Number）类型用来定义数值，JavaScript 中不区分整数和小数（浮点数），统一使用 Number 类型表示 var num1 = 123; // 整数 var num2 = 3.14; // 浮点数 注意：Number 类型所能定义的数值并不是无限的 对于一些极大或者极小的数，也可以通过科学（指数）计数法来表示 var y=123e5; // 123 乘以 10 的 5 次方，即 12300000 var z=123e-5; // 123 乘以 10 的 -5 次方，即 0.00123 Number 类型中还有一些比较特殊的值，分别为 Infinity、-Infinity 和 NaN，其中Infinity：用来表示正无穷大的数值，一般指大于 1.7976931348623157e+308 的数；-Infinity：用来表示负无穷大的数值，一般指小于 5e-324 的数；NaN：即非数值（Not a Number 的缩写），用来表示无效或未定义的数学运算结构，例如 0 除以 0。提示：如果某次计算的结果超出了 JavaScript 中 Number 类型的取值范围，那么这个数就会自动转化为无穷大，正数为 Infinity，负数为 -Infinity。 Boolean 类型布尔（Boolean）类型只有两个值，true（真）或者 false（假），在做条件判断时使用的比较多，您除了可以直接使用 true 或 false 来定义布尔类型的变量外，还可以通过一些表达式来得到布尔类型的值 var a = true; // 定义一个布尔值 true var b = false; // 定义一个布尔值 false var c = 2 &gt; 1; // 表达式 2 &gt; 1 成立，其结果为“真（true）”，所以 c 的值为布尔类型的 true var d = 2 &lt; 1; // 表达式 2 &lt; 1 不成立，其结果为“假（false）”，所以 c 的值为布尔类型的 false Undefined 类型Undefined 也是一个只有一个值的特殊数据类型，表示未定义。当我们声明一个变量但未给变量赋值时，这个变量的默认值就是 Undefined var num; console.log(num); // 输出 undefined 在使用 typeof 操作符查看未赋值的变量类型时，会发现它们的类型也是 undefined。对于未声明的变量，使用 typeof 操作符查看其类型会发现，未声明的变量也是 undefined var message; console.log(typeof message); // 输出 undefined console.log(typeof name); // 输出 undefined Symbol 类型Symbol 是 ECMAScript6 中引入的一种新的数据类型，表示独一无二的值，Symbol 类型的值需要使用 Symbol() 函数来生成 var str = \"123\"; var sym1 = Symbol(str); var sym2 = Symbol(str); console.log(sym1); // 输出 Symbol(123) console.log(sym2); // 输出 Symbol(123) console.log(sym1 == sym2); // 输出 false ：虽然 sym1 与 sym2 看起来是相同的，但实际上它们并 不一样，根据 Symbol 类型的特点，sym1 和 sym2 都是独一无二的 引用数据类型 对象（Object）、数组（Array）、函数（Function） Object 类型JavaScript 中的对象（Object）类型是一组由键、值组成的无序集合，定义对象类型需要使用花括号{ }，格式如下： {name1: value1, name2: value2, name3: value3, ..., nameN: valueN} 其中 name1、name2、name3、…、nameN 为对象中的键，value1、value2、value3、…、valueN 为对应的值。 在 JavaScript 中，对象类型的键都是字符串类型的，值则可以是任意数据类型。要获取对象中的某个值，可以使用对象名.键的形式 var person = { name: 'Bob', age: 20, tags: ['js', 'web', 'mobile'], city: 'Beijing', hasCar: true, zipcode: null }; console.log(person.name); // 输出 Bob console.log(person.age); // 输出 20 Array 类型数组（Array）是一组按顺序排列的数据的集合，数组中的每个值都称为元素，而且数组中可以包含任意类型的数据。在 JavaScript 中定义数组需要使用方括号[ ]，数组中的每个元素使用逗号进行分隔 [1, 2, 3, 'hello', true, null] 也可以使用 Array() 函数来创建数组 var arr = new Array(1, 2, 3, 4); console.log(arr); // 输出 [1, 2, 3, 4] 数组中的元素可以通过索引来访问。数组中的索引从 0 开始，并依次递增，也就是说数组第一个元素的索引为 0，第二个元素的索引为 1，第三个元素的索引为 2，以此类推 var arr = [1, 2, 3.14, 'Hello', null, true]; console.log(arr[0]); // 输出索引为 0 的元素，即 1 console.log(arr[5]); // 输出索引为 5 的元素，即 true console.log(arr[6]); // 索引超出了范围，返回 undefined Function 类型函数（Function）是一段具有特定功能的代码块，函数并不会自动运行，需要通过函数名调用才能运行 function sayHello(name){ return \"Hello, \" + name; } var res = sayHello(\"Jinghai\"); console.log(res); // 输出 Hello, Jinghai 函数还可以存储在变量、对象、数组中，而且函数可以作为参数传递给其它函数，或则从其它函数返回 var fun = function(){ console.log(\"https://www.jianshu.com/u/32841c0369fb\"); } function createGreeting(name){ return \"Hello, \" + name; } function displayGreeting(greetingFunction, userName){ return greetingFunction(userName); } var result = displayGreeting(createGreeting, \"Jinghai\"); console.log(result); // 输出 Hello, Jinghai 读后有收获可以请作者喝咖啡","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[{"name":"JS基本数据类型","slug":"JS基本数据类型","permalink":"https://屵.com/tags/JS%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"}]}],"categories":[{"name":"markdown","slug":"markdown","permalink":"https://屵.com/categories/markdown/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[{"name":"流程图","slug":"流程图","permalink":"https://屵.com/tags/%E6%B5%81%E7%A8%8B%E5%9B%BE/"},{"name":"JS DOM","slug":"JS-DOM","permalink":"https://屵.com/tags/JS-DOM/"},{"name":"JS正则表达式","slug":"JS正则表达式","permalink":"https://屵.com/tags/JS%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"name":"JSMath对象","slug":"JSMath对象","permalink":"https://屵.com/tags/JSMath%E5%AF%B9%E8%B1%A1/"},{"name":"JS日期对象","slug":"JS日期对象","permalink":"https://屵.com/tags/JS%E6%97%A5%E6%9C%9F%E5%AF%B9%E8%B1%A1/"},{"name":"JS对象","slug":"JS对象","permalink":"https://屵.com/tags/JS%E5%AF%B9%E8%B1%A1/"},{"name":"JS类型转换","slug":"JS类型转换","permalink":"https://屵.com/tags/JS%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"},{"name":"js作用域","slug":"js作用域","permalink":"https://屵.com/tags/js%E4%BD%9C%E7%94%A8%E5%9F%9F/"},{"name":"JS事件","slug":"JS事件","permalink":"https://屵.com/tags/JS%E4%BA%8B%E4%BB%B6/"},{"name":"JS函数","slug":"JS函数","permalink":"https://屵.com/tags/JS%E5%87%BD%E6%95%B0/"},{"name":"JS Method","slug":"JS-Method","permalink":"https://屵.com/tags/JS-Method/"},{"name":"思维导图","slug":"思维导图","permalink":"https://屵.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"},{"name":"Typora","slug":"Typora","permalink":"https://屵.com/tags/Typora/"},{"name":"JS运算符","slug":"JS运算符","permalink":"https://屵.com/tags/JS%E8%BF%90%E7%AE%97%E7%AC%A6/"},{"name":"JS基本数据类型","slug":"JS基本数据类型","permalink":"https://屵.com/tags/JS%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"}]}