{"meta":{"title":"屵的博客","subtitle":"屵","description":"专注创新 分享互联网精神","author":"i996的肥仔","url":"https://屵.com","root":"/"},"pages":[{"title":"404","date":"2022-03-27T10:02:17.000Z","updated":"2022-03-27T11:02:07.760Z","comments":true,"path":"404/index.html","permalink":"https://屵.com/404/index.html","excerpt":"","text":""},{"title":"about","date":"2022-03-27T09:54:28.000Z","updated":"2022-03-27T09:55:10.764Z","comments":true,"path":"about/index.html","permalink":"https://屵.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-03-27T09:28:06.000Z","updated":"2022-03-27T09:52:54.548Z","comments":true,"path":"categories/index.html","permalink":"https://屵.com/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2022-03-27T09:55:25.000Z","updated":"2022-03-27T09:55:55.955Z","comments":true,"path":"contact/index.html","permalink":"https://屵.com/contact/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-03-27T09:53:31.000Z","updated":"2022-03-27T09:54:12.123Z","comments":true,"path":"tags/index.html","permalink":"https://屵.com/tags/index.html","excerpt":"","text":""},{"title":"friends","date":"2022-03-27T09:58:07.000Z","updated":"2022-03-27T09:58:41.731Z","comments":true,"path":"friends/index.html","permalink":"https://屵.com/friends/index.html","excerpt":"","text":""}],"posts":[{"title":"JS运算符","slug":"JS运算符","date":"2022-03-28T07:35:28.000Z","updated":"2022-03-29T02:56:24.952Z","comments":true,"path":"2022/03/28/js-yun-suan-fu/","link":"","permalink":"https://屵.com/2022/03/28/js-yun-suan-fu/","excerpt":"","text":"JS运算符（优先级及结合性）算术运算符 算数运算符用来执行常见的数学运算，例如加法、减法、乘法、除法等，下表中列举了 JavaScript 中支持的算术运算符： 运算符 描述 示例 + 加法运算符 x + y 表示计算 x 加 y 的和 - 减法运算符 x - y 表示计算 x 减 y 的差 * 乘法运算符 x * y 表示计算 x 乘 y 的积 / 除法运算符 x / y 表示计算 x 除以 y 的商 % 取模（取余）运算符 x % y 表示计算 x 除以 y 的余数 示例代码如下： var x = 10, y = 4; console.log(\"x + y =\", x + y); // 输出：x + y = 14 console.log(\"x - y =\", x - y); // 输出：x - y = 6 console.log(\"x * y =\", x * y); // 输出：x * y = 40 console.log(\"x / y =\", x / y); // 输出：x / y = 2.5 console.log(\"x % y =\", x % y); // 输出：x % y = 2 赋值运算符赋值运算符用来为变量赋值，下表中列举了 JavaScript 中支持的赋值运算符： 运算符 描述 示例 = 最简单的赋值运算符，将运算符右侧的值赋值给运算符左侧的变量 x = 10 表示将变量 x 赋值为 10 += 先进行加法运算，再将结果赋值给运算符左侧的变量 x += y 等同于 x = x + y -= 先进行减法运算，再将结果赋值给运算符左侧的变量 x -= y 等同于 x = x - y *= 先进行乘法运算，再将结果赋值给运算符左侧的变量 x *= y 等同于 x = x * y /= 先进行除法运算，再将结果赋值给运算符左侧的变量 x /= y 等同于 x = x / y %= 先进行取模运算，再将结果赋值给运算符左侧的变量 x %= y 等同于 x = x % y 示例代码如下： var x = 10; x += 20; console.log(x); // 输出：30 var x = 12, y = 7; x -= y; console.log(x); // 输出：5 x = 5; x *= 25; console.log(x); // 输出：125 x = 50; x /= 10; console.log(x); // 输出：5 x = 100; x %= 15; console.log(x); // 输出：10 字符串运算符JavaScript 中的+和+=运算符除了可以进行数学运算外，还可以用来拼接字符串，其中： +运算符表示将运算符左右两侧的字符串拼接到一起； +=运算符表示先将字符串进行拼接，然后再将结果赋值给运算符左侧的变量。 示例代码如下： var x = \"Hello \"; var y = \"World!\"; var z = x + y; console.log(z); // 输出：Hello World! x += y; console.log(x); // 输出：Hello World! 自增、自减运算符自增、自减运算符用来对变量的值进行自增（+1）、自减（-1）操作，下表中列举了 JavaScript 中支持的自增、自减运算符： 运算符 名称 影响 ++x 自增运算符 将 x 加 1，然后返回 x 的值 x++ 自增运算符 返回 x 的值，然后再将 x 加 1 –x 自减运算符 将 x 减 1，然后返回 x 的值 x– 自减运算符 返回 x 的值，然后将 x 减 1 示例代码如下： var x; x = 10; console.log(++x); // 输出：11 console.log(x); // 输出：11 x = 10; console.log(x++); // 输出：10 console.log(x); // 输出：11 x = 10; console.log(--x); // 输出：9 console.log(x); // 输出：9 x = 10; console.log(x--); // 输出：10 console.log(x); // 输出：9 比较运算符比较运算符用来比较运算符左右两侧的表达式，比较运算符的运算结果是一个布尔值，结果只有两种，不是 true 就是 false。 运算符 名称 示例 == 等于 x == y 表示如果 x 等于 y，则为真 === 全等 x === y 表示如果 x 等于 y，并且 x 和 y 的类型也相同，则为真 != 不相等 x != y 表示如果 x 不等于 y，则为真 !== 不全等 x !== y 表示如果 x 不等于 y，或者 x 和 y 的类型不同，则为真 &lt; 小于 x &lt; y 表示如果 x 小于 y，则为真 &gt; 大于 x &gt; y 表示如果 x 大于 y，则为真 &gt;= 大于或等于 x &gt;= y 表示如果 x 大于或等于 y，则为真 &lt;= 小于或等于 x &lt;= y 表示如果 x 小于或等于 y，则为真 示例代码如下： var x = 25; var y = 35; var z = \"25\"; console.log(x == z); // 输出： true console.log(x === z); // 输出： false console.log(x != y); // 输出： true console.log(x !== z); // 输出： true console.log(x &lt; y); // 输出： true console.log(x > y); // 输出： false console.log(x &lt;= y); // 输出： true console.log(x >= y); // 输出： false 逻辑运算符逻辑运算符通常用来组合多个表达式，逻辑运算符的运算结果是一个布尔值，只能有两种结果，不是 true 就是 false。 运算符 名称 示例 &amp;&amp; 逻辑与 x &amp;&amp; y 表示如果 x 和 y 都为真，则为真 II 逻辑或 x II y 表示如果 x 或 y 有一个为真，则为真 ! 逻辑非 !x 表示如果 x 不为真，则为真 示例代码如下： var year = 2021; // 闰年可以被 400 整除，也可以被 4 整除，但不能被 100 整除 if((year % 400 == 0) || ((year % 100 != 0) &amp;&amp; (year % 4 == 0)))&#123; console.log(year + \" 年是闰年。\"); &#125; else&#123; console.log(year + \" 年是平年。\"); &#125; 三元运算符三元运算符（也被称为条件运算符），由一个问号和一个冒号组成，语法格式如下 条件表达式 ? 表达式1 : 表达式2 ; 如果“条件表达式”的结果为真（true），则执行“表达式1”中的代码，否则就执行“表达式2”中的代码。 var x = 11, y = 20; x > y ? console.log(\"x 大于 y\") : console.log(\"x 小于 y\"); // 输出：x 小于 y 位运算符位运算符用来对二进制位进行操作，JavaScript 中支持的位运算符如下表 运算符 描述 示例 &amp; 按位与：如果对应的二进制位都为 1，则该二进制位为 1 5 &amp; 1 等同于 0101 &amp; 0001 结果为 0001，十进制结果为 1 I 按位或：如果对应的二进制位有一个为 1，则该二进制位为 1 5 I1 等同于 0101 I 0001 结果I为 0101，十进制结果为 5 ^ 按位异或：如果对应的二进制位只有一个为 1，则该二进制位为 1 5 ^ 1 等同于 0101 ^ 0001 结果为 0100，十进制结果为 4 ~ 按位非：反转所有二进制位，即 1 转换为 0，0 转换为 1 ~5 等同于 ~0101 结果为 1010，十进制结果为 -6 &lt;&lt; 按位左移：将所有二进制位统一向左移动指定的位数，并在最右侧补 0 5 &lt;&lt; 1 等同于 0101 &lt;&lt; 1 结果为 1010，十进制结果为 10 &gt;&gt; 按位右移（有符号右移）：将所有二进制位统一向右移动指定的位数，并拷贝最左侧的位来填充左侧 5 &gt;&gt; 1 等同于 0101 &gt;&gt; 1 结果为 0010，十进制结果为 2 &gt;&gt;&gt; 按位右移零（无符号右移）：将所有二进制位统一向右移动指定的位数，并在最左侧补0 5 &gt;&gt;&gt; 1 等同于 0101 &gt;&gt;&gt; 1 结果为 0010，十进制结果为 2 示例代码如下： var a = 5 &amp; 1, b = 5 | 1, c = 5 ^ 1, d = ~ 5, e = 5 &lt;&lt; 1, f = 5 >> 1, g = 5 >>> 1; console.log(a); // 输出：1 console.log(b); // 输出：5 console.log(c); // 输出：4 console.log(d); // 输出：-6 console.log(e); // 输出：10 console.log(f); // 输出：2 console.log(g); // 输出：2 JS运算符优先级JS 运算符的优先级和结合性规定了它们在复杂的表达式中的运算顺序。 运算符的执行顺序称为运算符的优先级，优先级高的运算符先于优先级低的运算符执行运算。 w=x+yz;执行加法运算的+运算符的优先级低于运算符，所以y*z将先被执行，乘法运算执行完后得到的结果再和 x 相加。 运算符的优先级可以通过使用圆括号来改变，例如为了让加法先执行，乘法后执行，可以修改上面的表达式为： w=(x+y)*z; JS 运算符结合性对于相同优先级的运算符的执行顺序，则由运算符的结合性来决定。运算符的结合性包括「从右至左」和「从左至右」两种： 从右至左的结合性指的是，运算的执行是按从右到左的顺序进行； 从左至右的结合性刚好相反，运算符的执行顺序按照从左到右的顺序进行。 JS 运算符优先级和结合性一览表下表中按照优先级由高到低的顺序罗列了 JavaScript 中的所有运算符 运算类型 运算符 关联性 优先级 圆括号 (…) n/a(不相关) 20 成员访问 … . … 从左到右 19 需计算的成员访问 … [ … ] 从左到右 19 new(带参数列表) new … ( … ) n/a 19 可选链（Optional chaining） ？. 从左到右 19 new(无参数列表) new … 从右到左 18 后置递增（运算符在后） … ++ n/a 17 逻辑非 ！… 从右到左 16 按位非 ~ … 从右到左 16 一元加法 + … 从右到左 16 一元减法 - …. 从右到左 16 前置递增 ++ … 从右到左 16 前置递减 – … 从右到左 16 typeof typeof … 从右到左 16 void void … 从右到左 16 delete delete … 从右到左 16 await await … 从右到左 16 幂 … ** … 从右到左 15 乘法 … * … 从左到右 14 除法 … / … 从左到右 14 取模 … % … 从左到右 14 加法 … + … 从左到右 13 减法 … - … 从左到右 13 按位左移 … &lt;&lt; … 从左到右 12 按位右移 … &gt;&gt; … 从左到右 12 无符号右移 … &gt;&gt;&gt; … 从左到右 12 小于 … &lt; … 从左到右 11 小于等于 … &lt;= … 从左到右 11 大于 … &gt; … 从左到右 11 大于等于 … &gt;= … 从左到右 11 in … in … 从左到右 11 instanceof … instanceof … 从左到右 11 等号 … == … 从左到右 10 非等号 … ！= … 从左到右 10 全等号 … === … 从左到右 10 非全等号 … ！=== … 从左到右 10 按位与 … &amp; … 从左到右 9 按位异或 … ^ … 从左到右 8 按位或 … | … 从左到右 7 逻辑与 … &amp;&amp; … 从左到右 6 逻辑或 … || … 从左到右 5 条件运算符 … ? … : … 从右到左 4 赋值 … = … … += … … -= … … *= … … /= … … %= … … &lt;&lt;= … … &gt;&gt;= … … &gt;&gt;&gt;= … … &amp;= … … ^= … … |= … 从右到左 3 yield yield … 从右到左 2 yield* yield* … 从右到左 2 展开运算符 … … n/a 1 逗号 … , … 从左到右 0 读后有收获可以请作者喝咖啡","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[{"name":"JS运算符","slug":"JS运算符","permalink":"https://屵.com/tags/JS%E8%BF%90%E7%AE%97%E7%AC%A6/"}]},{"title":"JS数据类型（基本数据类型+引用类型）","slug":"JS数据类型","date":"2022-03-27T07:47:31.000Z","updated":"2022-03-27T14:02:35.359Z","comments":true,"path":"2022/03/27/js-shu-ju-lei-xing/","link":"","permalink":"https://屵.com/2022/03/27/js-shu-ju-lei-xing/","excerpt":"","text":"JS数据类型（基本数据类型+引用类型）JavaScript 是一种动态类型的语言，在定义变量时不需要提前指定变量的类型，变量的类型是在程序运行过程中由 JavaScript 引擎动态决定的，另外，您可以使用同一个变量来存储不同类型的数据 var a; // 此时 a 为 Undefined a = \"https://www.jianshu.com/u/32841c0369fb\"; // 此时 a 为 String 类型 a = 123; // 此时 a 为 Number 类型 基本数据类型（值类型） 字符串（String）、数字（Number）、布尔（Boolean）、空（Null）、未定义（Undefined）、Symbol String 类型字符串（String）类型是一段以单引号’’或双引号””包裹起来的文本，例如 ‘123’、”abc”。需要注意的是，单引号和双引号是定义字符串的不同方式，并不是字符串的一部分 var str = \"Let's have a cup of coffee.\"; // 双引号中包含单引号 var str = 'He said \"Hello\" and left.'; // 单引号中包含双引号 var str = 'We\\'ll never give up.'; // 使用反斜杠转义字符串中的单引号 Number 类型数值（Number）类型用来定义数值，JavaScript 中不区分整数和小数（浮点数），统一使用 Number 类型表示 var num1 = 123; // 整数 var num2 = 3.14; // 浮点数 注意：Number 类型所能定义的数值并不是无限的 对于一些极大或者极小的数，也可以通过科学（指数）计数法来表示 var y=123e5; // 123 乘以 10 的 5 次方，即 12300000 var z=123e-5; // 123 乘以 10 的 -5 次方，即 0.00123 Number 类型中还有一些比较特殊的值，分别为 Infinity、-Infinity 和 NaN，其中Infinity：用来表示正无穷大的数值，一般指大于 1.7976931348623157e+308 的数；-Infinity：用来表示负无穷大的数值，一般指小于 5e-324 的数；NaN：即非数值（Not a Number 的缩写），用来表示无效或未定义的数学运算结构，例如 0 除以 0。提示：如果某次计算的结果超出了 JavaScript 中 Number 类型的取值范围，那么这个数就会自动转化为无穷大，正数为 Infinity，负数为 -Infinity。 Boolean 类型布尔（Boolean）类型只有两个值，true（真）或者 false（假），在做条件判断时使用的比较多，您除了可以直接使用 true 或 false 来定义布尔类型的变量外，还可以通过一些表达式来得到布尔类型的值 var a = true; // 定义一个布尔值 true var b = false; // 定义一个布尔值 false var c = 2 > 1; // 表达式 2 > 1 成立，其结果为“真（true）”，所以 c 的值为布尔类型的 true var d = 2 &lt; 1; // 表达式 2 &lt; 1 不成立，其结果为“假（false）”，所以 c 的值为布尔类型的 false Undefined 类型Undefined 也是一个只有一个值的特殊数据类型，表示未定义。当我们声明一个变量但未给变量赋值时，这个变量的默认值就是 Undefined var num; console.log(num); // 输出 undefined 在使用 typeof 操作符查看未赋值的变量类型时，会发现它们的类型也是 undefined。对于未声明的变量，使用 typeof 操作符查看其类型会发现，未声明的变量也是 undefined var message; console.log(typeof message); // 输出 undefined console.log(typeof name); // 输出 undefined Symbol 类型Symbol 是 ECMAScript6 中引入的一种新的数据类型，表示独一无二的值，Symbol 类型的值需要使用 Symbol() 函数来生成 var str = \"123\"; var sym1 = Symbol(str); var sym2 = Symbol(str); console.log(sym1); // 输出 Symbol(123) console.log(sym2); // 输出 Symbol(123) console.log(sym1 == sym2); // 输出 false ：虽然 sym1 与 sym2 看起来是相同的，但实际上它们并 不一样，根据 Symbol 类型的特点，sym1 和 sym2 都是独一无二的 引用数据类型 对象（Object）、数组（Array）、函数（Function） Object 类型JavaScript 中的对象（Object）类型是一组由键、值组成的无序集合，定义对象类型需要使用花括号{ }，格式如下： &#123;name1: value1, name2: value2, name3: value3, ..., nameN: valueN&#125; 其中 name1、name2、name3、…、nameN 为对象中的键，value1、value2、value3、…、valueN 为对应的值。 在 JavaScript 中，对象类型的键都是字符串类型的，值则可以是任意数据类型。要获取对象中的某个值，可以使用对象名.键的形式 var person = &#123; name: 'Bob', age: 20, tags: ['js', 'web', 'mobile'], city: 'Beijing', hasCar: true, zipcode: null &#125;; console.log(person.name); // 输出 Bob console.log(person.age); // 输出 20 Array 类型数组（Array）是一组按顺序排列的数据的集合，数组中的每个值都称为元素，而且数组中可以包含任意类型的数据。在 JavaScript 中定义数组需要使用方括号[ ]，数组中的每个元素使用逗号进行分隔 [1, 2, 3, 'hello', true, null] 也可以使用 Array() 函数来创建数组 var arr = new Array(1, 2, 3, 4); console.log(arr); // 输出 [1, 2, 3, 4] 数组中的元素可以通过索引来访问。数组中的索引从 0 开始，并依次递增，也就是说数组第一个元素的索引为 0，第二个元素的索引为 1，第三个元素的索引为 2，以此类推 var arr = [1, 2, 3.14, 'Hello', null, true]; console.log(arr[0]); // 输出索引为 0 的元素，即 1 console.log(arr[5]); // 输出索引为 5 的元素，即 true console.log(arr[6]); // 索引超出了范围，返回 undefined Function 类型函数（Function）是一段具有特定功能的代码块，函数并不会自动运行，需要通过函数名调用才能运行 function sayHello(name)&#123; return \"Hello, \" + name; &#125; var res = sayHello(\"Jinghai\"); console.log(res); // 输出 Hello, Jinghai 函数还可以存储在变量、对象、数组中，而且函数可以作为参数传递给其它函数，或则从其它函数返回 var fun = function()&#123; console.log(\"https://www.jianshu.com/u/32841c0369fb\"); &#125; function createGreeting(name)&#123; return \"Hello, \" + name; &#125; function displayGreeting(greetingFunction, userName)&#123; return greetingFunction(userName); &#125; var result = displayGreeting(createGreeting, \"Jinghai\"); console.log(result); // 输出 Hello, Jinghai 读后有收获可以请作者喝咖啡","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/tags/JavaScript/"}]}],"categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/categories/JavaScript/"}],"tags":[{"name":"JS运算符","slug":"JS运算符","permalink":"https://屵.com/tags/JS%E8%BF%90%E7%AE%97%E7%AC%A6/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://屵.com/tags/JavaScript/"}]}