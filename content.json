{"meta":{"title":"屵的博客","subtitle":"","description":"专注创新 分享互联网精神","author":"i996的码农","url":"http://www.屵.com","root":"/"},"pages":[{"title":"404","date":"2022-03-27T10:02:17.000Z","updated":"2022-03-27T11:02:07.760Z","comments":true,"path":"404/index.html","permalink":"http://www.屵.com/404/index.html","excerpt":"","text":""},{"title":"contact","date":"2022-03-27T09:55:25.000Z","updated":"2022-03-27T09:55:55.955Z","comments":true,"path":"contact/index.html","permalink":"http://www.屵.com/contact/index.html","excerpt":"","text":""},{"title":"about","date":"2022-03-27T09:54:28.000Z","updated":"2022-03-27T09:55:10.764Z","comments":true,"path":"about/index.html","permalink":"http://www.屵.com/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-03-27T09:53:31.000Z","updated":"2022-03-27T09:54:12.123Z","comments":true,"path":"tags/index.html","permalink":"http://www.屵.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-03-27T09:28:06.000Z","updated":"2022-03-27T09:52:54.548Z","comments":true,"path":"categories/index.html","permalink":"http://www.屵.com/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2022-03-27T09:58:07.000Z","updated":"2022-03-27T09:58:41.731Z","comments":true,"path":"friends/index.html","permalink":"http://www.屵.com/friends/index.html","excerpt":"","text":""}],"posts":[{"title":"JS数据类型（基本数据类型+引用类型）","slug":"JS数据类型","date":"2022-03-27T07:47:31.000Z","updated":"2022-03-27T14:02:35.359Z","comments":true,"path":"2022/03/27/js-shu-ju-lei-xing/","link":"","permalink":"http://www.屵.com/2022/03/27/js-shu-ju-lei-xing/","excerpt":"","text":"JS数据类型（基本数据类型+引用类型）JavaScript 是一种动态类型的语言，在定义变量时不需要提前指定变量的类型，变量的类型是在程序运行过程中由 JavaScript 引擎动态决定的，另外，您可以使用同一个变量来存储不同类型的数据 var a; // 此时 a 为 Undefined a = \"https://www.jianshu.com/u/32841c0369fb\"; // 此时 a 为 String 类型 a = 123; // 此时 a 为 Number 类型 基本数据类型（值类型） 字符串（String）、数字（Number）、布尔（Boolean）、空（Null）、未定义（Undefined）、Symbol String 类型字符串（String）类型是一段以单引号’’或双引号””包裹起来的文本，例如 ‘123’、”abc”。需要注意的是，单引号和双引号是定义字符串的不同方式，并不是字符串的一部分 var str = \"Let's have a cup of coffee.\"; // 双引号中包含单引号 var str = 'He said \"Hello\" and left.'; // 单引号中包含双引号 var str = 'We\\'ll never give up.'; // 使用反斜杠转义字符串中的单引号 Number 类型数值（Number）类型用来定义数值，JavaScript 中不区分整数和小数（浮点数），统一使用 Number 类型表示 var num1 = 123; // 整数 var num2 = 3.14; // 浮点数 注意：Number 类型所能定义的数值并不是无限的 对于一些极大或者极小的数，也可以通过科学（指数）计数法来表示 var y=123e5; // 123 乘以 10 的 5 次方，即 12300000 var z=123e-5; // 123 乘以 10 的 -5 次方，即 0.00123 Number 类型中还有一些比较特殊的值，分别为 Infinity、-Infinity 和 NaN，其中Infinity：用来表示正无穷大的数值，一般指大于 1.7976931348623157e+308 的数；-Infinity：用来表示负无穷大的数值，一般指小于 5e-324 的数；NaN：即非数值（Not a Number 的缩写），用来表示无效或未定义的数学运算结构，例如 0 除以 0。提示：如果某次计算的结果超出了 JavaScript 中 Number 类型的取值范围，那么这个数就会自动转化为无穷大，正数为 Infinity，负数为 -Infinity。 Boolean 类型布尔（Boolean）类型只有两个值，true（真）或者 false（假），在做条件判断时使用的比较多，您除了可以直接使用 true 或 false 来定义布尔类型的变量外，还可以通过一些表达式来得到布尔类型的值 var a = true; // 定义一个布尔值 true var b = false; // 定义一个布尔值 false var c = 2 > 1; // 表达式 2 > 1 成立，其结果为“真（true）”，所以 c 的值为布尔类型的 true var d = 2 &lt; 1; // 表达式 2 &lt; 1 不成立，其结果为“假（false）”，所以 c 的值为布尔类型的 false Undefined 类型Undefined 也是一个只有一个值的特殊数据类型，表示未定义。当我们声明一个变量但未给变量赋值时，这个变量的默认值就是 Undefined var num; console.log(num); // 输出 undefined 在使用 typeof 操作符查看未赋值的变量类型时，会发现它们的类型也是 undefined。对于未声明的变量，使用 typeof 操作符查看其类型会发现，未声明的变量也是 undefined var message; console.log(typeof message); // 输出 undefined console.log(typeof name); // 输出 undefined Symbol 类型Symbol 是 ECMAScript6 中引入的一种新的数据类型，表示独一无二的值，Symbol 类型的值需要使用 Symbol() 函数来生成 var str = \"123\"; var sym1 = Symbol(str); var sym2 = Symbol(str); console.log(sym1); // 输出 Symbol(123) console.log(sym2); // 输出 Symbol(123) console.log(sym1 == sym2); // 输出 false ：虽然 sym1 与 sym2 看起来是相同的，但实际上它们并 不一样，根据 Symbol 类型的特点，sym1 和 sym2 都是独一无二的 引用数据类型 对象（Object）、数组（Array）、函数（Function） Object 类型JavaScript 中的对象（Object）类型是一组由键、值组成的无序集合，定义对象类型需要使用花括号{ }，格式如下： &#123;name1: value1, name2: value2, name3: value3, ..., nameN: valueN&#125; 其中 name1、name2、name3、…、nameN 为对象中的键，value1、value2、value3、…、valueN 为对应的值。 在 JavaScript 中，对象类型的键都是字符串类型的，值则可以是任意数据类型。要获取对象中的某个值，可以使用对象名.键的形式 var person = &#123; name: 'Bob', age: 20, tags: ['js', 'web', 'mobile'], city: 'Beijing', hasCar: true, zipcode: null &#125;; console.log(person.name); // 输出 Bob console.log(person.age); // 输出 20 Array 类型数组（Array）是一组按顺序排列的数据的集合，数组中的每个值都称为元素，而且数组中可以包含任意类型的数据。在 JavaScript 中定义数组需要使用方括号[ ]，数组中的每个元素使用逗号进行分隔 [1, 2, 3, 'hello', true, null] 也可以使用 Array() 函数来创建数组 var arr = new Array(1, 2, 3, 4); console.log(arr); // 输出 [1, 2, 3, 4] 数组中的元素可以通过索引来访问。数组中的索引从 0 开始，并依次递增，也就是说数组第一个元素的索引为 0，第二个元素的索引为 1，第三个元素的索引为 2，以此类推 var arr = [1, 2, 3.14, 'Hello', null, true]; console.log(arr[0]); // 输出索引为 0 的元素，即 1 console.log(arr[5]); // 输出索引为 5 的元素，即 true console.log(arr[6]); // 索引超出了范围，返回 undefined Function 类型函数（Function）是一段具有特定功能的代码块，函数并不会自动运行，需要通过函数名调用才能运行 function sayHello(name)&#123; return \"Hello, \" + name; &#125; var res = sayHello(\"Jinghai\"); console.log(res); // 输出 Hello, Jinghai 函数还可以存储在变量、对象、数组中，而且函数可以作为参数传递给其它函数，或则从其它函数返回 var fun = function()&#123; console.log(\"https://www.jianshu.com/u/32841c0369fb\"); &#125; function createGreeting(name)&#123; return \"Hello, \" + name; &#125; function displayGreeting(greetingFunction, userName)&#123; return greetingFunction(userName); &#125; var result = displayGreeting(createGreeting, \"Jinghai\"); console.log(result); // 输出 Hello, Jinghai 读后有收获可以请作者喝咖啡","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.屵.com/tags/JavaScript/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-03-27T06:53:40.701Z","updated":"2022-03-27T06:49:17.946Z","comments":true,"path":"2022/03/27/hello-world/","link":"","permalink":"http://www.屵.com/2022/03/27/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.屵.com/tags/JavaScript/"}]}